{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Java Notes \u270d Arjun Adhikari , Django & Python Developer Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. This note is prepared focusing the syllabus of Pokhara University with the guidance of Lecturer Nishal Gurung .","title":"Home"},{"location":"#java-notes","text":"\u270d Arjun Adhikari , Django & Python Developer Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. This note is prepared focusing the syllabus of Pokhara University with the guidance of Lecturer Nishal Gurung .","title":"Java Notes"},{"location":"AWT/","text":"Event, Event Handling & AWT/Swing Also called javafx JFx AWT ( abstract window toolkit) AWT contains large numbers of classes and methods that allows you to create and manage graphical user interface(GUI) such as windows, buttons, scrollbars,textblocks ,etc. The awt was designed to provide a common set of tools for GUI design that could work on a variety of platforms. The tools provided by the awt are implemented using each platforms native GUI toolkit, hence preserving the look and feel of each platform. It is an advantage of awt. But the disadvantage of such an approach is that GUI designed on one platform may look different when displayed on another platform. Awt is the foundation upon which swing is made. AWT Hierarchy Component The component is an abstract class that encapsulates all the attributes of a visual Components. Except for menus, all user interface elements that are displayed on the screen and that interact with the user of subclasses of Component. A Component object is responsible for remembering the current foreground and background colors and the currently selected text font. Container The Container class is a subclass of Component class. It has additional methods that allow other Component objects to be nested within it. Other Container objects can be stored inside a Container(Since they are themselves an instance of Component). This makes for a multilevel containment system. A Container is responsible for laying out i.e. positioning any components that it contains. It does thus throw the use of various layout manager. Panel The panel is the Container that does not contain a title bar, menu bars, border. It can have other components like button text field, etc. The panel is the superclass for the applet. This is why you don't see title bar, menu bar or border when an applet is run inside a browser. When you run an applet using an applet viewer, the applet viewer provides the title and border. Other components can be added to a Panel objects by its add() method. Once this components have been added, you can position and resize them manually using the setLocation(), setSize(), setBounds(), etc. Window The Window is the Container that has no borders and menu bars. The Window class creates a top level window. A top level window is not contained within any other object. Generally, you won't create a Window object directly. Instead, you will use a subclass of Window called Frame. Frame The frame has a title bar, menu bar, borders and resizing corners. The precise look of a frame will differ from the environment. The frame is a Container that contains several different components like button, title, text field, label etc. In Java, most of the awt application is created using the frame window.","title":"Event, Event Handling & AWT/Swing"},{"location":"AWT/#event-event-handling-awtswing","text":"Also called javafx JFx","title":"Event, Event Handling &amp; AWT/Swing"},{"location":"AWT/#awt-abstract-window-toolkit","text":"AWT contains large numbers of classes and methods that allows you to create and manage graphical user interface(GUI) such as windows, buttons, scrollbars,textblocks ,etc. The awt was designed to provide a common set of tools for GUI design that could work on a variety of platforms. The tools provided by the awt are implemented using each platforms native GUI toolkit, hence preserving the look and feel of each platform. It is an advantage of awt. But the disadvantage of such an approach is that GUI designed on one platform may look different when displayed on another platform. Awt is the foundation upon which swing is made.","title":"AWT ( abstract window toolkit)"},{"location":"AWT/#awt-hierarchy","text":"","title":"AWT Hierarchy"},{"location":"AWT/#component","text":"The component is an abstract class that encapsulates all the attributes of a visual Components. Except for menus, all user interface elements that are displayed on the screen and that interact with the user of subclasses of Component. A Component object is responsible for remembering the current foreground and background colors and the currently selected text font.","title":"Component"},{"location":"AWT/#container","text":"The Container class is a subclass of Component class. It has additional methods that allow other Component objects to be nested within it. Other Container objects can be stored inside a Container(Since they are themselves an instance of Component). This makes for a multilevel containment system. A Container is responsible for laying out i.e. positioning any components that it contains. It does thus throw the use of various layout manager.","title":"Container"},{"location":"AWT/#panel","text":"The panel is the Container that does not contain a title bar, menu bars, border. It can have other components like button text field, etc. The panel is the superclass for the applet. This is why you don't see title bar, menu bar or border when an applet is run inside a browser. When you run an applet using an applet viewer, the applet viewer provides the title and border. Other components can be added to a Panel objects by its add() method. Once this components have been added, you can position and resize them manually using the setLocation(), setSize(), setBounds(), etc.","title":"Panel"},{"location":"AWT/#window","text":"The Window is the Container that has no borders and menu bars. The Window class creates a top level window. A top level window is not contained within any other object. Generally, you won't create a Window object directly. Instead, you will use a subclass of Window called Frame.","title":"Window"},{"location":"AWT/#frame","text":"The frame has a title bar, menu bar, borders and resizing corners. The precise look of a frame will differ from the environment. The frame is a Container that contains several different components like button, title, text field, label etc. In Java, most of the awt application is created using the frame window.","title":"Frame"},{"location":"AWT/CONTROLS/","text":"Adding and Removing Controls ? To include a control in a window, you must add it to the window. To do this, you must crate an instance of the desired control and then add it to a Window by calling add (), which is defined by Container class. Syntax Component add (Component ComponentRef); AWT Controls Once a component has been added it will be automatically visible whenever its parent window is displayed. To remove void remove(Component ComponentRef); void removeAll();","title":"Adding and Removing Controls ?"},{"location":"AWT/CONTROLS/#adding-and-removing-controls","text":"To include a control in a window, you must add it to the window. To do this, you must crate an instance of the desired control and then add it to a Window by calling add (), which is defined by Container class.","title":"Adding and Removing Controls ?"},{"location":"AWT/CONTROLS/#syntax","text":"Component add (Component ComponentRef);","title":"Syntax"},{"location":"AWT/CONTROLS/#awt-controls","text":"Once a component has been added it will be automatically visible whenever its parent window is displayed.","title":"AWT Controls"},{"location":"AWT/CONTROLS/#to-remove","text":"void remove(Component ComponentRef); void removeAll();","title":"To remove"},{"location":"AWT/CheckBox/","text":"Checkbox A Checkbox is a control that is used to turn an option on or off. It consists of a small box tha can either contain a checkmark or not. There is a Label associated with each check box that describes what option the box represents. Can change the state of a Checkbox by clicking on it. ## Constructors: 1. Checkbox() throws HeadlessException 2. Checkbox(String str) throws HeadlessException 3. Checkbox(String str, boolean on) throws HeadlessException 4. Checkbox(String str, boolean on, CheckboxGroup cbGroup) throws HeadlessException 5. Checkbox(String str, CheckboxGroup cbGroup, boolean on) throws HeadlessException ## Methods 1. boolean getState(); 2. void setState(boolean on); 3. String getLabel(); 4. void setLabel(String str);","title":"Checkbox"},{"location":"AWT/CheckBox/#checkbox","text":"A Checkbox is a control that is used to turn an option on or off. It consists of a small box tha can either contain a checkmark or not. There is a Label associated with each check box that describes what option the box represents. Can change the state of a Checkbox by clicking on it. ## Constructors: 1. Checkbox() throws HeadlessException 2. Checkbox(String str) throws HeadlessException 3. Checkbox(String str, boolean on) throws HeadlessException 4. Checkbox(String str, boolean on, CheckboxGroup cbGroup) throws HeadlessException 5. Checkbox(String str, CheckboxGroup cbGroup, boolean on) throws HeadlessException ## Methods 1. boolean getState(); 2. void setState(boolean on); 3. String getLabel(); 4. void setLabel(String str);","title":"Checkbox"},{"location":"AWT/button/","text":"Button The most widely used control is the push button. A push button is a Component that contains a label and that generates an event when it is pressed. Push buttons are objects of type button. Button defines these two constructors: ## Constructors 1. public Button() 2. public Button(String buttonLabel) throws headless Exception; ## Public Methods 1. public String getLabel(); - Get the label of this button instance. public void setLabel(String btnlabel); Set the label of this button instance. public void setEnable(boolean enable); Enable or disable this Button. Disabled Button cannot be clicked.","title":"Button"},{"location":"AWT/button/#button","text":"The most widely used control is the push button. A push button is a Component that contains a label and that generates an event when it is pressed. Push buttons are objects of type button. Button defines these two constructors: ## Constructors 1. public Button() 2. public Button(String buttonLabel) throws headless Exception; ## Public Methods 1. public String getLabel(); - Get the label of this button instance. public void setLabel(String btnlabel); Set the label of this button instance. public void setEnable(boolean enable); Enable or disable this Button. Disabled Button cannot be clicked.","title":"Button"},{"location":"AWT/checkBoxGroup/","text":"CheckboxGroup It is possible to create a set if mutually exclusive check boxes in which one and only one checkbox in the group can be checked at any one time. Also known as radio button . Constructors CheckboxGroup(); Methods Checkbox getSelectedCheckbox(); void setSelectedCheckbox(Checkbox which);","title":"CheckboxGroup"},{"location":"AWT/checkBoxGroup/#checkboxgroup","text":"It is possible to create a set if mutually exclusive check boxes in which one and only one checkbox in the group can be checked at any one time. Also known as radio button .","title":"CheckboxGroup"},{"location":"AWT/checkBoxGroup/#constructors","text":"CheckboxGroup();","title":"Constructors"},{"location":"AWT/checkBoxGroup/#methods","text":"Checkbox getSelectedCheckbox(); void setSelectedCheckbox(Checkbox which);","title":"Methods"},{"location":"AWT/choice/","text":"Choice Same as Select in HTML - The Choice class is used to create a pop-up list of items from which user may choose. - Only one item can be chosen . ## Constructors: Choice(); ## Methods: 1. void add(String name); 2. String getSelectedItem(); 3. int getSelectedIndex(); 4. int getItemCount(); 5. void select(String name); 6. String getItem(int index);","title":"Choice"},{"location":"AWT/choice/#choice","text":"Same as Select in HTML - The Choice class is used to create a pop-up list of items from which user may choose. - Only one item can be chosen . ## Constructors: Choice(); ## Methods: 1. void add(String name); 2. String getSelectedItem(); 3. int getSelectedIndex(); 4. int getItemCount(); 5. void select(String name); 6. String getItem(int index);","title":"Choice"},{"location":"AWT/frame/closeAbleFrame/","text":"Closeable Frame It is possible to implement the close button of any frame orwindow in java application. By default, the close button of the frame is not in working state. The close button of the frame has to be set for the closing operation.","title":"Closeable Frame"},{"location":"AWT/frame/closeAbleFrame/#closeable-frame","text":"It is possible to implement the close button of any frame orwindow in java application. By default, the close button of the frame is not in working state. The close button of the frame has to be set for the closing operation.","title":"Closeable Frame"},{"location":"AWT/label/","text":"Labels Labels are passive controls that do not support any interaction with the user i.e. no event handling. A label is an object of type Label and it contains a String, which it displays. Label defines the following constructors: i. Label() throws HeadLessException ii. Label(String str) throws HeadLessException // The string is left justified. iii. Label(String str, int how) throws HeadLessException // label.LEFT, label.RIGHT \ud83d\udc49Methods i. void setText(String str); ii. String getText(); iii. void setAlignment(int how); iv. int getAlignment(); Example Label name = new Label(\"Arjun\"); name.setText(\"Another Arjun\"); String myNameWas = name.getText();","title":"Labels"},{"location":"AWT/label/#labels","text":"Labels are passive controls that do not support any interaction with the user i.e. no event handling. A label is an object of type Label and it contains a String, which it displays. Label defines the following constructors: i. Label() throws HeadLessException ii. Label(String str) throws HeadLessException // The string is left justified. iii. Label(String str, int how) throws HeadLessException // label.LEFT, label.RIGHT","title":"Labels"},{"location":"AWT/label/#methods","text":"i. void setText(String str); ii. String getText(); iii. void setAlignment(int how); iv. int getAlignment();","title":"\ud83d\udc49Methods"},{"location":"AWT/label/#example","text":"Label name = new Label(\"Arjun\"); name.setText(\"Another Arjun\"); String myNameWas = name.getText();","title":"Example"},{"location":"AWT/layout/","text":"LayoutManager LayoutManager are provided to arrange GUI components on a container for presentation purpose. Each Container object has a LayoutManager interface. A layout Manager is an instance of any class that implements the LayoutManager interface The layout manager is set by the setLayout() method. If no call is setLayout() is made, then the default layout manager is used that is FlowLayout . ## Types of LayoutManager 1. FlowLayout 2. BorderLayout 3. GridLayout 4. CardLayout 5. GridBagLayout ### Two ways to create a Frame in AWT : 1. By extending Frame Class. (Inheritance) 2. By creating the object of Frame class. (Association)","title":"LayoutManager"},{"location":"AWT/layout/#layoutmanager","text":"LayoutManager are provided to arrange GUI components on a container for presentation purpose. Each Container object has a LayoutManager interface. A layout Manager is an instance of any class that implements the LayoutManager interface The layout manager is set by the setLayout() method. If no call is setLayout() is made, then the default layout manager is used that is FlowLayout . ## Types of LayoutManager 1. FlowLayout 2. BorderLayout 3. GridLayout 4. CardLayout 5. GridBagLayout ### Two ways to create a Frame in AWT : 1. By extending Frame Class. (Inheritance) 2. By creating the object of Frame class. (Association)","title":"LayoutManager"},{"location":"AWT/layout/GridBagLayout/","text":"GridBag Layout A flexible layout manager that arranges components in a grid with a variable sized cells. The GridBagLayout class is flexible Layout manager that aligns components vertically and horizontally and the components of different size. Each GridBagLayout object maintains a dynamic, rectangular grid of cells. Each Component is managed by a GridBagLayout is associated with an instance of GridBagConstraints . We use to set constraints : void setConstraints(Component c, GridBagConstraints cons); Constructor 1. GridBagLayout();","title":"GridBag Layout"},{"location":"AWT/layout/GridBagLayout/#gridbag-layout","text":"A flexible layout manager that arranges components in a grid with a variable sized cells. The GridBagLayout class is flexible Layout manager that aligns components vertically and horizontally and the components of different size. Each GridBagLayout object maintains a dynamic, rectangular grid of cells. Each Component is managed by a GridBagLayout is associated with an instance of GridBagConstraints . We use to set constraints : void setConstraints(Component c, GridBagConstraints cons);","title":"GridBag Layout"},{"location":"AWT/layout/GridBagLayout/#constructor","text":"1. GridBagLayout();","title":"Constructor"},{"location":"AWT/layout/GridLayout/","text":"Grid Layout A container using the GridLayout scheme arranges components in rows and colums in row major order. Each component is sized to fit its respective grid cell. Constructors a. GridLayout() b. GridLayout(int rows, int cols) c. GridLayout(int rows, int cols, int hgap, int vgap)","title":"Grid Layout"},{"location":"AWT/layout/GridLayout/#grid-layout","text":"A container using the GridLayout scheme arranges components in rows and colums in row major order. Each component is sized to fit its respective grid cell.","title":"Grid Layout"},{"location":"AWT/layout/GridLayout/#constructors","text":"a. GridLayout() b. GridLayout(int rows, int cols) c. GridLayout(int rows, int cols, int hgap, int vgap)","title":"Constructors"},{"location":"AWT/layout/borderLayout/","text":"Border Layout The BorderLayout manager arranges components within specified regions of container. Valid regions are : \"North\", \"South\", \"East\", \"West\" & \"Center\". Constructor BorderLayout() BorderLayout(int hgap, int vgap) Eg: add(new Button(\"North\"), BorderLayout.WEST) add(\"North\", new Button(\"West\") )","title":"Border Layout"},{"location":"AWT/layout/borderLayout/#border-layout","text":"The BorderLayout manager arranges components within specified regions of container. Valid regions are : \"North\", \"South\", \"East\", \"West\" & \"Center\".","title":"Border Layout"},{"location":"AWT/layout/borderLayout/#constructor","text":"BorderLayout() BorderLayout(int hgap, int vgap) Eg: add(new Button(\"North\"), BorderLayout.WEST) add(\"North\", new Button(\"West\") )","title":"Constructor"},{"location":"AWT/layout/cardLayout/","text":"Card Layout Makes each component as large as the container and diplays only one at a time. Constructors CardLayout () CardLayout (int hgap, int vgap) Methods void first (Container deck) void last (Container deck) void next (Container deck) void previous (Container deck) void show (Container deck, String cardName)","title":"Card Layout"},{"location":"AWT/layout/cardLayout/#card-layout","text":"Makes each component as large as the container and diplays only one at a time.","title":"Card Layout"},{"location":"AWT/layout/cardLayout/#constructors","text":"CardLayout () CardLayout (int hgap, int vgap)","title":"Constructors"},{"location":"AWT/layout/cardLayout/#methods","text":"void first (Container deck) void last (Container deck) void next (Container deck) void previous (Container deck) void show (Container deck, String cardName)","title":"Methods"},{"location":"AWT/layout/flowLayout/","text":"FlowLayout Arranges components like words on a page - From left to right in rows and then top to bottom as each row fills up. ## Constructors 1. FlowLayout() 2. FlowLayout(int align) 3. FlowLayout(int align, int hgape, int vgape) ## FlowLayout Alignments FlowLayout.LEFT, FlowLayout.RIGHT, FlowLayout.CENTER","title":"FlowLayout"},{"location":"AWT/layout/flowLayout/#flowlayout","text":"Arranges components like words on a page - From left to right in rows and then top to bottom as each row fills up. ## Constructors 1. FlowLayout() 2. FlowLayout(int align) 3. FlowLayout(int align, int hgape, int vgape) ## FlowLayout Alignments FlowLayout.LEFT, FlowLayout.RIGHT, FlowLayout.CENTER","title":"FlowLayout"},{"location":"AWT/list/","text":"List The List class provides a compact, multiple-choice scrolling selection list. ## Constructors 1. List() throws HeadlessException 2. List(int numRows) throws HeadlessException 3. List( int numRows, boolean multipleSelect) throws HeadlessException numRows number of rows will be visible, if false, then only one item may be selected. ## Methods 1. void add(String name); 2. void add(String name , int index); 3. String getSelectedItem() - for single selection 5. int getSelectedIndex() 6. String[] getSelectedItems() - for multiple selection 8. int[] getSelectedIndexes() 9. int getItemCount(); 10. void select(int index);","title":"List"},{"location":"AWT/list/#list","text":"The List class provides a compact, multiple-choice scrolling selection list. ## Constructors 1. List() throws HeadlessException 2. List(int numRows) throws HeadlessException 3. List( int numRows, boolean multipleSelect) throws HeadlessException numRows number of rows will be visible, if false, then only one item may be selected. ## Methods 1. void add(String name); 2. void add(String name , int index); 3. String getSelectedItem() - for single selection 5. int getSelectedIndex() 6. String[] getSelectedItems() - for multiple selection 8. int[] getSelectedIndexes() 9. int getItemCount(); 10. void select(int index);","title":"List"},{"location":"AWT/scrollBar/","text":"Scrollbar Scrollbar is used to select continuous values between a specified minimum and maximum. May be oriented horizontally or vertically. It contain slider box that can be dragged by the uset to a new position. # Constructors 1. Scrollbar() throws HeadlessException 2. Scrollbar(int style) throws HeadlessException - Style includes Scrollbar.VERTICAL and Scrollbar.HORIZONTAL . Scrollbar(int style, int thumbSize, int min, int max) throws HeadlessException # Methods: 1. void setValues(int initialValue, int thumbSize, int min, int max); 2. int getValue() 3. void setValue(int newValue) 4. int getMinimum() 5. int getMaximum()","title":"Scrollbar"},{"location":"AWT/scrollBar/#scrollbar","text":"Scrollbar is used to select continuous values between a specified minimum and maximum. May be oriented horizontally or vertically. It contain slider box that can be dragged by the uset to a new position. # Constructors 1. Scrollbar() throws HeadlessException 2. Scrollbar(int style) throws HeadlessException - Style includes Scrollbar.VERTICAL and Scrollbar.HORIZONTAL . Scrollbar(int style, int thumbSize, int min, int max) throws HeadlessException # Methods: 1. void setValues(int initialValue, int thumbSize, int min, int max); 2. int getValue() 3. void setValue(int newValue) 4. int getMinimum() 5. int getMaximum()","title":"Scrollbar"},{"location":"AWT/textArea/","text":"TextArea Sub class of TextComponent Sometimes a single line of text input is not enough for a given task. To handle this situation, the awt includes a simple multiline editor called TextArea . ## Constructors 1. TextArea() throws HeadlessException 2. TextArea(int numLines, int numChars) throws HeadlessException 3. TextArea(String str) throws HeadlessException 4. TextArea(Stirng str, int numLines, numChars) throws HeadlessException 5. TextArea(String str, int numLines,int numChars, int sBars) throws HeadlessException Here, numLines represents rows and numChars represents number of columns. sBars is Scroll Bar to use scrollbar in the TextArea. SCROLLBARS_BOTH, SCROLLBARS_NONE, SCROLLBARS_HORIZONTAL_ONLY, SCROLLBARS_VERTICAL_ONLY Public Methods: 1. String getText() 2. void setText() 3. String getSelectedText() 4. void select(int startIndex, int endIndex) 5. boolean isEditable() 6. void setEditable( boolean canEdit) These methods are defined by TextComponent TextComponent class is the superclass of TextField and TextArea So, both TextField and TextArea can use these methods. TextArea adds the following editing methods: 1. void append(String str) - The append() method appends the strings specified by str to the end of the current text. void insert(String str , int index) insert() method inserts the string passed in str at the specified index. void replaceRange(String sr, int startIndex , int endIndex) To replace text, replaceRange() replaces the characters from startIndex to endIndex-1, with the replacement text passed in str.","title":"TextArea"},{"location":"AWT/textArea/#textarea","text":"Sub class of TextComponent Sometimes a single line of text input is not enough for a given task. To handle this situation, the awt includes a simple multiline editor called TextArea . ## Constructors 1. TextArea() throws HeadlessException 2. TextArea(int numLines, int numChars) throws HeadlessException 3. TextArea(String str) throws HeadlessException 4. TextArea(Stirng str, int numLines, numChars) throws HeadlessException 5. TextArea(String str, int numLines,int numChars, int sBars) throws HeadlessException Here, numLines represents rows and numChars represents number of columns. sBars is Scroll Bar to use scrollbar in the TextArea. SCROLLBARS_BOTH, SCROLLBARS_NONE, SCROLLBARS_HORIZONTAL_ONLY, SCROLLBARS_VERTICAL_ONLY Public Methods: 1. String getText() 2. void setText() 3. String getSelectedText() 4. void select(int startIndex, int endIndex) 5. boolean isEditable() 6. void setEditable( boolean canEdit) These methods are defined by TextComponent TextComponent class is the superclass of TextField and TextArea So, both TextField and TextArea can use these methods. TextArea adds the following editing methods: 1. void append(String str) - The append() method appends the strings specified by str to the end of the current text. void insert(String str , int index) insert() method inserts the string passed in str at the specified index. void replaceRange(String sr, int startIndex , int endIndex) To replace text, replaceRange() replaces the characters from startIndex to endIndex-1, with the replacement text passed in str.","title":"TextArea"},{"location":"AWT/textField/","text":"TextField The TextField class implements a single line text entry area ususally called an edit control. TextField allow the user to enter strings and to edit the text using the arrow keys, cut and paste keys and mouse selection. ## Constructors 1. public TextField(String initialText, int columns) - Construct a TextField instance with the given initial text string with the number of column public TextField(String strText); Set the text display text on this TextField instance public TextField(int columns); Construct s TextField instance with number of columns ## Public Methods 1. boolean isEditable() public String getText(); Get the current text on this TextField instance public void setText(String strText) Set this display text on this TextField instance public void setEditable(boolean editable); Set the TextField to editable (read/ write) or non editable (read- only) void setEchoChar(char ch) Change the content of generally password into OR there may be times when you will want the user to enter text that is not displayed, such as a password. You can disable the echoing of the characters as they are typed by calling this method. If ch is 0, then normal echoing is restored. TextField password = new TextField(); password.setEchoChar(\"*\") boolean echoCharIsSet(); Return ture or false whether the TextField is set with some char char getEchoChar(); Return the character which was set in the TextField.","title":"TextField"},{"location":"AWT/textField/#textfield","text":"The TextField class implements a single line text entry area ususally called an edit control. TextField allow the user to enter strings and to edit the text using the arrow keys, cut and paste keys and mouse selection. ## Constructors 1. public TextField(String initialText, int columns) - Construct a TextField instance with the given initial text string with the number of column public TextField(String strText); Set the text display text on this TextField instance public TextField(int columns); Construct s TextField instance with number of columns ## Public Methods 1. boolean isEditable() public String getText(); Get the current text on this TextField instance public void setText(String strText) Set this display text on this TextField instance public void setEditable(boolean editable); Set the TextField to editable (read/ write) or non editable (read- only) void setEchoChar(char ch) Change the content of generally password into OR there may be times when you will want the user to enter text that is not displayed, such as a password. You can disable the echoing of the characters as they are typed by calling this method. If ch is 0, then normal echoing is restored. TextField password = new TextField(); password.setEchoChar(\"*\") boolean echoCharIsSet(); Return ture or false whether the TextField is set with some char char getEchoChar(); Return the character which was set in the TextField.","title":"TextField"},{"location":"JDBC/","text":"Java Database Connetivity (JDBC) JDBC is a speification (Guidelines) defined by Java vendor and implemented by Database vendor. Database vendor provided implementation is called Driver Software.","title":"Java Database Connetivity (JDBC)"},{"location":"JDBC/#java-database-connetivity-jdbc","text":"JDBC is a speification (Guidelines) defined by Java vendor and implemented by Database vendor. Database vendor provided implementation is called Driver Software.","title":"Java Database Connetivity (JDBC)"},{"location":"JDBC/DIFFERENCES/","text":"Difference between ODBC and JDBC ODBC 1992, Open Database Connectivity Developed by Microsoft Support any language Only for Windows machine Support any database JDBC 1997, Java Database Connectivity - Support any database - Support any platform - Only for Java language - Developed by Sun Microsystems.","title":"Difference between ODBC and JDBC"},{"location":"JDBC/DIFFERENCES/#difference-between-odbc-and-jdbc","text":"","title":"Difference between ODBC and JDBC"},{"location":"JDBC/DIFFERENCES/#odbc","text":"1992, Open Database Connectivity Developed by Microsoft Support any language Only for Windows machine Support any database","title":"ODBC"},{"location":"JDBC/DIFFERENCES/#jdbc","text":"1997, Java Database Connectivity - Support any database - Support any platform - Only for Java language - Developed by Sun Microsystems.","title":"JDBC"},{"location":"JDBC/DifferencesBetweenStatementAndPS/","text":"Difference between Statement and Prepared Statement Statement Prepared Statement At the time of creating Statement object, we are not required to provide any query At the time of creating Prepared Object, we have to provide SQL Query compulsary which can be send to the database and will be compiled. Statemnt st = con.createStatement(); PreparedStatement pst = con.prepareStatement(query); Hence, Statement object is not associated with any query and we can use for multiple queries. Hence, Prepared Statement is associated with any query. Whenever, we are using execute method, everytime query will be compiled. Whenever, we are using execute method, query won't be compiled every time. Statement object can work only for static queries. Work for Static and Dynamic Queries Relatively, performance is low. Relatively, performance is high. Chance of SQL Injection No Chance of SQL Injection Inserting data value and large object is difficult. Insering data value and large object is easy.","title":"Difference between Statement and Prepared Statement"},{"location":"JDBC/DifferencesBetweenStatementAndPS/#difference-between-statement-and-prepared-statement","text":"Statement Prepared Statement At the time of creating Statement object, we are not required to provide any query At the time of creating Prepared Object, we have to provide SQL Query compulsary which can be send to the database and will be compiled. Statemnt st = con.createStatement(); PreparedStatement pst = con.prepareStatement(query); Hence, Statement object is not associated with any query and we can use for multiple queries. Hence, Prepared Statement is associated with any query. Whenever, we are using execute method, everytime query will be compiled. Whenever, we are using execute method, query won't be compiled every time. Statement object can work only for static queries. Work for Static and Dynamic Queries Relatively, performance is low. Relatively, performance is high. Chance of SQL Injection No Chance of SQL Injection Inserting data value and large object is difficult. Insering data value and large object is easy.","title":"Difference between Statement and Prepared Statement"},{"location":"JDBC/FEATURES/","text":"JDBC Features Standard API (Same for all DBMS) Database Management API Most of the JDBC driver are developed using Java, so they are platform independent. Huge vendor support for JDBC . Perform basic CRUD (Create, Read, Update & Delete) operation very easily.","title":"JDBC Features"},{"location":"JDBC/FEATURES/#jdbc-features","text":"Standard API (Same for all DBMS) Database Management API Most of the JDBC driver are developed using Java, so they are platform independent. Huge vendor support for JDBC . Perform basic CRUD (Create, Read, Update & Delete) operation very easily.","title":"JDBC Features"},{"location":"JDBC/JDBCDriver/","text":"JDBC Driver While communicating with database, we have to connect java calls into database specific calls and database specific calls into java cells. For this Driver software is required. As per our analogy, driver software is a translator. Progress Direct Software Company introduced Type-5 driver but is not industry standard driver. Types of JDBC Driver Type 1 Driver (JDBC-ODBC Bridge Driver) Type 2 Driver (Native API-Partly Driver or Native Driver) Type 3 Driver (All Java Net Protocol Driver or Network Protocol Driver or Middleware Driver) Type 4 Driver (Pure Java Driver or Native Protocol or Thin Driver) Type 1 Driver ODBC Supports all programming languages. Type 2 Driver Written in C, C++ Type 3 Driver Three tiers Type 4 Driver Thick vs Thin Driver See in copy. Comparision Property Type 1 Type 2 Type 3 Type 4 Conversion From JDBC Calls to ODBC Call From JDBC Calls to Native Library Call From JDBC Calls to Middleware Server Call From JDBC Calls to Database specific Call Implemented In Only Java Java and Native Langiages like C, C++ Only Java Only Java Architecture 2 Tier 2 Tier 3 Tier 2 Tier Platform Independent No No Yes Yes Database Independent Yes No Yes No Thick or Thin Thick Thick Thick Thin Also Known As JDBC-ODBC Bridge Driver Native API-Partly Driver or Native Driver All Java Net Protocol Driver or Network Protocol Driver or Middleware Driver Pure Java Driver or Native Protocol or Thin Driver","title":"JDBC Driver"},{"location":"JDBC/JDBCDriver/#jdbc-driver","text":"While communicating with database, we have to connect java calls into database specific calls and database specific calls into java cells. For this Driver software is required. As per our analogy, driver software is a translator. Progress Direct Software Company introduced Type-5 driver but is not industry standard driver.","title":"JDBC Driver"},{"location":"JDBC/JDBCDriver/#types-of-jdbc-driver","text":"Type 1 Driver (JDBC-ODBC Bridge Driver) Type 2 Driver (Native API-Partly Driver or Native Driver) Type 3 Driver (All Java Net Protocol Driver or Network Protocol Driver or Middleware Driver) Type 4 Driver (Pure Java Driver or Native Protocol or Thin Driver)","title":"Types of JDBC Driver"},{"location":"JDBC/JDBCDriver/#type-1-driver","text":"ODBC Supports all programming languages.","title":"Type 1 Driver"},{"location":"JDBC/JDBCDriver/#type-2-driver","text":"Written in C, C++","title":"Type 2 Driver"},{"location":"JDBC/JDBCDriver/#type-3-driver","text":"Three tiers","title":"Type 3 Driver"},{"location":"JDBC/JDBCDriver/#type-4-driver","text":"","title":"Type 4 Driver"},{"location":"JDBC/JDBCDriver/#thick-vs-thin-driver","text":"See in copy.","title":"Thick vs Thin Driver"},{"location":"JDBC/JDBCDriver/#comparision","text":"Property Type 1 Type 2 Type 3 Type 4 Conversion From JDBC Calls to ODBC Call From JDBC Calls to Native Library Call From JDBC Calls to Middleware Server Call From JDBC Calls to Database specific Call Implemented In Only Java Java and Native Langiages like C, C++ Only Java Only Java Architecture 2 Tier 2 Tier 3 Tier 2 Tier Platform Independent No No Yes Yes Database Independent Yes No Yes No Thick or Thin Thick Thick Thick Thin Also Known As JDBC-ODBC Bridge Driver Native API-Partly Driver or Native Driver All Java Net Protocol Driver or Network Protocol Driver or Middleware Driver Pure Java Driver or Native Protocol or Thin Driver","title":"Comparision"},{"location":"JDBC/SQLInjection/","text":"SQL Injection SQL Injection is a code injection technique that might destory your database. SQL Injection usually occurs when you ask a user for input, like their username and instead of username, the user gives you an SQL statement that you will unknowingly run on your database. SQL Injection can be prevented by using prepared statement.","title":"SQL Injection"},{"location":"JDBC/SQLInjection/#sql-injection","text":"SQL Injection is a code injection technique that might destory your database. SQL Injection usually occurs when you ask a user for input, like their username and instead of username, the user gives you an SQL statement that you will unknowingly run on your database. SQL Injection can be prevented by using prepared statement.","title":"SQL Injection"},{"location":"JDBC/StepsToDevelopJDBCApplication/","text":"Steps to Develop JDBC Application Load and Register driver class. Class.forName(\"Oracle.jdbc.OracleDriver\"); Establish Conection Connection con = Driver.Manager.getConnection( url , DbUsername , DbPassword ) ; Creation of statement Object Statement st = con.createStatement(); Send and Execute SQL Query Result rs = st.executeQuery(\"Select * from employees\"); Process Result from ResultSet while(rs.next()) { System.out.Println(rs.getInt(1)); } Close connection con.close();","title":"Steps to Develop JDBC Application"},{"location":"JDBC/StepsToDevelopJDBCApplication/#steps-to-develop-jdbc-application","text":"Load and Register driver class. Class.forName(\"Oracle.jdbc.OracleDriver\"); Establish Conection Connection con = Driver.Manager.getConnection( url , DbUsername , DbPassword ) ; Creation of statement Object Statement st = con.createStatement(); Send and Execute SQL Query Result rs = st.executeQuery(\"Select * from employees\"); Process Result from ResultSet while(rs.next()) { System.out.Println(rs.getInt(1)); } Close connection con.close();","title":"Steps to Develop JDBC Application"},{"location":"JDBC/TypesOfSQLCommands/","text":"Types of SQL Commands DDL (Data Definition Language) CREATE TABLE, ALTER, DROP DQL (Data Query Language) SELECT DCL (Data Control Language) ALTER, PASSWORD, GRANT ACCESS DML (Data Manipulation Language) INSERT, DELETE, UPDATE (Data Administration) START AUDIT (Data Transaction) COMMIT, ROLLBACK, SAVEPOINT What should I know as Java Developer ? Select Queries( DQL ) Returns Result Set Non-Select Queries( DML ) Returns Numeric Value Methods to Execute SQL Query executeQuery() To execute SELECT queries. public result executeQuery(String sqlQuery) throws SQLException Eg: Result rs = st.executeQuery(\"SELECT * FROM employess\"); while(rs.next()){ System.out.println(\" ID : \" rs.getInt(1)); } executeUpdate() Applicable for non-select operation(DML) public int executeUpdate(String sqlQuery) throws SQLException Eg: int affectedRow = st.executeUpdate(\"INSERT INTO employees(`id`) VALUES ('1')\"); Returns the afftected rows. execute() For both SELECT and NON- SELECT operations. If you don't know SQL query until run-time, we can use execute(). Return type => boolean -> True - SELECT Query -> false - Non- SELECT Query public boolean execute (String query) throws SQLException Eg: boolean b = st.execute(Dynamically provide SQLQuery); if(b == true) { ResultSet rs = st.getResultSet(); } else { int rowCount = st.getUpdateCount(); }","title":"Types of SQL Commands"},{"location":"JDBC/TypesOfSQLCommands/#types-of-sql-commands","text":"DDL (Data Definition Language) CREATE TABLE, ALTER, DROP DQL (Data Query Language) SELECT DCL (Data Control Language) ALTER, PASSWORD, GRANT ACCESS DML (Data Manipulation Language) INSERT, DELETE, UPDATE (Data Administration) START AUDIT (Data Transaction) COMMIT, ROLLBACK, SAVEPOINT","title":"Types of SQL Commands"},{"location":"JDBC/TypesOfSQLCommands/#what-should-i-know-as-java-developer","text":"","title":"What should I know as Java Developer ?"},{"location":"JDBC/TypesOfSQLCommands/#select-queriesdql","text":"Returns Result Set","title":"Select Queries(DQL)"},{"location":"JDBC/TypesOfSQLCommands/#non-select-queriesdml","text":"Returns Numeric Value","title":"Non-Select Queries(DML)"},{"location":"JDBC/TypesOfSQLCommands/#methods-to-execute-sql-query","text":"executeQuery() To execute SELECT queries. public result executeQuery(String sqlQuery) throws SQLException Eg: Result rs = st.executeQuery(\"SELECT * FROM employess\"); while(rs.next()){ System.out.println(\" ID : \" rs.getInt(1)); } executeUpdate() Applicable for non-select operation(DML) public int executeUpdate(String sqlQuery) throws SQLException Eg: int affectedRow = st.executeUpdate(\"INSERT INTO employees(`id`) VALUES ('1')\"); Returns the afftected rows. execute() For both SELECT and NON- SELECT operations. If you don't know SQL query until run-time, we can use execute(). Return type => boolean -> True - SELECT Query -> false - Non- SELECT Query public boolean execute (String query) throws SQLException Eg: boolean b = st.execute(Dynamically provide SQLQuery); if(b == true) { ResultSet rs = st.getResultSet(); } else { int rowCount = st.getUpdateCount(); }","title":"Methods to Execute SQL Query"},{"location":"applet/","text":"Applet Programming An applet is a Java program that runs in a web browser. An applet is a Java class that extends the java.applet.Applet . No main() method Applet was designed to be embedded with a HTML page. JVM is required to view an applet. Applet have strict security rules that are enforced by the web browser. Two types of Applet Based on Applet class These Applets use the Abstract Window Toolkit ( AWT ) to provide the graphical user interface (GUI). The style of applet has been available since Java was first created. Based on JApplet class They are based on the Swing class JApplet which inherits Applet. Swing applet use the swing classes to provide the GUI. Life Cycle of Applet Applet Initialization and Termination When an applet begins ,the following methods are called in this sequence : init() start() paint() Whenever an applet is terminated, the following sequence of methods calls takes place. stop() destroy() Description : init() The init( ) method is the first method to be called. This is where you should initialize variables. This method is called only once during the run time of your applet. start() The start( ) method is called after init( ) . It is also called to restart an applet after it has been stopped. Whereas init( ) is called once\u2014the first time an applet is loaded\u2014 start( ) is called each time an applet\u2019s HTML document is displayed onscreen. So, if a user leaves a web page and comes back, the applet resumes execution at start( ) . paint() The paint( ) method is called each time an AWT-based applet\u2019s output must be redrawn. This situation can occur for several reasons. Whatever the applet must redraw its output, paint( ) method is called. The paint( ) method has one parameter of type Graphics. stop() The stop( ) method is called when a web browser leaves the HTML document containing the applet\u2014when it goes to another page, for example. When stop( ) is called, the applet is probably running. You should use stop( ) to suspend threads that don\u2019t need to run when the applet is not visible. You can restart them when start( ) is called if the user returns to the page. destroy() The destroy( ) method is called when the environment determines that your applet needs to be removed completely from memory. At this point, you should free up any resources the applet may be using. The stop( ) method is always called before destroy( ) . The HTML APPLET Tag Syntax : <applet [codebase = codebaseURL] code = appletFile [alt = alternateText] [name = appletInstanceName] width = pixels height = pixels [align = alignment] [vspace = pixels] [hspace = pixels] > [< PARAM NAME = attributeName VALUE = AttributeValue>] >> Important for Exam \ud83d\udcaf [HTML Displayed in the absence of Java] </applet> Note : [ ] \u23e9 Optional CODEBASE It is an optional attribute that specifies the base URL of the applet code, which is the directory that will be searched for the applets executable class file. The HTML Document URL Directory is used as the CODEBASE if this attribute is not specified. CODE Code is the required attribute that gives the name of file containing compiled .class file. This file is related to the code base URL of the applet. ALT The ALT tag is an alternate tag used to specify a short text message that should be displayed if the browser recognized the applet tag but can't currently run JAVA applet. NAME NAME is an optional attribute used to specify a name for the applet instance. NAME attribute is used in order to communicate between applets on the same page. WIDTH and HEIGHT WIDTH and HEIGHT are the required attributes that gives the size of the applet display area. ALIGN ALIGN is an optional attribute that specifies the alignment of the applet. The possible values are LEFT, RIGHT, TOP, BOTTOM, MIDDLE, BASELINE, TEXTTOP, ABSMIDDLE (Absolute Middle) and ABSBOTTOM (Absolute Bottom). VSPACE and HSPACE These attributes are optional. VSPACE specifies the space in pixel and below the applet. HSPACE specifies the space in pixel on each sides of the applet. PARAM NAME and VALUE PARAMNAME is a tag used to specify applet specific arguments. Applets access their attributes with the getParameter( ) Life Cycle of Applet import java.applet.* ; import java.awt.* ; /* <applet code = \"LifeCycle.class\" height = \"300\" width = \"300\"> </applet> */ public class LifeCycle extends Applet { String message = \"\" ; public void init ( Graphics graphicsObject ){ message += \"Inside Init() \" ; graphicsObject . drawString ( message , 100 , 120 ); } public void start () { message += \"Inside Start() \" ; } public void paint ( Graphics graphicsObject ) { message += \"Inside Paint() \" ; graphicsObject . drawString ( message , 100 , 120 ); } public void stop () { message += \"Inside Stop() \" ; } public void destroy () { message += \"Inside Destroy() \" ; } }","title":"Introduction"},{"location":"applet/#applet-programming","text":"An applet is a Java program that runs in a web browser. An applet is a Java class that extends the java.applet.Applet . No main() method Applet was designed to be embedded with a HTML page. JVM is required to view an applet. Applet have strict security rules that are enforced by the web browser.","title":"Applet Programming"},{"location":"applet/#two-types-of-applet","text":"Based on Applet class These Applets use the Abstract Window Toolkit ( AWT ) to provide the graphical user interface (GUI). The style of applet has been available since Java was first created. Based on JApplet class They are based on the Swing class JApplet which inherits Applet. Swing applet use the swing classes to provide the GUI.","title":"Two types of Applet"},{"location":"applet/#life-cycle-of-applet","text":"","title":"Life Cycle of Applet"},{"location":"applet/#applet-initialization-and-termination","text":"When an applet begins ,the following methods are called in this sequence : init() start() paint() Whenever an applet is terminated, the following sequence of methods calls takes place. stop() destroy()","title":"Applet Initialization and Termination"},{"location":"applet/#description","text":"init() The init( ) method is the first method to be called. This is where you should initialize variables. This method is called only once during the run time of your applet. start() The start( ) method is called after init( ) . It is also called to restart an applet after it has been stopped. Whereas init( ) is called once\u2014the first time an applet is loaded\u2014 start( ) is called each time an applet\u2019s HTML document is displayed onscreen. So, if a user leaves a web page and comes back, the applet resumes execution at start( ) . paint() The paint( ) method is called each time an AWT-based applet\u2019s output must be redrawn. This situation can occur for several reasons. Whatever the applet must redraw its output, paint( ) method is called. The paint( ) method has one parameter of type Graphics. stop() The stop( ) method is called when a web browser leaves the HTML document containing the applet\u2014when it goes to another page, for example. When stop( ) is called, the applet is probably running. You should use stop( ) to suspend threads that don\u2019t need to run when the applet is not visible. You can restart them when start( ) is called if the user returns to the page. destroy() The destroy( ) method is called when the environment determines that your applet needs to be removed completely from memory. At this point, you should free up any resources the applet may be using. The stop( ) method is always called before destroy( ) .","title":"Description :"},{"location":"applet/#the-html-applet-tag","text":"Syntax : <applet [codebase = codebaseURL] code = appletFile [alt = alternateText] [name = appletInstanceName] width = pixels height = pixels [align = alignment] [vspace = pixels] [hspace = pixels] > [< PARAM NAME = attributeName VALUE = AttributeValue>] >> Important for Exam \ud83d\udcaf [HTML Displayed in the absence of Java] </applet> Note : [ ] \u23e9 Optional","title":"The HTML APPLET Tag"},{"location":"applet/#codebase","text":"It is an optional attribute that specifies the base URL of the applet code, which is the directory that will be searched for the applets executable class file. The HTML Document URL Directory is used as the CODEBASE if this attribute is not specified.","title":"CODEBASE"},{"location":"applet/#code","text":"Code is the required attribute that gives the name of file containing compiled .class file. This file is related to the code base URL of the applet.","title":"CODE"},{"location":"applet/#alt","text":"The ALT tag is an alternate tag used to specify a short text message that should be displayed if the browser recognized the applet tag but can't currently run JAVA applet.","title":"ALT"},{"location":"applet/#name","text":"NAME is an optional attribute used to specify a name for the applet instance. NAME attribute is used in order to communicate between applets on the same page.","title":"NAME"},{"location":"applet/#width-and-height","text":"WIDTH and HEIGHT are the required attributes that gives the size of the applet display area.","title":"WIDTH and HEIGHT"},{"location":"applet/#align","text":"ALIGN is an optional attribute that specifies the alignment of the applet. The possible values are LEFT, RIGHT, TOP, BOTTOM, MIDDLE, BASELINE, TEXTTOP, ABSMIDDLE (Absolute Middle) and ABSBOTTOM (Absolute Bottom).","title":"ALIGN"},{"location":"applet/#vspace-and-hspace","text":"These attributes are optional. VSPACE specifies the space in pixel and below the applet. HSPACE specifies the space in pixel on each sides of the applet.","title":"VSPACE and HSPACE"},{"location":"applet/#param-name-and-value","text":"PARAMNAME is a tag used to specify applet specific arguments. Applets access their attributes with the getParameter( )","title":"PARAM NAME and VALUE"},{"location":"applet/#life-cycle-of-applet_1","text":"import java.applet.* ; import java.awt.* ; /* <applet code = \"LifeCycle.class\" height = \"300\" width = \"300\"> </applet> */ public class LifeCycle extends Applet { String message = \"\" ; public void init ( Graphics graphicsObject ){ message += \"Inside Init() \" ; graphicsObject . drawString ( message , 100 , 120 ); } public void start () { message += \"Inside Start() \" ; } public void paint ( Graphics graphicsObject ) { message += \"Inside Paint() \" ; graphicsObject . drawString ( message , 100 , 120 ); } public void stop () { message += \"Inside Stop() \" ; } public void destroy () { message += \"Inside Destroy() \" ; } }","title":"Life Cycle of Applet"},{"location":"applet/EXAMPLES/","text":"Passing Parameter Demonstrate the passing of parameters in Applet File. HTML File < html > < head > < title > Passing Parameter to Applet </ title > </ head > < body > < applet code = \"ParamDemo.java\" height = \"300\" width = \"300\" > < param name = \"fontName\" value = \"Comic Sans MS\" > < param name = \"fontSize\" value = \"40\" > < param name = \"leadingfontName\" value = \"14.80\" > < param name = \"active\" value = \"true\" > </ applet > </ body > </ html > Java File import java.applet.* ; import java.awt.* ; // Following HTML chunk will pass parameter to Applet. This is comment for Java Compiler but not for appletviewer, so altering the attribute of parameter never compell to recompile again. /*/ <applet code = \"ParamDemo\" height = \"500\" width = \"500\"> <param name = \"fontName\" value = \"Comic Sans MS\"> <param name = \"fontSize\" value = \"40\"> <param name = \"leading\" value = \"14.80\"> <param name = \"active\" value = \"true\"> </applet> */ public class ParamDemo extends Applet { String fontName ; String param ; int fontSize ; float leading ; boolean active ; public void init () { // Param is not used here because to get the String value and again to pass to String, no temp variable (param) is needed. fontName = getParameter ( \"fontName\" ); if ( fontName == null ) { fontName = \"Not Specified\" ; } // Param is used as temporary String variable which retrieves the parameter passed. param = getParameter ( \"fontSize\" ); try { if ( param != null ) { fontSize = Integer . parseInt ( param ); // Converts the number in String to Integer data type. } else { fontSize = 0 ; } } catch ( NumberFormatException exc ) { fontSize = 0 ; } param = getParameter ( \"leading\" ); try { if ( param != null ) { leading = Float . valueOf ( param ). floatValue (); // Converts the number in String to Float data type. } else { leading = 0f ; } } catch ( NumberFormatException exc ) { leading = 0f ; } param = getParameter ( \"active\" ); if ( param != null ) { active = Boolean . valueOf ( param ). booleanValue (); // Converts the boolean value in String to Boolean data type. } } public void paint ( Graphics graphicsObject ) { graphicsObject . drawString ( \"Font Name : \" + fontName , 100 , 50 ); graphicsObject . drawString ( \"Font Size : \" + fontName , 100 , 60 ); graphicsObject . drawString ( \"Leading : \" + leading , 100 , 70 ); graphicsObject . drawString ( \"Active : \" + active , 100 , 80 ); } } Display Available Fonts Display the available fonts in the system. /* This shows the available fonts in Host Computer. */ /* <applet code = \"AvailableFonts\" height =\"300\" width = \"300\" ></applet> */ import java.awt.* ; import java.applet.* ; public class AvailableFonts extends Applet { public void paint ( Graphics g ) { String message = \"\" ; // Initialize string to empty first. String fontLists [] ; /* I don't get the below line. */ GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment (); fontLists = ge . getAvailableFontFamilyNames (); for ( String fontList : fontLists ) { message += fontList + \"\\n \" ; g . drawString ( message , 10 , 20 ); } } } Custom Font and Size Demonstrating applet with custom font text and size. import java.awt.* ; import java.applet.* ; // This HTML chunk is for passing parameter to appletviewer. /* <applet code = \"Introduction\" height = \"200\" width = \"500\"> <param name = \"fontName\" value = \"Tahoma\"> <param name = \"fontSize\" value = \"16\"> <param name = \"title\" value = \"Introduction\"> <param name = \"message\" value = \" >> I read in Gandaki College of Information and Science.\"> </applet> */ public class CustomFont extends Applet { String param ; String fontName ; String title ; String message ; int fontSize ; // We are defining our custom font. So, font object is created. Font myFont ; public void init () { fontName = getParameter ( \"fontName\" ); if ( fontName == null ) { fontName = \"TimesRoman\" ; } title = getParameter ( \"title\" ); if ( title == null ) { title = \"Untitled\" ; } message = getParameter ( \"message\" ); if ( message == null ) { message = \"Write your description here.\" ; } param = getParameter ( \"fontSize\" ); try { if ( param != null ) { fontSize = Integer . parseInt ( param ); } else { fontSize = 10 ; // parameter pass garyo tara integer parse vayena vane } } catch ( NumberFormatException exc ) { fontSize = 15 ; // Parameter nai pass garena vane chahi yo run huncha } } public void paint ( Graphics g ) { // Font object Syntax : Font(font_name, Font.font_type, font_size); myFont = new Font ( fontName , Font . BOLD , fontSize ); g . setFont ( myFont ); // Setting the defined font for this object. setBackground ( Color . red ); // Setting background color. setForeground ( Color . white ); // Setting foreground color. g . drawString ( title , 20 , 50 ); myFont = new Font ( fontName , Font . PLAIN , fontSize ); // Defining new font-style for displaying message. g . setFont ( myFont ); // Setting the new font. g . drawString ( message , 20 , 80 ); } } Draw Nepali Flag Draw the Nepali Flag using the Applet and graphics. import java.applet.* ; import java.awt.* ; /* <applet code = \"Flag\" width = \"500\" height = \"500\"></applet> */ public class Flag extends Applet { static Color NEPALIFLAG = new Color ( 221 , 12 , 39 ); // Defines custom color public void paint ( Graphics flag ) { // Figure starts from (210,10) // For upper traingle int upperTriangleX [] = { 210 , 360 , 210 }; // +150 for upper triangle int upperTriangleY [] = { 10 , 160 , 160 }; // g.drawPolygon(upperTriangleX,upperTriangleY,3); // Also can be drawn like // this. Polygon upperTriangle = new Polygon ( upperTriangleX , upperTriangleY , 3 ); flag . drawPolygon ( upperTriangle ); flag . setColor ( NEPALIFLAG ); // Setting color of our brave Gorkha Soldiers Blood flag . fillPolygon ( upperTriangle ); // For lower traingle int lowerTriangleX [] = { 210 , 390 , 210 }; // +180 for lower triangle int lowerTriangleY [] = { 160 , 340 , 340 }; Polygon lowerTriangle = new Polygon ( lowerTriangleX , lowerTriangleY , 3 ); flag . drawPolygon ( lowerTriangle ); flag . setColor ( NEPALIFLAG ); flag . fillPolygon ( lowerTriangle ); // For standing rod int rodX [] = { 207 , 210 , 210 , 207 }; int rodY [] = { 7 , 7 , 500 , 498 }; Polygon rod = new Polygon ( rodX , rodY , 4 ); flag . drawPolygon ( rod ); flag . setColor ( Color . black ); flag . fillPolygon ( rod ); // For borders int borderX [] = { 210 , 210 , 360 , 210 , 390 , 210 , 210 , 396 , 216 , 366 }; // 3 units int borderY [] = { 7 , 10 , 160 , 160 , 340 , 340 , 343 , 343 , 163 , 163 }; Polygon border = new Polygon ( borderX , borderY , 10 ); flag . drawPolygon ( border ); flag . setColor ( Color . blue ); flag . fillPolygon ( border ); // For moon // One Oval overlaps other Oval to form a Crescent moon; I was unable to learn // drawArc() at this moment. flag . setColor ( Color . white ); flag . fillOval ( 240 , 100 , 30 , 30 ); // Synatx : fillOval(int xPosition, int yPosition, width, height) flag . setColor ( NEPALIFLAG ); flag . fillOval ( 240 , 91 , 30 , 30 ); // For star int starX [] = { 240 , 250 , 255 , 260 , 270 , 265 , 270 , 260 , 255 , 250 , 240 , 245 }; int starY [] = { 260 , 260 , 250 , 260 , 260 , 270 , 280 , 280 , 290 , 280 , 280 , 270 }; // Starting is 240 Polygon star = new Polygon ( starX , starY , 12 ); flag . drawPolygon ( star ); flag . setColor ( Color . white ); flag . fillPolygon ( star ); } }","title":"General"},{"location":"applet/EXAMPLES/#passing-parameter","text":"Demonstrate the passing of parameters in Applet File.","title":"Passing Parameter"},{"location":"applet/EXAMPLES/#html-file","text":"< html > < head > < title > Passing Parameter to Applet </ title > </ head > < body > < applet code = \"ParamDemo.java\" height = \"300\" width = \"300\" > < param name = \"fontName\" value = \"Comic Sans MS\" > < param name = \"fontSize\" value = \"40\" > < param name = \"leadingfontName\" value = \"14.80\" > < param name = \"active\" value = \"true\" > </ applet > </ body > </ html >","title":"HTML File"},{"location":"applet/EXAMPLES/#java-file","text":"import java.applet.* ; import java.awt.* ; // Following HTML chunk will pass parameter to Applet. This is comment for Java Compiler but not for appletviewer, so altering the attribute of parameter never compell to recompile again. /*/ <applet code = \"ParamDemo\" height = \"500\" width = \"500\"> <param name = \"fontName\" value = \"Comic Sans MS\"> <param name = \"fontSize\" value = \"40\"> <param name = \"leading\" value = \"14.80\"> <param name = \"active\" value = \"true\"> </applet> */ public class ParamDemo extends Applet { String fontName ; String param ; int fontSize ; float leading ; boolean active ; public void init () { // Param is not used here because to get the String value and again to pass to String, no temp variable (param) is needed. fontName = getParameter ( \"fontName\" ); if ( fontName == null ) { fontName = \"Not Specified\" ; } // Param is used as temporary String variable which retrieves the parameter passed. param = getParameter ( \"fontSize\" ); try { if ( param != null ) { fontSize = Integer . parseInt ( param ); // Converts the number in String to Integer data type. } else { fontSize = 0 ; } } catch ( NumberFormatException exc ) { fontSize = 0 ; } param = getParameter ( \"leading\" ); try { if ( param != null ) { leading = Float . valueOf ( param ). floatValue (); // Converts the number in String to Float data type. } else { leading = 0f ; } } catch ( NumberFormatException exc ) { leading = 0f ; } param = getParameter ( \"active\" ); if ( param != null ) { active = Boolean . valueOf ( param ). booleanValue (); // Converts the boolean value in String to Boolean data type. } } public void paint ( Graphics graphicsObject ) { graphicsObject . drawString ( \"Font Name : \" + fontName , 100 , 50 ); graphicsObject . drawString ( \"Font Size : \" + fontName , 100 , 60 ); graphicsObject . drawString ( \"Leading : \" + leading , 100 , 70 ); graphicsObject . drawString ( \"Active : \" + active , 100 , 80 ); } }","title":"Java File"},{"location":"applet/EXAMPLES/#display-available-fonts","text":"Display the available fonts in the system. /* This shows the available fonts in Host Computer. */ /* <applet code = \"AvailableFonts\" height =\"300\" width = \"300\" ></applet> */ import java.awt.* ; import java.applet.* ; public class AvailableFonts extends Applet { public void paint ( Graphics g ) { String message = \"\" ; // Initialize string to empty first. String fontLists [] ; /* I don't get the below line. */ GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment (); fontLists = ge . getAvailableFontFamilyNames (); for ( String fontList : fontLists ) { message += fontList + \"\\n \" ; g . drawString ( message , 10 , 20 ); } } }","title":"Display Available Fonts"},{"location":"applet/EXAMPLES/#custom-font-and-size","text":"Demonstrating applet with custom font text and size. import java.awt.* ; import java.applet.* ; // This HTML chunk is for passing parameter to appletviewer. /* <applet code = \"Introduction\" height = \"200\" width = \"500\"> <param name = \"fontName\" value = \"Tahoma\"> <param name = \"fontSize\" value = \"16\"> <param name = \"title\" value = \"Introduction\"> <param name = \"message\" value = \" >> I read in Gandaki College of Information and Science.\"> </applet> */ public class CustomFont extends Applet { String param ; String fontName ; String title ; String message ; int fontSize ; // We are defining our custom font. So, font object is created. Font myFont ; public void init () { fontName = getParameter ( \"fontName\" ); if ( fontName == null ) { fontName = \"TimesRoman\" ; } title = getParameter ( \"title\" ); if ( title == null ) { title = \"Untitled\" ; } message = getParameter ( \"message\" ); if ( message == null ) { message = \"Write your description here.\" ; } param = getParameter ( \"fontSize\" ); try { if ( param != null ) { fontSize = Integer . parseInt ( param ); } else { fontSize = 10 ; // parameter pass garyo tara integer parse vayena vane } } catch ( NumberFormatException exc ) { fontSize = 15 ; // Parameter nai pass garena vane chahi yo run huncha } } public void paint ( Graphics g ) { // Font object Syntax : Font(font_name, Font.font_type, font_size); myFont = new Font ( fontName , Font . BOLD , fontSize ); g . setFont ( myFont ); // Setting the defined font for this object. setBackground ( Color . red ); // Setting background color. setForeground ( Color . white ); // Setting foreground color. g . drawString ( title , 20 , 50 ); myFont = new Font ( fontName , Font . PLAIN , fontSize ); // Defining new font-style for displaying message. g . setFont ( myFont ); // Setting the new font. g . drawString ( message , 20 , 80 ); } }","title":"Custom Font and Size"},{"location":"applet/EXAMPLES/#draw-nepali-flag","text":"Draw the Nepali Flag using the Applet and graphics. import java.applet.* ; import java.awt.* ; /* <applet code = \"Flag\" width = \"500\" height = \"500\"></applet> */ public class Flag extends Applet { static Color NEPALIFLAG = new Color ( 221 , 12 , 39 ); // Defines custom color public void paint ( Graphics flag ) { // Figure starts from (210,10) // For upper traingle int upperTriangleX [] = { 210 , 360 , 210 }; // +150 for upper triangle int upperTriangleY [] = { 10 , 160 , 160 }; // g.drawPolygon(upperTriangleX,upperTriangleY,3); // Also can be drawn like // this. Polygon upperTriangle = new Polygon ( upperTriangleX , upperTriangleY , 3 ); flag . drawPolygon ( upperTriangle ); flag . setColor ( NEPALIFLAG ); // Setting color of our brave Gorkha Soldiers Blood flag . fillPolygon ( upperTriangle ); // For lower traingle int lowerTriangleX [] = { 210 , 390 , 210 }; // +180 for lower triangle int lowerTriangleY [] = { 160 , 340 , 340 }; Polygon lowerTriangle = new Polygon ( lowerTriangleX , lowerTriangleY , 3 ); flag . drawPolygon ( lowerTriangle ); flag . setColor ( NEPALIFLAG ); flag . fillPolygon ( lowerTriangle ); // For standing rod int rodX [] = { 207 , 210 , 210 , 207 }; int rodY [] = { 7 , 7 , 500 , 498 }; Polygon rod = new Polygon ( rodX , rodY , 4 ); flag . drawPolygon ( rod ); flag . setColor ( Color . black ); flag . fillPolygon ( rod ); // For borders int borderX [] = { 210 , 210 , 360 , 210 , 390 , 210 , 210 , 396 , 216 , 366 }; // 3 units int borderY [] = { 7 , 10 , 160 , 160 , 340 , 340 , 343 , 343 , 163 , 163 }; Polygon border = new Polygon ( borderX , borderY , 10 ); flag . drawPolygon ( border ); flag . setColor ( Color . blue ); flag . fillPolygon ( border ); // For moon // One Oval overlaps other Oval to form a Crescent moon; I was unable to learn // drawArc() at this moment. flag . setColor ( Color . white ); flag . fillOval ( 240 , 100 , 30 , 30 ); // Synatx : fillOval(int xPosition, int yPosition, width, height) flag . setColor ( NEPALIFLAG ); flag . fillOval ( 240 , 91 , 30 , 30 ); // For star int starX [] = { 240 , 250 , 255 , 260 , 270 , 265 , 270 , 260 , 255 , 250 , 240 , 245 }; int starY [] = { 260 , 260 , 250 , 260 , 260 , 270 , 280 , 280 , 290 , 280 , 280 , 270 }; // Starting is 240 Polygon star = new Polygon ( starX , starY , 12 ); flag . drawPolygon ( star ); flag . setColor ( Color . white ); flag . fillPolygon ( star ); } }","title":"Draw Nepali Flag"},{"location":"applet/TUTORIAL/","text":"How to run an Applet? There are two ways to run an applet : By HTML file. By appletViewer tool (for testing purpose). Simple example of Applet by HTML file: To execute the applet by HTML file, create an applet and compile it. After that create an html file and place the applet code in HTML file. Now click the HTML file. //HelloApplet.java import java.applet.Applet; import java.awt.Graphics; public class HelloApplet extends Applet{ public void paint(Graphics g){ g.drawString(\"welcome\",150,150); } } Note: Class must be public because its object is created by Java Plugin software that resides on the browser. HelloApplet.html <html> <title>Applet's Demonstration</title> <body> <applet code=\"HelloApplet.class\" width=\"300\" height=\"300\"> </applet> </body> </html> Simple example of Applet by appletviewer tool: To execute the applet by appletviewer tool, create an applet that contains applet tag in comment and compile it. After that run it by: appletviewer HelloApplet.java. Now HTML file is not required but it is for testing purpose only. //HelloApplet.java import java.applet.Applet; import java.awt.Graphics; public class HelloApplet extends Applet{ public void paint(Graphics g){ g.drawString(\"welcome to applet\",150,150); } } To execute the applet by appletviewer tool, write in command prompt: c:\\>javac HelloApplet.java c:\\>appletviewer HelloApplet.java","title":"Walk Through"},{"location":"applet/TUTORIAL/#how-to-run-an-applet","text":"There are two ways to run an applet : By HTML file. By appletViewer tool (for testing purpose).","title":"How to run an Applet?"},{"location":"applet/TUTORIAL/#simple-example-of-applet-by-html-file","text":"To execute the applet by HTML file, create an applet and compile it. After that create an html file and place the applet code in HTML file. Now click the HTML file. //HelloApplet.java import java.applet.Applet; import java.awt.Graphics; public class HelloApplet extends Applet{ public void paint(Graphics g){ g.drawString(\"welcome\",150,150); } } Note: Class must be public because its object is created by Java Plugin software that resides on the browser. HelloApplet.html <html> <title>Applet's Demonstration</title> <body> <applet code=\"HelloApplet.class\" width=\"300\" height=\"300\"> </applet> </body> </html>","title":"Simple example of Applet by HTML file:"},{"location":"applet/TUTORIAL/#simple-example-of-applet-by-appletviewer-tool","text":"To execute the applet by appletviewer tool, create an applet that contains applet tag in comment and compile it. After that run it by: appletviewer HelloApplet.java. Now HTML file is not required but it is for testing purpose only. //HelloApplet.java import java.applet.Applet; import java.awt.Graphics; public class HelloApplet extends Applet{ public void paint(Graphics g){ g.drawString(\"welcome to applet\",150,150); } } To execute the applet by appletviewer tool, write in command prompt: c:\\>javac HelloApplet.java c:\\>appletviewer HelloApplet.java","title":"Simple example of Applet by appletviewer tool:"},{"location":"applet/displayingImage/","text":"Displying Image in Applet Java will allow the applet to load the data holding the HTML file that started the applet (theDocumentBase) and the directory from which class file was loaded (codeBase). Both documentBase and codeBase return directories as URL object respectively. Code We've assumed there is an image named blue.jpg . import java.awt.* ; import java.applet.* ; /* <applet code = \"DisplayImage\" height = \"400\" width = \"400\"></applet> */ public class DisplayImage extends Applet { public Image picture ; public void init () { picture = getImage ( getDocumentBase (), \"blue.jpg\" ); } public void paint ( Graphics g ){ g . drawImage ( picture , 30 , 30 , this ); } }","title":"Display Image"},{"location":"applet/displayingImage/#displying-image-in-applet","text":"Java will allow the applet to load the data holding the HTML file that started the applet (theDocumentBase) and the directory from which class file was loaded (codeBase). Both documentBase and codeBase return directories as URL object respectively.","title":"Displying Image in Applet"},{"location":"applet/displayingImage/#code","text":"We've assumed there is an image named blue.jpg . import java.awt.* ; import java.applet.* ; /* <applet code = \"DisplayImage\" height = \"400\" width = \"400\"></applet> */ public class DisplayImage extends Applet { public Image picture ; public void init () { picture = getImage ( getDocumentBase (), \"blue.jpg\" ); } public void paint ( Graphics g ){ g . drawImage ( picture , 30 , 30 , this ); } }","title":"Code"},{"location":"applet/playingAudio/","text":"Playing Audio in Applet An applet can play an audio file represented by the AudioClip interface in the java.applet package. The AudioClip interface has three methods, including : public void play() \u2212 Plays the audio clip one time, from the beginning. public void loop() \u2212 Causes the audio clip to replay continually. public void stop() \u2212 Stops playing the audio clip. To obtain an AudioClip object, you must invoke the getAudioClip() method of the Applet class. The getAudioClip() method returns immediately, whether or not the URL resolves to an actual audio file. The audio file is not downloaded until an attempt is made to play the audio clip. Code We've assumed there is an audio clip named sample.wav . import java.awt.* ; import java.net.* ; // For URL objects import java.applet.* ; /* <applet code = \"PlayAudio\" height = \"400\" width = \"400\"> <param name = \"audioURL\" value = \"sample.wav\"> </applet> */ // AppletContext is an environment (interface) which helps to communicate with outer-environment and deal with media files such as audio, image. public class PlayAudio extends Applet { public AudioClip myMusic ; // Defining a variable of data type AudioClip. public AppletContext context ; public void init () { context = this . getAppletContext (); String audioURL = this . getParameter ( \"audioURL\" ); // This gets the parameter passed from applet. if ( audioURL == null ) { audioURL = \"sample.wav\" ; // If no parameter is passed. } try { URL myURL = new URL ( this . getDocumentBase (), audioURL ); // New URL object storing audio URL passed by user. myMusic = context . getAudioClip ( myURL ); // myMusic = this.getAudioClip(myURL); // Also can be done like this. } catch ( MalformedURLException exc ) { exc . printStackTrace (); context . showStatus ( \"Couldn't load audio file.\" ); // Showing status to the Browser status bar. } } public void start () { // When Applet starts if ( myMusic != null ) { myMusic . loop (); } } public void stop () { // When Applet stop if ( myMusic != null ) { myMusic . stop (); } } }","title":"Play Audio"},{"location":"applet/playingAudio/#playing-audio-in-applet","text":"An applet can play an audio file represented by the AudioClip interface in the java.applet package. The AudioClip interface has three methods, including : public void play() \u2212 Plays the audio clip one time, from the beginning. public void loop() \u2212 Causes the audio clip to replay continually. public void stop() \u2212 Stops playing the audio clip. To obtain an AudioClip object, you must invoke the getAudioClip() method of the Applet class. The getAudioClip() method returns immediately, whether or not the URL resolves to an actual audio file. The audio file is not downloaded until an attempt is made to play the audio clip.","title":"Playing Audio in Applet"},{"location":"applet/playingAudio/#code","text":"We've assumed there is an audio clip named sample.wav . import java.awt.* ; import java.net.* ; // For URL objects import java.applet.* ; /* <applet code = \"PlayAudio\" height = \"400\" width = \"400\"> <param name = \"audioURL\" value = \"sample.wav\"> </applet> */ // AppletContext is an environment (interface) which helps to communicate with outer-environment and deal with media files such as audio, image. public class PlayAudio extends Applet { public AudioClip myMusic ; // Defining a variable of data type AudioClip. public AppletContext context ; public void init () { context = this . getAppletContext (); String audioURL = this . getParameter ( \"audioURL\" ); // This gets the parameter passed from applet. if ( audioURL == null ) { audioURL = \"sample.wav\" ; // If no parameter is passed. } try { URL myURL = new URL ( this . getDocumentBase (), audioURL ); // New URL object storing audio URL passed by user. myMusic = context . getAudioClip ( myURL ); // myMusic = this.getAudioClip(myURL); // Also can be done like this. } catch ( MalformedURLException exc ) { exc . printStackTrace (); context . showStatus ( \"Couldn't load audio file.\" ); // Showing status to the Browser status bar. } } public void start () { // When Applet starts if ( myMusic != null ) { myMusic . loop (); } } public void stop () { // When Applet stop if ( myMusic != null ) { myMusic . stop (); } } }","title":"Code"},{"location":"array/","text":"Array Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type. Array is indexed collection of fixed number of homogeneous data element. Advantages We can represent huge number of value using single variable. So, that readability of code will be improved. Multiple data items of same data type can be accessed using single name. Arrays can be used to implement matrices. Data structure like queue , linked list can be accessed using arrays. Downpoints Fixed in size Since array is of fixed size, if we allocate more memory than requirement then the memory space will be wasted. And if we allocate less memory than requirement, then it will create problem. The elements of array are stored in consecutive memory locations. So insertions and deletions are very difficult and time consuming. Can only hold similar type of data. To overcome this, we use collection framework. Declaration int [] x ; int [] x ; int x [] ; One Dimensional Array int [ 6 ] x ; \u274c // We cannot define size in declaration. So, we must specify in creation. String [] args ; \u2705 Best way String [] args ; String args [] ; Two Dimensional Array int [][] x ; int [][] x ; int [] [] x ; int [] x [] ; int [][] x ; int [] x [] ; Instantiation int [] x = new int [ 1000 ] ; // fixed in size. Initilization int a [] = new int [ 5 ] ; //declaration and instantiation a [ 0 ] = 10 ; a [ 1 ] = 20 ; a [ 2 ] = 70 ; a [ 3 ] = 40 ; a [ 4 ] = 50 ; Note Every Object in Java is object only. For every array type, corresponding class are available but not available in programming level. System . out . println ( a . getClass (). getName ()); Array Type Corresponding Class Name int[ ] [ I int[ ][ ] [ [ I double[ ] [ D short[ ] [ S byte[ ] [ B boolean[ ] [ Z char[ ] [ C long[ ] [ J Examples int [] a , b ; -> 1D Array int [] a [] , b [] ; -> 2D Array int [] [] a , b [] ; -> 2D , 3D Array int [] a [] b ; -> 2D Array int [] [] a , b ; -> 2D Array int [][] a , [] b ; \u274c // [ ] can be shared with all, if it comes before variable. int [] x = new int [] ; // \u274c Size should be mentioned. int [] x = new int [ 0 ] ; \u2705 int [] x = new int [- 2 ] ; // \u2705 Runtime error; though compiled. byte b = 20 ; int [] x = new int [ b ] ; int [] x = new int [ 'b' ] ; // Character ASCII gets inputed.","title":"Introduction"},{"location":"array/#array","text":"Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type. Array is indexed collection of fixed number of homogeneous data element.","title":"Array"},{"location":"array/#advantages","text":"We can represent huge number of value using single variable. So, that readability of code will be improved. Multiple data items of same data type can be accessed using single name. Arrays can be used to implement matrices. Data structure like queue , linked list can be accessed using arrays.","title":"Advantages"},{"location":"array/#downpoints","text":"Fixed in size Since array is of fixed size, if we allocate more memory than requirement then the memory space will be wasted. And if we allocate less memory than requirement, then it will create problem. The elements of array are stored in consecutive memory locations. So insertions and deletions are very difficult and time consuming. Can only hold similar type of data. To overcome this, we use collection framework.","title":"Downpoints"},{"location":"array/#declaration","text":"int [] x ; int [] x ; int x [] ;","title":"Declaration"},{"location":"array/#one-dimensional-array","text":"int [ 6 ] x ; \u274c // We cannot define size in declaration. So, we must specify in creation. String [] args ; \u2705 Best way String [] args ; String args [] ;","title":"One Dimensional Array"},{"location":"array/#two-dimensional-array","text":"int [][] x ; int [][] x ; int [] [] x ; int [] x [] ; int [][] x ; int [] x [] ;","title":"Two Dimensional Array"},{"location":"array/#instantiation","text":"int [] x = new int [ 1000 ] ; // fixed in size.","title":"Instantiation"},{"location":"array/#initilization","text":"int a [] = new int [ 5 ] ; //declaration and instantiation a [ 0 ] = 10 ; a [ 1 ] = 20 ; a [ 2 ] = 70 ; a [ 3 ] = 40 ; a [ 4 ] = 50 ;","title":"Initilization"},{"location":"array/#note","text":"Every Object in Java is object only. For every array type, corresponding class are available but not available in programming level. System . out . println ( a . getClass (). getName ()); Array Type Corresponding Class Name int[ ] [ I int[ ][ ] [ [ I double[ ] [ D short[ ] [ S byte[ ] [ B boolean[ ] [ Z char[ ] [ C long[ ] [ J","title":"Note"},{"location":"array/#examples","text":"int [] a , b ; -> 1D Array int [] a [] , b [] ; -> 2D Array int [] [] a , b [] ; -> 2D , 3D Array int [] a [] b ; -> 2D Array int [] [] a , b ; -> 2D Array int [][] a , [] b ; \u274c // [ ] can be shared with all, if it comes before variable. int [] x = new int [] ; // \u274c Size should be mentioned. int [] x = new int [ 0 ] ; \u2705 int [] x = new int [- 2 ] ; // \u2705 Runtime error; though compiled. byte b = 20 ; int [] x = new int [ b ] ; int [] x = new int [ 'b' ] ; // Character ASCII gets inputed.","title":"Examples"},{"location":"array/extra/","text":"Array Examples Arrays class Array { public static void main ( String args [] ){ int days [] ; days = new int [ 12 ] ; for ( int i = 0 ; i < 12 ; i ++ ){ days [ i ] = i ; } for ( int i = 0 ; i < 12 ; i ++ ){ System . out . println ( \"Day : \" + days [ i ] ); } System . out . println ( days . getClass (). getName ()); } } Alternate Array Declaration class AlternativeArrayDeclaration { public static void main ( String args [] ){ /* Array can be declared like : type_name[] variable_name; for eg: public static void main(String[] args) */ int a1 [] = new int [ 3 ] ; int [] a2 = new int [ 2 ] ; /* We can also declare multiple arrays at a time by this method. */ int [] a3 , a4 , a5 = new int [ 3 ] ; /* which creates the three array variables of integer type */ } } Array Assignment class ArrayAssignment { public static void main ( String args [] ){ int month [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 }; for ( int i = 0 ; i < 12 ; i ++ ){ System . out . println ( \"Month : \" + month [ i ] ); } } } Average Using Arrays class Average { public static void main ( String args [] ){ double marks [] = { 40.6 , 30.5 , 90.3 , 20.8 , 87.5 }; double result = 0 ; for ( int i = 0 ; i < 5 ; i ++ ){ result += marks [ i ] ; } System . out . println ( \"Percentage = \" + result / 5 ); } } Two Dimensional Array class TwoDimensionalArray { public static void main ( String args [] ){ int nums [][] = new int [ 4 ][ 5 ] ; int i , j , k = 0 ; for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 5 ; j ++ ){ nums [ i ][ j ] = k ; k ++ ; } } for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 5 ; j ++ ){ System . out . print ( nums [ i ][ j ]+ \" \" ); /* Print doesn't gets printed in new line , but println does. Know the difference. */ } System . out . println (); } System . out . println ( nums . getClass (). getName ()); // This returns the class name for corressponding array type. } } Double Two Dimensional Array class DoubleTwoDArray { public static void main ( String args [] ){ double nums [][]= { { 0.0 , 1.0 , 2.0 }, { 3.0 , 4.0 , 5.0 }, { 6.0 , 7.0 , 8 , 0 } }; /* Two declare a two dimensional array, the last braces should be ended with braces as like Class in C++ . */ for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ System . out . print ( nums [ i ][ j ]+ \" \" ); } System . out . println (); } } } Two Dimensional Array Manual Allocation class TwoDArray { public static void main ( String args [] ){ int nums [][] = new int [ 4 ][] ; nums [ 0 ] = new int [ 1 ] ; nums [ 1 ] = new int [ 2 ] ; nums [ 2 ] = new int [ 3 ] ; nums [ 3 ] = new int [ 4 ] ; int k = 0 ; for ( int i = 0 ; i < 4 ; i ++ ){ for ( int j = 0 ; i < i + 1 ; j ++ ){ nums [ i ][ j ]= k ; k ++ ; } } for ( int i = 0 ; i < 4 ; i ++ ){ for ( int j = 0 ; i < i + 1 ; j ++ ){ System . out . print ( nums [ i ][ j ] + \" \" ); } System . out . println (); } } } Three Dimensional Array class ThreeDimensionalArray { public static void main ( String args [] ){ int nums [][][] = new int [ 3 ][ 3 ][ 3 ] ; int l = 0 ; for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ for ( int k = 0 ; k < 3 ; k ++ ){ nums [ i ][ j ][ k ] = l ; l ++ ; } } } for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ for ( int k = 0 ; k < 3 ; k ++ ){ System . out . print ( nums [ i ][ j ][ k ]+ \" \" ); } System . out . println (); } System . out . println ( \"\\n\" ); } } }","title":"Examples"},{"location":"array/extra/#array-examples","text":"","title":"Array Examples"},{"location":"array/extra/#arrays","text":"class Array { public static void main ( String args [] ){ int days [] ; days = new int [ 12 ] ; for ( int i = 0 ; i < 12 ; i ++ ){ days [ i ] = i ; } for ( int i = 0 ; i < 12 ; i ++ ){ System . out . println ( \"Day : \" + days [ i ] ); } System . out . println ( days . getClass (). getName ()); } }","title":"Arrays"},{"location":"array/extra/#alternate-array-declaration","text":"class AlternativeArrayDeclaration { public static void main ( String args [] ){ /* Array can be declared like : type_name[] variable_name; for eg: public static void main(String[] args) */ int a1 [] = new int [ 3 ] ; int [] a2 = new int [ 2 ] ; /* We can also declare multiple arrays at a time by this method. */ int [] a3 , a4 , a5 = new int [ 3 ] ; /* which creates the three array variables of integer type */ } }","title":"Alternate Array Declaration"},{"location":"array/extra/#array-assignment","text":"class ArrayAssignment { public static void main ( String args [] ){ int month [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 }; for ( int i = 0 ; i < 12 ; i ++ ){ System . out . println ( \"Month : \" + month [ i ] ); } } }","title":"Array Assignment"},{"location":"array/extra/#average-using-arrays","text":"class Average { public static void main ( String args [] ){ double marks [] = { 40.6 , 30.5 , 90.3 , 20.8 , 87.5 }; double result = 0 ; for ( int i = 0 ; i < 5 ; i ++ ){ result += marks [ i ] ; } System . out . println ( \"Percentage = \" + result / 5 ); } }","title":"Average Using Arrays"},{"location":"array/extra/#two-dimensional-array","text":"class TwoDimensionalArray { public static void main ( String args [] ){ int nums [][] = new int [ 4 ][ 5 ] ; int i , j , k = 0 ; for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 5 ; j ++ ){ nums [ i ][ j ] = k ; k ++ ; } } for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 5 ; j ++ ){ System . out . print ( nums [ i ][ j ]+ \" \" ); /* Print doesn't gets printed in new line , but println does. Know the difference. */ } System . out . println (); } System . out . println ( nums . getClass (). getName ()); // This returns the class name for corressponding array type. } }","title":"Two Dimensional Array"},{"location":"array/extra/#double-two-dimensional-array","text":"class DoubleTwoDArray { public static void main ( String args [] ){ double nums [][]= { { 0.0 , 1.0 , 2.0 }, { 3.0 , 4.0 , 5.0 }, { 6.0 , 7.0 , 8 , 0 } }; /* Two declare a two dimensional array, the last braces should be ended with braces as like Class in C++ . */ for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ System . out . print ( nums [ i ][ j ]+ \" \" ); } System . out . println (); } } }","title":"Double Two Dimensional Array"},{"location":"array/extra/#two-dimensional-array-manual-allocation","text":"class TwoDArray { public static void main ( String args [] ){ int nums [][] = new int [ 4 ][] ; nums [ 0 ] = new int [ 1 ] ; nums [ 1 ] = new int [ 2 ] ; nums [ 2 ] = new int [ 3 ] ; nums [ 3 ] = new int [ 4 ] ; int k = 0 ; for ( int i = 0 ; i < 4 ; i ++ ){ for ( int j = 0 ; i < i + 1 ; j ++ ){ nums [ i ][ j ]= k ; k ++ ; } } for ( int i = 0 ; i < 4 ; i ++ ){ for ( int j = 0 ; i < i + 1 ; j ++ ){ System . out . print ( nums [ i ][ j ] + \" \" ); } System . out . println (); } } }","title":"Two Dimensional Array Manual Allocation"},{"location":"array/extra/#three-dimensional-array","text":"class ThreeDimensionalArray { public static void main ( String args [] ){ int nums [][][] = new int [ 3 ][ 3 ][ 3 ] ; int l = 0 ; for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ for ( int k = 0 ; k < 3 ; k ++ ){ nums [ i ][ j ][ k ] = l ; l ++ ; } } } for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ for ( int k = 0 ; k < 3 ; k ++ ){ System . out . print ( nums [ i ][ j ][ k ]+ \" \" ); } System . out . println (); } System . out . println ( \"\\n\" ); } } }","title":"Three Dimensional Array"},{"location":"array/arrayRepresentation01/","text":"Array Representation 01 This representation of array shows how the memory blocks are allocated to the array. Value is not assigned to the memory blocks, though. Source Code class ArrayRepresentation { public static void main ( String [] args ) { // First the level of the array is pre-defined, and initial indearray of the // array is mentioned in assignation. int [][][] array = new int [ 2 ][][] ; // First Level array [ 0 ] = new int [ 3 ][] ; array [ 1 ] = new int [ 2 ][] ; // Second Level array [ 0 ][ 0 ] = new int [ 1 ] ; array [ 0 ][ 1 ] = new int [ 2 ] ; array [ 0 ][ 2 ] = new int [ 3 ] ; array [ 1 ][ 0 ] = new int [ 2 ] ; array [ 1 ][ 1 ] = new int [ 2 ] ; // In this way, the memory blocks are allocated and no memory leakage happens // here. } }","title":"Array Representation 01"},{"location":"array/arrayRepresentation01/#array-representation-01","text":"This representation of array shows how the memory blocks are allocated to the array. Value is not assigned to the memory blocks, though.","title":"Array Representation 01"},{"location":"array/arrayRepresentation01/#source-code","text":"class ArrayRepresentation { public static void main ( String [] args ) { // First the level of the array is pre-defined, and initial indearray of the // array is mentioned in assignation. int [][][] array = new int [ 2 ][][] ; // First Level array [ 0 ] = new int [ 3 ][] ; array [ 1 ] = new int [ 2 ][] ; // Second Level array [ 0 ][ 0 ] = new int [ 1 ] ; array [ 0 ][ 1 ] = new int [ 2 ] ; array [ 0 ][ 2 ] = new int [ 3 ] ; array [ 1 ][ 0 ] = new int [ 2 ] ; array [ 1 ][ 1 ] = new int [ 2 ] ; // In this way, the memory blocks are allocated and no memory leakage happens // here. } }","title":"Source Code"},{"location":"array/arrayRepresentation02/","text":"Array Representation 02 This representation of array teaches how to allocate the memory block to the elements and assign the integer value to those memory blocks. Source Code // Let's Experience 5D Array // www.github.com/thearjun/Java class ArrayRepresentation { public static void main ( String [] args ){ // First Level int [][][][][] array = new int [ 4 ][][][][] ; // Second Level array [ 0 ] = new int [ 1 ][][][] ; array [ 1 ] = new int [ 1 ][][][] ; array [ 2 ] = new int [ 1 ][][][] ; array [ 3 ] = new int [ 3 ][][][] ; // Third Level array [ 0 ][ 0 ] = new int [ 2 ][][] ; array [ 2 ][ 0 ] = new int [ 2 ][][] ; array [ 3 ][ 0 ] = new int [ 1 ][][] ; // Fourth Level array [ 0 ][ 0 ][ 0 ] = new int [ 2 ][] ; array [ 0 ][ 0 ][ 1 ] = new int [ 1 ][] ; // Fifth Level array [ 0 ][ 0 ][ 1 ][ 0 ] = new int [ 2 ] ; // Value Assign for first level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 1 ; array [ 1 ][ 0 ][ 0 ][ 0 ][ 0 ] = 2 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 3 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 4 ; // Value assign for second level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 5 ; array [ 1 ][ 0 ][ 0 ][ 0 ][ 0 ] = 13 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 14 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 18 ; array [ 3 ][ 1 ][ 0 ][ 0 ][ 0 ] = 19 ; array [ 3 ][ 2 ][ 0 ][ 0 ][ 0 ] = 20 ; // Value assign for third level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 6 ; array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 6 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 15 ; array [ 2 ][ 0 ][ 1 ][ 0 ][ 0 ] = 16 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 17 ; // Value assign for fourth level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 8 ; array [ 0 ][ 0 ][ 0 ][ 1 ][ 0 ] = 9 ; array [ 0 ][ 0 ][ 1 ][ 0 ][ 0 ] = 10 ; // Value assign for fifth level array [ 0 ][ 0 ][ 1 ][ 0 ][ 0 ] = 11 ; array [ 0 ][ 0 ][ 1 ][ 0 ][ 1 ] = 12 ; // // Now we are printing the elements of array. We know that we haven't assigned 0 to any of those memory blocks, so we print the elements which are not zero. // System.out.println(\"First Level Elements : [ \"); // for(int i = 0; i < 4; i++){ // System.out.println(array[i]+\" \"); // // if(array[i]!=0){ // // System.out.println(array[i]+\" \"); // // } // } // System.out.print(\"]\"); } }","title":"Array Representation 02"},{"location":"array/arrayRepresentation02/#array-representation-02","text":"This representation of array teaches how to allocate the memory block to the elements and assign the integer value to those memory blocks.","title":"Array Representation 02"},{"location":"array/arrayRepresentation02/#source-code","text":"// Let's Experience 5D Array // www.github.com/thearjun/Java class ArrayRepresentation { public static void main ( String [] args ){ // First Level int [][][][][] array = new int [ 4 ][][][][] ; // Second Level array [ 0 ] = new int [ 1 ][][][] ; array [ 1 ] = new int [ 1 ][][][] ; array [ 2 ] = new int [ 1 ][][][] ; array [ 3 ] = new int [ 3 ][][][] ; // Third Level array [ 0 ][ 0 ] = new int [ 2 ][][] ; array [ 2 ][ 0 ] = new int [ 2 ][][] ; array [ 3 ][ 0 ] = new int [ 1 ][][] ; // Fourth Level array [ 0 ][ 0 ][ 0 ] = new int [ 2 ][] ; array [ 0 ][ 0 ][ 1 ] = new int [ 1 ][] ; // Fifth Level array [ 0 ][ 0 ][ 1 ][ 0 ] = new int [ 2 ] ; // Value Assign for first level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 1 ; array [ 1 ][ 0 ][ 0 ][ 0 ][ 0 ] = 2 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 3 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 4 ; // Value assign for second level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 5 ; array [ 1 ][ 0 ][ 0 ][ 0 ][ 0 ] = 13 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 14 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 18 ; array [ 3 ][ 1 ][ 0 ][ 0 ][ 0 ] = 19 ; array [ 3 ][ 2 ][ 0 ][ 0 ][ 0 ] = 20 ; // Value assign for third level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 6 ; array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 6 ; array [ 2 ][ 0 ][ 0 ][ 0 ][ 0 ] = 15 ; array [ 2 ][ 0 ][ 1 ][ 0 ][ 0 ] = 16 ; array [ 3 ][ 0 ][ 0 ][ 0 ][ 0 ] = 17 ; // Value assign for fourth level array [ 0 ][ 0 ][ 0 ][ 0 ][ 0 ] = 8 ; array [ 0 ][ 0 ][ 0 ][ 1 ][ 0 ] = 9 ; array [ 0 ][ 0 ][ 1 ][ 0 ][ 0 ] = 10 ; // Value assign for fifth level array [ 0 ][ 0 ][ 1 ][ 0 ][ 0 ] = 11 ; array [ 0 ][ 0 ][ 1 ][ 0 ][ 1 ] = 12 ; // // Now we are printing the elements of array. We know that we haven't assigned 0 to any of those memory blocks, so we print the elements which are not zero. // System.out.println(\"First Level Elements : [ \"); // for(int i = 0; i < 4; i++){ // System.out.println(array[i]+\" \"); // // if(array[i]!=0){ // // System.out.println(array[i]+\" \"); // // } // } // System.out.print(\"]\"); } }","title":"Source Code"},{"location":"array/conventional/","text":"Conventional Way Of Declaring Array This method of declaring array is often referred as conventional way of declaring array.","title":"Index"},{"location":"array/conventional/#conventional-way-of-declaring-array","text":"This method of declaring array is often referred as conventional way of declaring array.","title":"Conventional Way Of Declaring Array"},{"location":"array/matrixRepresentation/","text":"Matrix Representation This type of array declaration is represented in matrix form. Memory wastage is most probable to happen in this scenario and manually unassigned blocks of memory are automatically assigned to zero. class MatrixRepresentation { public static void main ( String [] args ) { int [][] x = new int [ 4 ][ 4 ] ; x [ 0 ][ 0 ] = 10 ; x [ 0 ][ 1 ] = 12 ; x [ 0 ][ 2 ] = 99 ; x [ 0 ][ 3 ] = 89 ; x [ 1 ][ 0 ] = 28 ; x [ 1 ][ 1 ] = 67 ; x [ 1 ][ 2 ] = 56 ; x [ 2 ][ 0 ] = 80 ; x [ 2 ][ 1 ] = 90 ; x [ 3 ][ 0 ] = 90 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { System . out . println ( \"x[\" + i + \"][\" + j + \"] = \" + x [ i ][ j ] ); } System . out . println (); } System . out . println ( \"The unassigned block of memory are assigned to zero.\" ); } } Conventional Representation This method of declaring array is often referred as conventional way of declaring array. class ConventionalWay { public static void main ( String [] args ){ int [][] x = new int [ 4 ][ 3 ] ; // The no of pairs of brackets represents the level of array i.e. dimensions. } }","title":"Matrix Representation"},{"location":"array/matrixRepresentation/#matrix-representation","text":"This type of array declaration is represented in matrix form. Memory wastage is most probable to happen in this scenario and manually unassigned blocks of memory are automatically assigned to zero. class MatrixRepresentation { public static void main ( String [] args ) { int [][] x = new int [ 4 ][ 4 ] ; x [ 0 ][ 0 ] = 10 ; x [ 0 ][ 1 ] = 12 ; x [ 0 ][ 2 ] = 99 ; x [ 0 ][ 3 ] = 89 ; x [ 1 ][ 0 ] = 28 ; x [ 1 ][ 1 ] = 67 ; x [ 1 ][ 2 ] = 56 ; x [ 2 ][ 0 ] = 80 ; x [ 2 ][ 1 ] = 90 ; x [ 3 ][ 0 ] = 90 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { System . out . println ( \"x[\" + i + \"][\" + j + \"] = \" + x [ i ][ j ] ); } System . out . println (); } System . out . println ( \"The unassigned block of memory are assigned to zero.\" ); } }","title":"Matrix Representation"},{"location":"array/matrixRepresentation/#conventional-representation","text":"This method of declaring array is often referred as conventional way of declaring array. class ConventionalWay { public static void main ( String [] args ){ int [][] x = new int [ 4 ][ 3 ] ; // The no of pairs of brackets represents the level of array i.e. dimensions. } }","title":"Conventional Representation"},{"location":"controlStatements/","text":"A control statement in java is a statement that determines whether the other statements will be executed or not. It controls the flow of a program. If Statement Examples 1. Boolean Variable as Argument class IfTest { public static void main ( String [] args ) { boolean x = false ; if ( x = false ) { // This compile as if statement expects boolean value as parameter. This also throws false. System . out . println ( \"Hello Mercury\" ); } else { System . out . println ( \"Hello Venus\" ); } } } 2. Integer Variable as Argument This doesn't compile as if statement expects boolean value as parameter. class IfTest { public static void main ( String [] args ){ int x = 0 ; if ( x ){ // This doesn't compile as if statement expects boolean value as parameter. System . out . println ( \"Hello Mercury\" ); } else { System . out . println ( \"Hello Venus\" ); } } }","title":"Controls"},{"location":"controlStatements/#if-statement-examples","text":"","title":"If Statement Examples"},{"location":"controlStatements/#1-boolean-variable-as-argument","text":"class IfTest { public static void main ( String [] args ) { boolean x = false ; if ( x = false ) { // This compile as if statement expects boolean value as parameter. This also throws false. System . out . println ( \"Hello Mercury\" ); } else { System . out . println ( \"Hello Venus\" ); } } }","title":"1. Boolean Variable as Argument"},{"location":"controlStatements/#2-integer-variable-as-argument","text":"This doesn't compile as if statement expects boolean value as parameter. class IfTest { public static void main ( String [] args ){ int x = 0 ; if ( x ){ // This doesn't compile as if statement expects boolean value as parameter. System . out . println ( \"Hello Mercury\" ); } else { System . out . println ( \"Hello Venus\" ); } } }","title":"2. Integer Variable as Argument"},{"location":"dataStructures/","text":"Examples 1. Stack class Sample { public int [] itsStack = new int [] ; public boolean isEmpty (){ } public boolean isFull (){ } public boolean push (){ } public boolean pop (){ } public int top (){ } public void display (){ } } class Stack { public static void main ( String [] args ){ } } 2. Tower Of Hanoi // TOH refers to Tower Of Hanoi. public class TOH { // Defining a method which accepts parameters as: no of disks, name of rods (should match according to name of formal arguments passed). public void tower ( int noOfDisks , String sourceRod , String destinationRod , String auxiliaryRod ){ if ( noOfDisks == 1 ){ System . out . format ( \"\\nRod %d moved from %s to %s\" , 1 , sourceRod , destinationRod ); return ; } else { // Key Algorithms : tower ( noOfDisks - 1 , \"Source Rod\" , \"Auxiliary Rod\" , \"Destination Rod\" ); System . out . format ( \"\\nDisk %d moved from %s to %s\" , noOfDisks , sourceRod , destinationRod ); tower ( noOfDisks - 1 , \"Auxiliary Rod\" , \"Destination Rod\" , \"Source Rod\" ); } } } Driver Code // TOHDemo refers to Tower Of Hanoi Demo. class TOHDemo { public static void main ( String [] args ){ // This accepts the no of disks int noOfDisks = 4 ; TOH objectOne = new TOH (); // Passing the no of disks and rod names to recursive function. objectOne . tower ( noOfDisks , \"Source Rod\" , \"Destination Rod\" , \"Auxilary Rod\" ); } } 2. Block Chain import java.util.Arrays ; public class Block { private int previousHash ; private String [] transaction ; private int blockHash ; public Block ( int previousHash , String [] transaction ){ this . previousHash = previousHash ; this . transaction = transaction ; Object [] contents = { Arrays . hashCode ( transaction ), previousHash }; this . blockHash = Arrays . hashCode ( contents ); } public int getPreviousHash (){ return previousHash ; } public String [] getTransaction (){ return transaction ; } } Driver Code import java.lang.* ; import java.util.* ; import java.text.* ; public class Main { ArrayList < Block > blockchain = new ArrayList <> (); public static void main ( String [] args ){ Block genesisBlock = new Block ( previousHash ) } }","title":"Data Structures"},{"location":"dataStructures/#examples","text":"","title":"Examples"},{"location":"dataStructures/#1-stack","text":"class Sample { public int [] itsStack = new int [] ; public boolean isEmpty (){ } public boolean isFull (){ } public boolean push (){ } public boolean pop (){ } public int top (){ } public void display (){ } } class Stack { public static void main ( String [] args ){ } }","title":"1. Stack"},{"location":"dataStructures/#2-tower-of-hanoi","text":"// TOH refers to Tower Of Hanoi. public class TOH { // Defining a method which accepts parameters as: no of disks, name of rods (should match according to name of formal arguments passed). public void tower ( int noOfDisks , String sourceRod , String destinationRod , String auxiliaryRod ){ if ( noOfDisks == 1 ){ System . out . format ( \"\\nRod %d moved from %s to %s\" , 1 , sourceRod , destinationRod ); return ; } else { // Key Algorithms : tower ( noOfDisks - 1 , \"Source Rod\" , \"Auxiliary Rod\" , \"Destination Rod\" ); System . out . format ( \"\\nDisk %d moved from %s to %s\" , noOfDisks , sourceRod , destinationRod ); tower ( noOfDisks - 1 , \"Auxiliary Rod\" , \"Destination Rod\" , \"Source Rod\" ); } } } Driver Code // TOHDemo refers to Tower Of Hanoi Demo. class TOHDemo { public static void main ( String [] args ){ // This accepts the no of disks int noOfDisks = 4 ; TOH objectOne = new TOH (); // Passing the no of disks and rod names to recursive function. objectOne . tower ( noOfDisks , \"Source Rod\" , \"Destination Rod\" , \"Auxilary Rod\" ); } }","title":"2. Tower Of Hanoi"},{"location":"dataStructures/#2-block-chain","text":"import java.util.Arrays ; public class Block { private int previousHash ; private String [] transaction ; private int blockHash ; public Block ( int previousHash , String [] transaction ){ this . previousHash = previousHash ; this . transaction = transaction ; Object [] contents = { Arrays . hashCode ( transaction ), previousHash }; this . blockHash = Arrays . hashCode ( contents ); } public int getPreviousHash (){ return previousHash ; } public String [] getTransaction (){ return transaction ; } } Driver Code import java.lang.* ; import java.util.* ; import java.text.* ; public class Main { ArrayList < Block > blockchain = new ArrayList <> (); public static void main ( String [] args ){ Block genesisBlock = new Block ( previousHash ) } }","title":"2. Block Chain"},{"location":"events/","text":"Event Handling What is Event ? Change in the state of an object is known as event. i.e. event describes the change i state of source. Events are generated as a result of user interaction with GUI components . But they can also be generated explicitly. For eg: Clicking on a button, moving the mouse, entering character through keyboard. What is Event Listener ? A Listener is an object that is notified when an event occurs. a.k.a Event Handler . (also known as) Listener is responsible for generating response to an event. It has two major requirements: First , it must have been registered with one or more source to receive notifications about specific types of events. It must implement methods to receive and process these notifications. What is Event Source ? A source is an object that generates an event. This occurs when the internal state of the object chages in some way. Source may generate more than one tyoe of event. A source must register listeners in order for the listeners to recieve notifications about specific type of event. Each type of event has its own registration method. Here is the general form. public void addTypeListener (TypeListener el) // el = event listener For eg: addKeyListener() Here Type is the name of the event and el is the reference to the event listener. When an event occurs, all registered listeners are notified and recieve a copy of event object. This is known as multicasting the event . Some sources may allow only one listener to register. When such an event occurs, the registered listener is notified. This is known as unicasting the event . A source must also provide method that allows a listener to unregister an interest in a specific type of event. The general form: public void removeTypeListener(TypeListener el) What is Event Handling ? It is the mechanism that controls the event and decides what should happen if an event occurs. Java Uses Event Delegation Model . Event Delegation Model Concept : A source generates an event and sends it to one or more listeners. The listener simply waits until it receives an event. Once an event is recieved, the listener processes the event and then returns. Advantages The advantages of this design is that the application logic that processes events is clearly separated from the UI logic that generates those events. Using the Delegation Event Model Steps 1. Implement the appropriate interface in the listener so that it can receive the type of event desired. 2. Implement code to register and unregister (if necessary) the listerner as a recipient for the event notifications.","title":"Event Handling"},{"location":"events/#event-handling","text":"","title":"Event Handling"},{"location":"events/#what-is-event","text":"Change in the state of an object is known as event. i.e. event describes the change i state of source. Events are generated as a result of user interaction with GUI components . But they can also be generated explicitly. For eg: Clicking on a button, moving the mouse, entering character through keyboard.","title":"What is Event ?"},{"location":"events/#what-is-event-listener","text":"A Listener is an object that is notified when an event occurs. a.k.a Event Handler . (also known as) Listener is responsible for generating response to an event. It has two major requirements: First , it must have been registered with one or more source to receive notifications about specific types of events. It must implement methods to receive and process these notifications.","title":"What is Event Listener ?"},{"location":"events/#what-is-event-source","text":"A source is an object that generates an event. This occurs when the internal state of the object chages in some way. Source may generate more than one tyoe of event. A source must register listeners in order for the listeners to recieve notifications about specific type of event. Each type of event has its own registration method. Here is the general form. public void addTypeListener (TypeListener el) // el = event listener For eg: addKeyListener() Here Type is the name of the event and el is the reference to the event listener. When an event occurs, all registered listeners are notified and recieve a copy of event object. This is known as multicasting the event . Some sources may allow only one listener to register. When such an event occurs, the registered listener is notified. This is known as unicasting the event . A source must also provide method that allows a listener to unregister an interest in a specific type of event. The general form: public void removeTypeListener(TypeListener el)","title":"What is Event Source ?"},{"location":"events/#what-is-event-handling","text":"It is the mechanism that controls the event and decides what should happen if an event occurs. Java Uses Event Delegation Model .","title":"What is Event Handling ?"},{"location":"events/#event-delegation-model","text":"Concept : A source generates an event and sends it to one or more listeners. The listener simply waits until it receives an event. Once an event is recieved, the listener processes the event and then returns. Advantages The advantages of this design is that the application logic that processes events is clearly separated from the UI logic that generates those events.","title":"Event Delegation Model"},{"location":"events/#using-the-delegation-event-model","text":"Steps 1. Implement the appropriate interface in the listener so that it can receive the type of event desired. 2. Implement code to register and unregister (if necessary) the listerner as a recipient for the event notifications.","title":"Using the Delegation Event Model"},{"location":"events/EVENTCLASSES/","text":"Event Classes Action Event Class An Action Event is generated when: a button is pressed. a list item is double clicked. menu item is clicked. Constructor ActionEvent(Object src, int type, String cmd) ActionEvent(Object src, int type, String cmd, int modifiers) ActionEvent(Object src, int type, String cmd, long when, int modifiers) Here, src = reference to the object that generated this event. type = Determine type of event cmd = command string modifier = indicates modifier keys ( ALT, CTRL, SHIFT ); values are ALT_MASK, CTRL_MASK, SHIFT_MASK when = specifies when the event occured You can obtain the command name for the envoking ActionEvent object by using: String getActionCommand() For eg: - When a button is pressed, an action event is generated that has a command name equal to the label on that button. - Other Methods : ```int getModifier()``` ```long getWhen()``` KeyEvent Class It is generated when: Keyboard input occurs Types of KeyEvent KEY_PRESSED - generated when key is pressed. KEY_RELEASED - generated when key is released. KEY_TYPED - generated when key is generated. Constants VK_ALT , VK_DOWN , VK_LEFT , VK_RIGHT , VK_ENTER , VK_ESCAPE , VK_CONTROL , VK_SHIFT , Methods char getKeyChar () ; int getKeyChar () ; Mouse Event There are eight types of mouse events: Eight integer constants are defined to determine types: MOUSE EVENT Generate MOUSE_CLICKED When user clicked the mouse MOUSE_DRESSED The user dragged the mouse MOUSE_ENTERED The mouse entered a component MOUSE_EXITED The mouse exited from a component MOUSE_MOVED The mouse moved MOUSE_PRESSED The mouse was pressed MOUSE_RELEASED The mouse was released MOUSE_WHEEL The mouse wheel was moved. Methods: int getX() int getY() Point getPoint() -> gives object that contain X, Y co-ordinates int getClickCount() boolean isPopupTrigger() -> tests if this events causes a pop-up menu to appear on this platform. int getButton() -> returns a values that represents the button that caused the event. Summary Event Class Description 1. Action Event Generated whe a button is pressed, a list item s double-clicked or menu item is selected. 2. Key Event Generated when input is received from the keyboard 3. Mouse Event Generated when the mouse is dragged, moved, clicked, pressed, or released, enter or exist component. 4. Adjustment Event Generated when a scroll bar is manipulated. 5. Component Event Generated when a component is hidden, move, resized or becomes visible. 6. Container Event Generated when a component is added to or remoevd from a component. 7. Focus Event Generated when a component is gains or loses keyboard focus. 8. Input Event Abstract superclass for all component input event classes. 9. Item Event Generated when a checkbox or list item is clicked: also occurs when a choice selection is made or a checkable menu item is selected or deselected. 10. MouseWheelEvent Generated when the mouse wheel is moved. 11. TextEvent Generated when the value of a text area or text field is changed. 11. WindowEvent Generated when a window is activated, closed, deactivated, opened or quitted.","title":"Event Classes"},{"location":"events/EVENTCLASSES/#event-classes","text":"","title":"Event Classes"},{"location":"events/EVENTCLASSES/#action-event-class","text":"An Action Event is generated when: a button is pressed. a list item is double clicked. menu item is clicked.","title":"Action Event Class"},{"location":"events/EVENTCLASSES/#constructor","text":"ActionEvent(Object src, int type, String cmd) ActionEvent(Object src, int type, String cmd, int modifiers) ActionEvent(Object src, int type, String cmd, long when, int modifiers) Here, src = reference to the object that generated this event. type = Determine type of event cmd = command string modifier = indicates modifier keys ( ALT, CTRL, SHIFT ); values are ALT_MASK, CTRL_MASK, SHIFT_MASK when = specifies when the event occured You can obtain the command name for the envoking ActionEvent object by using: String getActionCommand() For eg: - When a button is pressed, an action event is generated that has a command name equal to the label on that button. - Other Methods : ```int getModifier()``` ```long getWhen()```","title":"Constructor"},{"location":"events/EVENTCLASSES/#keyevent-class","text":"It is generated when: Keyboard input occurs","title":"KeyEvent Class"},{"location":"events/EVENTCLASSES/#types-of-keyevent","text":"KEY_PRESSED - generated when key is pressed. KEY_RELEASED - generated when key is released. KEY_TYPED - generated when key is generated.","title":"Types of KeyEvent"},{"location":"events/EVENTCLASSES/#constants","text":"VK_ALT , VK_DOWN , VK_LEFT , VK_RIGHT , VK_ENTER , VK_ESCAPE , VK_CONTROL , VK_SHIFT ,","title":"Constants"},{"location":"events/EVENTCLASSES/#methods","text":"char getKeyChar () ; int getKeyChar () ;","title":"Methods"},{"location":"events/EVENTCLASSES/#mouse-event","text":"There are eight types of mouse events: Eight integer constants are defined to determine types: MOUSE EVENT Generate MOUSE_CLICKED When user clicked the mouse MOUSE_DRESSED The user dragged the mouse MOUSE_ENTERED The mouse entered a component MOUSE_EXITED The mouse exited from a component MOUSE_MOVED The mouse moved MOUSE_PRESSED The mouse was pressed MOUSE_RELEASED The mouse was released MOUSE_WHEEL The mouse wheel was moved.","title":"Mouse Event"},{"location":"events/EVENTCLASSES/#methods_1","text":"int getX() int getY() Point getPoint() -> gives object that contain X, Y co-ordinates int getClickCount() boolean isPopupTrigger() -> tests if this events causes a pop-up menu to appear on this platform. int getButton() -> returns a values that represents the button that caused the event.","title":"Methods:"},{"location":"events/EVENTCLASSES/#summary","text":"Event Class Description 1. Action Event Generated whe a button is pressed, a list item s double-clicked or menu item is selected. 2. Key Event Generated when input is received from the keyboard 3. Mouse Event Generated when the mouse is dragged, moved, clicked, pressed, or released, enter or exist component. 4. Adjustment Event Generated when a scroll bar is manipulated. 5. Component Event Generated when a component is hidden, move, resized or becomes visible. 6. Container Event Generated when a component is added to or remoevd from a component. 7. Focus Event Generated when a component is gains or loses keyboard focus. 8. Input Event Abstract superclass for all component input event classes. 9. Item Event Generated when a checkbox or list item is clicked: also occurs when a choice selection is made or a checkable menu item is selected or deselected. 10. MouseWheelEvent Generated when the mouse wheel is moved. 11. TextEvent Generated when the value of a text area or text field is changed. 11. WindowEvent Generated when a window is activated, closed, deactivated, opened or quitted.","title":"Summary"},{"location":"events/EVENTLISTENERS/","text":"Sources of Events Button , CheckBox , Choice , List , Menu Item , Scrollbar , TextField , TextArea , Window User -> Event source -> Generates Event Objects -> Pass to EventListener(Handler) -> Handle and Return back to Source","title":"Sources of Events"},{"location":"events/EVENTLISTENERS/#sources-of-events","text":"Button , CheckBox , Choice , List , Menu Item , Scrollbar , TextField , TextArea , Window User -> Event source -> Generates Event Objects -> Pass to EventListener(Handler) -> Handle and Return back to Source","title":"Sources of Events"},{"location":"events/ActionListener/","text":"ActionListener Defines one method to receive actions events. Methods void actionPerformed(ActionEvet ae)","title":"**ActionListener**"},{"location":"events/ActionListener/#actionlistener","text":"Defines one method to receive actions events. Methods void actionPerformed(ActionEvet ae)","title":"ActionListener"},{"location":"events/Adapter/","text":"Adapter Class Java compiles a special feature, called an adapter class, that can simplify he creation of event handlers in certain situations. An adapter class prvovides an empty implementation of all methods in an EventListener interface. It is useful when you want to receive and process only some of the events that are handled by a particular event listener interface . Commonly used Listener Interface implemented by Adapter Class : Adapter Class Listener Interface ComponentAdapter ComponentListener ContainerAdapter ContainerListener FocusAdapter FocusListener KeyAdapter KeyListener MouseMotionAdapter MouseMotionListener, MouseListener & MouseWheelListener WindowAdapter WindowListener, WindowFocusListener & WindowStateListener","title":"Adapter Class"},{"location":"events/Adapter/#adapter-class","text":"Java compiles a special feature, called an adapter class, that can simplify he creation of event handlers in certain situations. An adapter class prvovides an empty implementation of all methods in an EventListener interface. It is useful when you want to receive and process only some of the events that are handled by a particular event listener interface . Commonly used Listener Interface implemented by Adapter Class : Adapter Class Listener Interface ComponentAdapter ComponentListener ContainerAdapter ContainerListener FocusAdapter FocusListener KeyAdapter KeyListener MouseMotionAdapter MouseMotionListener, MouseListener & MouseWheelListener WindowAdapter WindowListener, WindowFocusListener & WindowStateListener","title":"Adapter Class"},{"location":"events/AdjustmentListener/","text":"AdjustmentListener Defines one methods to receive adjustment events. Methods 1. void adjustmentValueChanged(AdjustmentEvent ae)","title":"**AdjustmentListener**"},{"location":"events/AdjustmentListener/#adjustmentlistener","text":"Defines one methods to receive adjustment events. Methods 1. void adjustmentValueChanged(AdjustmentEvent ae)","title":"AdjustmentListener"},{"location":"events/ComponentListener/","text":"ComponentListener Defines 4 methods to recognize when a component is hidden , moved , resized or shown. Methods 1. void componentResized(ComponentEvent ce) 2. void componentMoved(ComponentEvent ce) 3. void componentShown(ComponentEvent ce) 4. void componentHidden(ComponentEvent ce)","title":"**ComponentListener**"},{"location":"events/ComponentListener/#componentlistener","text":"Defines 4 methods to recognize when a component is hidden , moved , resized or shown. Methods 1. void componentResized(ComponentEvent ce) 2. void componentMoved(ComponentEvent ce) 3. void componentShown(ComponentEvent ce) 4. void componentHidden(ComponentEvent ce)","title":"ComponentListener"},{"location":"events/ContainerListener/","text":"ContainerListener Defines 2 methods to recognize when a componenet is added to or removed from a container. Methods 1. void containerAdded(ContainerEvent ce) 2. void containerRemoved(ContainerEvent ce)","title":"ContainerListener"},{"location":"events/ContainerListener/#containerlistener","text":"Defines 2 methods to recognize when a componenet is added to or removed from a container. Methods 1. void containerAdded(ContainerEvent ce) 2. void containerRemoved(ContainerEvent ce)","title":"ContainerListener"},{"location":"events/FocusListener/","text":"FocusListener Defines 2 methods to recognize a component gain or loses keyboard focuses Methods 1. void focusGained(FocusEvent fe) 2. void focusLost(FocusEvent fe)","title":"FocusListener"},{"location":"events/FocusListener/#focuslistener","text":"Defines 2 methods to recognize a component gain or loses keyboard focuses Methods 1. void focusGained(FocusEvent fe) 2. void focusLost(FocusEvent fe)","title":"FocusListener"},{"location":"events/ItemListener/","text":"ItemListener: Defines 1 method to recognize when the state of an item changes Methods 1. void itemStateChange(ItemEvent ie)","title":"ItemListener:"},{"location":"events/ItemListener/#itemlistener","text":"Defines 1 method to recognize when the state of an item changes Methods 1. void itemStateChange(ItemEvent ie)","title":"ItemListener:"},{"location":"events/KeyListener/","text":"KeyListener Interface Define 3 methods to recognize when a key is pressed, released or typed. Methods 1. void keyPressed(KeyEvent ke) 2. void keyReleased(KeyEvent ke) 3. void keyTyped(KeyEvent ke)","title":"Index"},{"location":"events/KeyListener/#keylistener-interface","text":"Define 3 methods to recognize when a key is pressed, released or typed. Methods 1. void keyPressed(KeyEvent ke) 2. void keyReleased(KeyEvent ke) 3. void keyTyped(KeyEvent ke)","title":"KeyListener Interface"},{"location":"events/MouseListener/","text":"MouseListener Defines 5 methods to recognize when the mouse is clicked, enters a component, exits component, is pressed, is released. Methods 1. void mouseClicked(MouseEvent me) 2. void mouseEntered(MouseEvent me) 3. void mouseExited(MouseEvent me) 4. void mousePressed(MouseEvent me) 5. void mouseReleased(MouseEvent me)","title":"Index"},{"location":"events/MouseListener/#mouselistener","text":"Defines 5 methods to recognize when the mouse is clicked, enters a component, exits component, is pressed, is released. Methods 1. void mouseClicked(MouseEvent me) 2. void mouseEntered(MouseEvent me) 3. void mouseExited(MouseEvent me) 4. void mousePressed(MouseEvent me) 5. void mouseReleased(MouseEvent me)","title":"MouseListener"},{"location":"events/MouseMotionListener/","text":"MouseMotionListener Defines 2 methods to recognize when mouse is dragged or moved. Methods 1. void mouseDraged(MouseEvent me) 2. void mouseMoved(MouseEvent me)","title":"MouseMotionListener"},{"location":"events/MouseMotionListener/#mousemotionlistener","text":"Defines 2 methods to recognize when mouse is dragged or moved. Methods 1. void mouseDraged(MouseEvent me) 2. void mouseMoved(MouseEvent me)","title":"MouseMotionListener"},{"location":"events/MouseWheelListener/","text":"MouseWheelListener -Defines 1 method to recognize when the mouse wheel is moved. Methods 1. void mouseWheelMoved(MouseWheelEvent mwe)","title":"MouseWheelListener"},{"location":"events/MouseWheelListener/#mousewheellistener","text":"-Defines 1 method to recognize when the mouse wheel is moved. Methods 1. void mouseWheelMoved(MouseWheelEvent mwe)","title":"MouseWheelListener"},{"location":"events/TextListener/","text":"TextListener Defines 1 method to recognize when a text value changes. Methods 1. void textValueChanged(TextEvent te)","title":"TextListener"},{"location":"events/TextListener/#textlistener","text":"Defines 1 method to recognize when a text value changes. Methods 1. void textValueChanged(TextEvent te)","title":"TextListener"},{"location":"events/WindowFocusListener/","text":"WindowFocusListener Defines 2 methods to recognize when a window gains ore loses input focus Methods 1. void windowGainedFocus(WindowEvent we) 2. void windowLostFocus(WindowEvent we)","title":"WindowFocusListener"},{"location":"events/WindowFocusListener/#windowfocuslistener","text":"Defines 2 methods to recognize when a window gains ore loses input focus Methods 1. void windowGainedFocus(WindowEvent we) 2. void windowLostFocus(WindowEvent we)","title":"WindowFocusListener"},{"location":"events/WindowListener/","text":"WindowListener Defines 7 methods to recognize when a window is activated, closed, deactivated,iconified, deiconified, opened or quit. Methods 1. void windowActivated(WindowEvent we) 2. void windowClosed(WindowEvent we) 3. void windowClosing(WindowEvent we) 4. void windowDeactivated(WindowEvent we) 5. void windowIconified(WindowEvent we) 6. void windowDeiconified(WindowEvent we) 7. void windowOpened(WindowEvent we)","title":"WindowListener"},{"location":"events/WindowListener/#windowlistener","text":"Defines 7 methods to recognize when a window is activated, closed, deactivated,iconified, deiconified, opened or quit. Methods 1. void windowActivated(WindowEvent we) 2. void windowClosed(WindowEvent we) 3. void windowClosing(WindowEvent we) 4. void windowDeactivated(WindowEvent we) 5. void windowIconified(WindowEvent we) 6. void windowDeiconified(WindowEvent we) 7. void windowOpened(WindowEvent we)","title":"WindowListener"},{"location":"exams/examAnswers/DBAbstractClassAndInterface/","text":"Difference between Abstract Class and Interface Abstract Class Interface An abstract class is a class that is declared abstract \u2014it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed. However, if it does not, then the subclass must also be declared abstract . A Java interface is a bit like a class, except a Java interface can only contain method signatures and fields. An Java interface cannot contain an implementation of the methods, only the signature (name, parameters and exceptions) of the method. You can use interfaces in Java as a way to achieve polymorphism. If we are talking about implementation, but not completely; we use abstract class. If we don't know about the implementation, just have requirements, go with interface. We can take abstract and concrete class. Method is public and abstract. Interface is 100% abstract class. No restrictions on abstract class access modifiers. We can't declare private and protected. Variables present inside abstract class needn't to be public, static and final. Every interface variable is public, final and static whether we are declaring it or not. No restrictions for initialization of variables. Initialization of variable is mandatory during declaration; else compile-time error. No restrictions on declaring static blocks (functions). We can declare instances too. Can't declare instance and static blocks; else compile-time error. It can take instance variable. if we want we can have constructors too. No constructor which sole purpose is to initialize the variable.","title":"Difference between Abstract Class and Interface"},{"location":"exams/examAnswers/DBAbstractClassAndInterface/#difference-between-abstract-class-and-interface","text":"Abstract Class Interface An abstract class is a class that is declared abstract \u2014it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed. However, if it does not, then the subclass must also be declared abstract . A Java interface is a bit like a class, except a Java interface can only contain method signatures and fields. An Java interface cannot contain an implementation of the methods, only the signature (name, parameters and exceptions) of the method. You can use interfaces in Java as a way to achieve polymorphism. If we are talking about implementation, but not completely; we use abstract class. If we don't know about the implementation, just have requirements, go with interface. We can take abstract and concrete class. Method is public and abstract. Interface is 100% abstract class. No restrictions on abstract class access modifiers. We can't declare private and protected. Variables present inside abstract class needn't to be public, static and final. Every interface variable is public, final and static whether we are declaring it or not. No restrictions for initialization of variables. Initialization of variable is mandatory during declaration; else compile-time error. No restrictions on declaring static blocks (functions). We can declare instances too. Can't declare instance and static blocks; else compile-time error. It can take instance variable. if we want we can have constructors too. No constructor which sole purpose is to initialize the variable.","title":"Difference between Abstract Class and Interface"},{"location":"exams/examQuestions/","text":"\u2705 in questions denotes the no of question appearence. More the tick in question, possess high importance from examination point of view. Chapter 1 Define Java. Write about the historical background of JPL. \u2705 \u2705 \u2705 Why and where we use Java Programming Language? \u2705 What are the benefits of using Java? How Java is more secure than other programming languages? Explain. \u201cJava is Interpreted, High Performance, Dynamic, Secure, Robust\u201d. Explain the statement. Explain Java Platform with their inter co-related technologies. Draw a sample block diagram to show compile time environment in Java programming. List down the different features of Java. \u2705 \u2705 Explain how Java supports multiple platforms, platform independency. \u2705 \u2705 \u2705 How do you differentiate JDK and JRE? What is the significance of having multiple data types in programming language? What do you mean by Java System Overview? Explain why Java program are known as portable and architecture neutral. What is the motive behind JVM? Explain what you mean by JRE. Is JVM is machine dependent? Explain the use of JVM. How JVM makes machine dependent. What do you mean by architectural \u2013 neutral? What are wrapper classes? What are the uses of Java Virtual Machine in JPL? \u2705 \u2705 \u2705Explain the two types of class loader in JPL. Explain why Java programs are compiled with bytecodes? \u2705 \u2705 What is a class file? Differentiate between assignment and initialization with suitable example. Explain all facilities the Java Programming has over C++. Why it is more popular than C++? \u2705 \u2705 \u2705 - Portability, platform independence (JVM), Java runs on any platform without recompiling. Write a program to sort any five names in alphabetical order. Write a program to print \u201cHello Nepal\u201d in console. \u2705 Write a program to show usage of various data types in Java. Write a function that takes an array of integers as an argument and returns sum of even numbers in that array. Write a program to generate the following triangle using for loop. 1 0 1 1 0 1 0 1 0 1 Chapter 2 How do you implement the concept of OOP in Java? Explain with an example. How the concept of reusability can be useful in OOP? Explain with example, in terms of JPL. \u2705\u2705 How does Java support reusability? Provide examples. What is a class? \u2705 How does it accomplish data hiding? Explain with suitable example. What advantages do we have when inheriting from a class whose attributes are protected rather than private? How are class declared in Java? Illustrate with example. Show the differences between user defined classes and system defined class. \u2705 Explain how we can re-use the user defined classes. What is constructor, Explain with example? State the difference between inner and outer class with the help of suitable example. \u2705 In what scenario inner use of inner class is preferred? Explain the static and non-static inner classes with example. Mention the scope of all modifiers (private, default, protected and public). Write suitable program to illustrate the concept. Write a simple program to show the difference in using and not using static keyword in defining methods. Explain the key words \u201cpublic, static, void, private, protected\u201d with reference to JPL. \u2705 Discuss about the concept of instance variable hiding in Java. Illustrate with a code example. Can you override private or static method in Java? Explain with an example. How inner class helps programmer? Write a short program snippet to show anonymous inner classes. Difference between class method and instance method with suitable example. Explain the difference between method overloading and method overriding? \u2705 \u2705\u2705 \u2705 \u2705 Write a program to show method overriding. Define polymorphism. How should we implement polymorphism in Java? Explain with example. Write a java class to demonstrate method overloading. Define a sum( ) method which takes two parameters and displays the sum. The sum( ) method should be overloaded to accept a combination of integer and double type number. \u2705 Explain the uses of super and this keyword with suitable examples. Define inheritance.\u2705 \u2705 \u2705 \u2705 \u2705 Explain different types of inheritance. \u2705 How does inheritance reduce the program development time? Explain with example. Explain the strategy for designing Inheritance. \u2705 Describe how we can prevent inheritance. Explain one method and multiple implementation approach of inheritance with example. Write a program deriving two child classes from a base class using Java. What is the use of abstract keyword? Explain with a suitable program. How is abstract class different from interfaces? \u2705 \u2705 \u2705 \u2705 What is the use of abstract classes in programming? What is difference between Interface and a class? Explain with an example. What is an interface? \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Explain with a suitable example. \u2705 \u2705 What are the significant uses of interface? Explain how it is implemented in Java. \u2705 How do you design and use interface? \u2705 \u2705 How Java supports Multiple Inheritance? Write a program in Java that shows the concept of Multiple Inheritance. \u2705 Why is multiple inheritance not supported in Java. Provide a simple code example to support your answer. What is runtime polymorphism? Explain how it can be achieved in Java. What is the difference between static method and non-static method? Can a non-static method be invoked from a static method? Explain with example? Write a program which has two classes A and B, where A should act as Parent class and B should inherit from A. Create a class Employee with id, name, post and salary . Create parameterized constructor to initialize the instance variables. Override the toString( ) method to display the employee details. Create a class Parts with instance variable sno, name, model, price , constructors to initialize the object, a method to calculate commission which calculates 10% of the price of each item and a method to display the details. Derive a new class PartsVAT with a method to calculate 13% VAT of the item. Write necessary constructors to that use the super constructors. Test the classes using a main method in third classes. Write an interface Exam with a method pass (int pass) that returns a Boolean. Write another interface Classify with a method division (int average) which returns a string. Write class Result which implements both Exams and Classify. The pass method should return true if score is greater than 50 otherwise false. The division method must return \u201cFirst\u201d when average is more than 80, \u201cSecond when average is more than 50 otherwise \u201dNo Divison\u201d. Write a Java program to demonstrate runtime polymorphism via method overriding. Write the following classes: Animal as a base class, Cat (derived class of Animal) and Cow (derived class of Animal). Write a method eat( ) in Animal class and override that method in the derived classes. Implement an abstract class named Person and two subclasses named Student and Employee in Java. A person has a name, address, phone number and e-mail address . A student has a class status (freshman, sophomore, junior or senior) . Define the status as a constant. An employee has an office, salary and date-hired . Implement the above classes in Java. Provide Constructors for classes to initialize private variables. Override the toString( ) methods in each class to display class name and the person\u2019s name. Write an application to create objects of type Student and Employee and print the person\u2019s name and the class name of the objects. Implement an abstract class named Book and two other subclasses named Novel and Magazine. A Book has a name, author, total page and publisher . Book has an abstract method called getBookType( ) . Novel and Magazine have field to determine their type. Implement the above classes in Java. Provide constructors for classes to private variables. Make a class Human with a name and age . Make a class Employee inherit from Human . Add instance variable salary of double. Supply a method showData( ) that prints the Employee\u2019s name, age , and salary . Make a class Manager inherit from Employee. Supply appropriate showData( ) methods for all classes. Provide a test program that tests these classes and methods. Define packages. \u2705 \u2705 Explain the significance of using package in Java. Differentiate interface with abstract classes. Write a package of three classes where each class must have at least one function. Also, state the steps to execute the package. \u2705 \u2705Add illustration. How packages are created and used in Java? Explain with example. \u2705 What is user defined package? Illustrate the process of defining and using define package with suitable example. Difference between package and interface in Java. Provide examples for each of them. Create a class MyClass in a package MyPack . Import newly created class MyClass form IpmClass . Chapter 3 What are exceptions? \u2705 \u2705 \u2705 What do you understand by exceptional handling? Describe about try-catch-finally construct with an example. \u2705 \u2705 \u2705 \u2705 \u2705 What\u2019s the use of try and catch block in Java? Write down all the exceptions that occur when we are dealing with array. Define Exceptional Handling with the help of a suitable program. \u2705 \u2705 Explain the different types of Exceptional Class. \u2705 What is usage of exception handling? Define with example. What is exception handling? Is an error similar to exception? \u2705 \u2705 Explain how an exception is handled?\u2705 What are the major exception classes used in Java? \u2705 How does an exception occur in Java? Explain the user defined Exceptions with suitable Java code. Differentiate between checked and unchecked exceptions with relevant examples. How you can create your own exceptions in Java? Explain with Program. Write a program to input an integer from keyboard and print it on the console. Fire an exception if the input is other than integer using try and catch blocks. Write a program to create your own Arithmetic Exception. Chapter 4 Write a program in Java to read a line of string in console mode and display same line as output. \u2705 \u2705 \u2705 \u2705 Write a Java program to access an existing file in to your current directory. Write a program which stores and appends any String value given from keyword into the C:\\store.txt . Write a program to read a text file and display the content on screen. Write a program to read two integer numbers from the console using the Input Stream. Calculate their sum display in console. Write a program to store objects of a class Student into a file \u201cstudent.dat\u201d also reads the objects from same file and display the file state of objects on the screen. Handle possible exceptions. Explain various stream classes available in Java. Write a program using any stream class for writing text to a file. Write a program to read content from file \u201c abc.txt \u201d and store it in \u201c xyz.txt \u201d. Write a program to write \u201c Hello World \u201d in a file abc.txt . Short Notes History of Java Benefits of Java Java Virtual Machine (JVM) \u2705 & Byte Code Data Types, Variables and class \u2705 \u2705 Assignment vs. Initialization Arrays i. Single Dimensional ii. Multi-Dimensional Type casting \u2705 Inner Class \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Final Keyword Access mechanism in Java \u2705 \u2705 \u2705 Static members \u2705 Static member variable \u2705 Abstract Methods and Classes Runtime Polymorphism in Java Wrapper Classes Inheritance Packages Dynamic Dispatching Casting Abstract Classes","title":"General"},{"location":"exams/examQuestions/#chapter-1","text":"Define Java. Write about the historical background of JPL. \u2705 \u2705 \u2705 Why and where we use Java Programming Language? \u2705 What are the benefits of using Java? How Java is more secure than other programming languages? Explain. \u201cJava is Interpreted, High Performance, Dynamic, Secure, Robust\u201d. Explain the statement. Explain Java Platform with their inter co-related technologies. Draw a sample block diagram to show compile time environment in Java programming. List down the different features of Java. \u2705 \u2705 Explain how Java supports multiple platforms, platform independency. \u2705 \u2705 \u2705 How do you differentiate JDK and JRE? What is the significance of having multiple data types in programming language? What do you mean by Java System Overview? Explain why Java program are known as portable and architecture neutral. What is the motive behind JVM? Explain what you mean by JRE. Is JVM is machine dependent? Explain the use of JVM. How JVM makes machine dependent. What do you mean by architectural \u2013 neutral? What are wrapper classes? What are the uses of Java Virtual Machine in JPL? \u2705 \u2705 \u2705Explain the two types of class loader in JPL. Explain why Java programs are compiled with bytecodes? \u2705 \u2705 What is a class file? Differentiate between assignment and initialization with suitable example. Explain all facilities the Java Programming has over C++. Why it is more popular than C++? \u2705 \u2705 \u2705 - Portability, platform independence (JVM), Java runs on any platform without recompiling. Write a program to sort any five names in alphabetical order. Write a program to print \u201cHello Nepal\u201d in console. \u2705 Write a program to show usage of various data types in Java. Write a function that takes an array of integers as an argument and returns sum of even numbers in that array. Write a program to generate the following triangle using for loop. 1 0 1 1 0 1 0 1 0 1","title":"Chapter 1"},{"location":"exams/examQuestions/#chapter-2","text":"How do you implement the concept of OOP in Java? Explain with an example. How the concept of reusability can be useful in OOP? Explain with example, in terms of JPL. \u2705\u2705 How does Java support reusability? Provide examples. What is a class? \u2705 How does it accomplish data hiding? Explain with suitable example. What advantages do we have when inheriting from a class whose attributes are protected rather than private? How are class declared in Java? Illustrate with example. Show the differences between user defined classes and system defined class. \u2705 Explain how we can re-use the user defined classes. What is constructor, Explain with example? State the difference between inner and outer class with the help of suitable example. \u2705 In what scenario inner use of inner class is preferred? Explain the static and non-static inner classes with example. Mention the scope of all modifiers (private, default, protected and public). Write suitable program to illustrate the concept. Write a simple program to show the difference in using and not using static keyword in defining methods. Explain the key words \u201cpublic, static, void, private, protected\u201d with reference to JPL. \u2705 Discuss about the concept of instance variable hiding in Java. Illustrate with a code example. Can you override private or static method in Java? Explain with an example. How inner class helps programmer? Write a short program snippet to show anonymous inner classes. Difference between class method and instance method with suitable example. Explain the difference between method overloading and method overriding? \u2705 \u2705\u2705 \u2705 \u2705 Write a program to show method overriding. Define polymorphism. How should we implement polymorphism in Java? Explain with example. Write a java class to demonstrate method overloading. Define a sum( ) method which takes two parameters and displays the sum. The sum( ) method should be overloaded to accept a combination of integer and double type number. \u2705 Explain the uses of super and this keyword with suitable examples. Define inheritance.\u2705 \u2705 \u2705 \u2705 \u2705 Explain different types of inheritance. \u2705 How does inheritance reduce the program development time? Explain with example. Explain the strategy for designing Inheritance. \u2705 Describe how we can prevent inheritance. Explain one method and multiple implementation approach of inheritance with example. Write a program deriving two child classes from a base class using Java. What is the use of abstract keyword? Explain with a suitable program. How is abstract class different from interfaces? \u2705 \u2705 \u2705 \u2705 What is the use of abstract classes in programming? What is difference between Interface and a class? Explain with an example. What is an interface? \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Explain with a suitable example. \u2705 \u2705 What are the significant uses of interface? Explain how it is implemented in Java. \u2705 How do you design and use interface? \u2705 \u2705 How Java supports Multiple Inheritance? Write a program in Java that shows the concept of Multiple Inheritance. \u2705 Why is multiple inheritance not supported in Java. Provide a simple code example to support your answer. What is runtime polymorphism? Explain how it can be achieved in Java. What is the difference between static method and non-static method? Can a non-static method be invoked from a static method? Explain with example? Write a program which has two classes A and B, where A should act as Parent class and B should inherit from A. Create a class Employee with id, name, post and salary . Create parameterized constructor to initialize the instance variables. Override the toString( ) method to display the employee details. Create a class Parts with instance variable sno, name, model, price , constructors to initialize the object, a method to calculate commission which calculates 10% of the price of each item and a method to display the details. Derive a new class PartsVAT with a method to calculate 13% VAT of the item. Write necessary constructors to that use the super constructors. Test the classes using a main method in third classes. Write an interface Exam with a method pass (int pass) that returns a Boolean. Write another interface Classify with a method division (int average) which returns a string. Write class Result which implements both Exams and Classify. The pass method should return true if score is greater than 50 otherwise false. The division method must return \u201cFirst\u201d when average is more than 80, \u201cSecond when average is more than 50 otherwise \u201dNo Divison\u201d. Write a Java program to demonstrate runtime polymorphism via method overriding. Write the following classes: Animal as a base class, Cat (derived class of Animal) and Cow (derived class of Animal). Write a method eat( ) in Animal class and override that method in the derived classes. Implement an abstract class named Person and two subclasses named Student and Employee in Java. A person has a name, address, phone number and e-mail address . A student has a class status (freshman, sophomore, junior or senior) . Define the status as a constant. An employee has an office, salary and date-hired . Implement the above classes in Java. Provide Constructors for classes to initialize private variables. Override the toString( ) methods in each class to display class name and the person\u2019s name. Write an application to create objects of type Student and Employee and print the person\u2019s name and the class name of the objects. Implement an abstract class named Book and two other subclasses named Novel and Magazine. A Book has a name, author, total page and publisher . Book has an abstract method called getBookType( ) . Novel and Magazine have field to determine their type. Implement the above classes in Java. Provide constructors for classes to private variables. Make a class Human with a name and age . Make a class Employee inherit from Human . Add instance variable salary of double. Supply a method showData( ) that prints the Employee\u2019s name, age , and salary . Make a class Manager inherit from Employee. Supply appropriate showData( ) methods for all classes. Provide a test program that tests these classes and methods. Define packages. \u2705 \u2705 Explain the significance of using package in Java. Differentiate interface with abstract classes. Write a package of three classes where each class must have at least one function. Also, state the steps to execute the package. \u2705 \u2705Add illustration. How packages are created and used in Java? Explain with example. \u2705 What is user defined package? Illustrate the process of defining and using define package with suitable example. Difference between package and interface in Java. Provide examples for each of them. Create a class MyClass in a package MyPack . Import newly created class MyClass form IpmClass .","title":"Chapter 2"},{"location":"exams/examQuestions/#chapter-3","text":"What are exceptions? \u2705 \u2705 \u2705 What do you understand by exceptional handling? Describe about try-catch-finally construct with an example. \u2705 \u2705 \u2705 \u2705 \u2705 What\u2019s the use of try and catch block in Java? Write down all the exceptions that occur when we are dealing with array. Define Exceptional Handling with the help of a suitable program. \u2705 \u2705 Explain the different types of Exceptional Class. \u2705 What is usage of exception handling? Define with example. What is exception handling? Is an error similar to exception? \u2705 \u2705 Explain how an exception is handled?\u2705 What are the major exception classes used in Java? \u2705 How does an exception occur in Java? Explain the user defined Exceptions with suitable Java code. Differentiate between checked and unchecked exceptions with relevant examples. How you can create your own exceptions in Java? Explain with Program. Write a program to input an integer from keyboard and print it on the console. Fire an exception if the input is other than integer using try and catch blocks. Write a program to create your own Arithmetic Exception.","title":"Chapter 3"},{"location":"exams/examQuestions/#chapter-4","text":"Write a program in Java to read a line of string in console mode and display same line as output. \u2705 \u2705 \u2705 \u2705 Write a Java program to access an existing file in to your current directory. Write a program which stores and appends any String value given from keyword into the C:\\store.txt . Write a program to read a text file and display the content on screen. Write a program to read two integer numbers from the console using the Input Stream. Calculate their sum display in console. Write a program to store objects of a class Student into a file \u201cstudent.dat\u201d also reads the objects from same file and display the file state of objects on the screen. Handle possible exceptions. Explain various stream classes available in Java. Write a program using any stream class for writing text to a file. Write a program to read content from file \u201c abc.txt \u201d and store it in \u201c xyz.txt \u201d. Write a program to write \u201c Hello World \u201d in a file abc.txt .","title":"Chapter 4"},{"location":"exams/examQuestions/#short-notes","text":"History of Java Benefits of Java Java Virtual Machine (JVM) \u2705 & Byte Code Data Types, Variables and class \u2705 \u2705 Assignment vs. Initialization Arrays i. Single Dimensional ii. Multi-Dimensional Type casting \u2705 Inner Class \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Final Keyword Access mechanism in Java \u2705 \u2705 \u2705 Static members \u2705 Static member variable \u2705 Abstract Methods and Classes Runtime Polymorphism in Java Wrapper Classes Inheritance Packages Dynamic Dispatching Casting Abstract Classes","title":"Short Notes"},{"location":"exams/examQuestions/ProgrammingQuestions/","text":"\u2705 in questions denotes the no of question appearence. More the tick in question, possess high importance from examination point of view. Chapter 1 Write a program to sort any five names in alphabetical order. Write a program to print \u201cHello Nepal\u201d in console. \u2705 class Two { public static void main ( String [] args ) { System . out . println ( \"Hello Nepal\" ); } } Write a program to show usage of various data types in Java. Write a function that takes an array of integers as an argument and returns sum of even numbers in that array. class Four { public static void main ( String [] args ) { int [] array = { 1 , 2 , 3 , 4 , 5 }; int sum = sumArray ( array ); System . out . println ( \"Sum : \" + sum ); } public static int sumArray ( int [] array ){ int sum = 0 ; for ( int num : array ){ sum += num ; } return sum ; } } Write a program to generate the following triangle using for loop. 1 0 1 1 0 1 0 1 0 1 class Five { public static void main ( String [] args ){ for ( int i = 1 ; i <= 4 ; i ++ ){ // First we are running loop from 1 to 4. for ( int j = 0 ; j < i ; j ++ ){ // Then we are running loop from 0 until i. System . out . print (( j + i ) % 2 + \" \" ); // Sum of i and j modulus of 2 equals the alternate of 1 and 0. } System . out . println (); } } } // Practiced Algorithms // System.out.print((int)(temp+Math.pow(-1,j))+\" \"); // (int)(+Math.pow(-1,)) // System.out.print((j+1)%2+\" \"); Chapter 2 Write a program which has two classes A and B, where A should act as Parent class and B should inherit from A. class A { void display (){ System . out . println ( \"This is from class A\" ); } } class B extends A { void display (){ System . out . println ( \"This is from class B\" ); } } class Demo { public static void main ( String [] args ){ A aObject = new A (); B bObject = new B (); aObject . display (); bObject . display (); // bObject.super.display(); } } Create a class Employee with id, name, post and salary . Create parameterized constructor to initialize the instance variables. Override the toString( ) method to display the employee details. class Employee { private int id ; private String name ; private String post ; private double salary ; Employee ( int id , String name , String post , double salary ) { this . id = id ; this . name = name ; this . post = post ; this . salary = salary ; } // This overrides the toString() method. // Returns a string representation of the object. In general, the toString // method returns a string that \"textually represents\" this object. The result // should be a concise but informative representation that is easy for a person // to read. It is recommended that all subclasses override this method. public String toString () { return \"ID : \" + this . id + \"\\nName : \" + this . name + \"\\nPost : \" + this . post + \"\\nSalary : \" + this . salary ; } } class Two { public static void main ( String [] args ) { Employee employeeOne = new Employee ( 12 , \"Arjun\" , \"Manager\" , 12345.90 ); String employee = employeeOne . toString (); System . out . println ( employee ); } } // System.out.println(\"ID : \"+id); // System.out.println(\"Name : \"+name); // System.out.println(\"Post : \"+post); // System.out.println(\"Salary : \"+salary); Create a class Parts with instance variable sno, name, model, price , constructors to initialize the object, a method to calculate commission which calculates 10% of the price of each item and a method to display the details. Derive a new class PartsVAT with a method to calculate 13% VAT of the item. Write necessary constructors to that use the super constructors. Test the classes using a main method in third classes. class Parts { private int sno ; private String name ; private String model ; private double price ; Parts ( int sno , String name , String model , double price ) { this . sno = sno ; this . name = name ; this . model = model ; this . price = price ; } public int getSno () { return sno ; } public String getName () { return name ; } public double getPrice () { return price ; } public String getModel () { return model ; } public double tax () { return 0.1 * this . price ; } public void display () { System . out . println ( \"\\nS.N. : \" + this . getSno () + \"\\nName : \" + this . getName () + \"\\nModel : \" + this . getModel () + \"\\nPirce : \" + this . getPrice () + \"\\nTax : \" + this . tax ()); } } class PartsVAT extends Parts { PartsVAT ( int sno , String name , String model , double price ) { super ( sno , name , model , price ); } public double tax () { return 0.13 * getPrice (); } public void display () { System . out . println ( \"\\nS.N. : \" + this . getSno () + \"\\nName : \" + this . getName () + \"\\nModel : \" + this . getModel () + \"\\nPirce : \" + this . getPrice () + \"\\nTax : \" + this . tax ()); } } class Three { public static void main ( String [] args ){ PartsVAT obj = new PartsVAT ( 12 , \"Tesla\" , \"Y\" , 400000.00d ); obj . display (); Parts objOne = new Parts ( 11 , \"Audi\" , \"R8\" , 650000.00d ); objOne . display (); } } Write an interface Exam with a method pass (int pass) that returns a Boolean. Write another interface Classify with a method division (int average) which returns a string. Write class Result which implements both Exams and Classify. The pass method should return true if score is greater than 50 otherwise false. The division method must return \u201cFirst\u201d when average is more than 80, \u201cSecond when average is more than 50 otherwise \u201dNo Divison\u201d. interface Exam { public boolean pass ( int average ); } interface Classify { public String division ( int average ); } public class Result implements Exam , Classify { public boolean pass ( int average ) { // Interface implement garda method ko agadi jahile pani public rakhne natra \"attempting to assign weaker access privileges; was public\" error message aaucha. if ( average > 50 ) { return true ; } else { return false ; } } public String division ( int average ) { if ( average > 80 ) { return \"First Division\" ; } else if ( average > 50 ) { return \"Second Division\" ; } else { return \"No Division\" ; } } } class ResultDemo { public static void main ( String [] args ) { Result resultObj = new Result (); int average = 45 ; boolean pass = resultObj . pass ( average ); String div = resultObj . division ( average ); System . out . println ( \"Pass : \" + pass + \"\\nDivision : \" + div ); } } Write a Java program to demonstrate runtime polymorphism via method overriding. Write the following classes: Animal as a base class, Cat (derived class of Animal) and Cow (derived class of Animal). Write a method eat( ) in Animal class and override that method in the derived classes. abstract class Animal { // Define a abstract class. abstract void eat (); // Define a abstract method. } class Cat extends Animal { void eat (){ // Override it. System . out . println ( \"Cat is eating.\" ); } } class Cow extends Animal { void eat (){ // Override it. System . out . println ( \"Animal is eating.\" ); } } class Five { public static void main ( String [] args ){ Animal referrer = new Cat (); // Create referrer object of Parent abstract class. referrer . eat (); referrer = new Cow (); referrer . eat (); } } Implement an abstract class named Person and two subclasses named Student and Employee in Java. A person has a name, address, phone number and e-mail address . A student has a class status (freshman, sophomore, junior or senior) . Define the status as a constant. An employee has an office, salary and date-hired . Implement the above classes in Java. Provide Constructors for classes to initialize private variables. Override the toString( ) methods in each class to display class name and the person\u2019s name. Write an application to create objects of type Student and Employee and print the person\u2019s name and the class name of the objects. abstract class Person { String name , address , phoneNumber , email ; Person ( String name , String address , String phoneNumber , String email ) { this . name = name ; this . address = address ; this . phoneNumber = phoneNumber ; this . email = email ; } abstract public String toString (); } class Student extends Person { final String status ; // Provide status as (freshman, sophomore, junior or senior.) Student ( String name , String address , String phoneNumber , String email , String status ) { super ( name , address , phoneNumber , email ); this . status = status ; } @Override public String toString () { return \"Class Name: \" + this . getClass (). getName () + \"\\nName: \" + this . name ; } } class Employee extends Person { String office , salary , dateHired ; Employee ( String name , String address , String phoneNumber , String email , String office , String salary , String dateHired ) { super ( name , address , phoneNumber , email ); this . office = office ; this . salary = salary ; this . dateHired = dateHired ; } @Override public String toString () { return \"Class Name: \" + this . getClass (). getName () + \"\\nName: \" + this . name ; } } public class Six { public static void main ( String [] args ) { Student studentOne = new Student ( \"Arjun Adhikari\" , \"Pokhara\" , \"9800011111\" , \"mailarjunadhikari@gmail.com\" , \"Senior\" ); Employee employeeOne = new Employee ( \"Anil Adhikari\" , \"Pokhara\" , \"982211111\" , \"mailaniladhikari@gmail.com\" , \"Human Resources\" , \"234454.90\" , \"1 January 2019\" ); String display = studentOne . toString (); System . out . println ( display ); display = employeeOne . toString (); System . out . println ( display ); } } Implement an abstract class named Book and two other subclasses named Novel and Magazine. A Book has a name, author, total page and publisher . Book has an abstract method called getBookType( ) . Novel and Magazine have field to determine their type. Implement the above classes in Java. Provide constructors for classes to private variables. abstract class Book { private String name ; private String author ; private int totalPage ; private String publisher ; Book ( String name , String author , int totalPage , String publisher ) { this . name = name ; this . author = author ; this . totalPage = totalPage ; this . publisher = publisher ; } public String getName () { return name ; } public String getAuthor () { return author ; } public int getTotalPage () { return totalPage ; } public String getPublisher () { return publisher ; } abstract void getBookType (); // Abstract Method } class Novel extends Book { Novel ( String name , String author , int totalPage , String publisher ) { super ( name , author , totalPage , publisher ); } void getBookType () { System . out . println ( \"Book Type : \" + this . getClass ()); System . out . println ( \"Name : \" + getName ()); System . out . println ( \"Author : \" + getAuthor ()); System . out . println ( \"Total Page : \" + getTotalPage ()); System . out . println ( \"Publisher: \" + getPublisher ()); } } class Magazine extends Book { Magazine ( String name , String author , int totalPage , String publisher ) { super ( name , author , totalPage , publisher ); } void getBookType () { System . out . println ( \"Book Type : \" + this . getClass (). getName ()); // This returns the class type System . out . println ( \"Name : \" + getName ()); System . out . println ( \"Author : \" + getAuthor ()); System . out . println ( \"Total Page : \" + getTotalPage ()); System . out . println ( \"Publisher: \" + getPublisher ()); } } class Seven { public static void main ( String [] args ){ Magazine magazineOne = new Magazine ( \"TIME\" , \"Time Editorial\" , 61 , \"Time Publishers\" ); magazineOne . getBookType (); } } Make a class Human with a name and age . Make a class Employee inherit from Human . Add instance variable salary of double. Supply a method showData( ) that prints the Employee\u2019s name, age , and salary . Make a class Manager inherit from Employee. Supply appropriate showData( ) methods for all classes. Provide a test program that tests these classes and methods. class Human { private String name ; private int age ; Human ( String name , int age ) { this . name = name ; this . age = age ; } public void display () { System . out . println ( \"Name : \" + name ); System . out . println ( \"Age : \" + age ); } } class Employee extends Human { private double salary ; Employee ( String name , int age , double salary ){ super ( name , age ); this . salary = salary ; } public void display () { super . display (); System . out . println ( \"Salary : \" + salary ); } } class Manager extends Employee { Manager ( String name , int age , double salary ){ super ( name , age , salary ); } public void display () { super . display (); } } class Eight { public static void main ( String [] args ) { Human humanOne = new Human ( \"Arjun\" , 19 ); humanOne . display (); Employee employeeOne = new Employee ( \"Hari\" , 45 , 21312.90 ); employeeOne . display (); Manager managerOne = new Manager ( \"Hari Nath\" , 45 , 21312.90 ); managerOne . display (); } } Create a class MyClass in a package MyPack . Import newly created class MyClass form IpmClass . Chapter 3 Write a program to input an integer from keyboard and print it on the console. Fire an exception if the input is other than integer using try and catch. Write a program to create your own Arithmetic Exception. Chapter 4 Write a program in Java to read a line of string in console mode and display same line as output. \u2705 \u2705 \u2705 \u2705 Write a Java program to access an existing file in to your current directory. Write a program which stores and appends any String value given from keyword into the C:\\store.txt . Write a program to read a text file and display the content on screen. Write a program to read two integer numbers from the console using the Input Stream. Calculate their sum display in console. Write a program to store objects of a class Student into a file \u201cstudent.dat\u201d also reads the objects from same file and display the file state of objects on the screen. Handle possible exceptions. Write a program using any stream class for writing text to a file. Write a program to read content from file \u201c abc.txt \u201d and store it in \u201c xyz.txt \u201d. /* Write a program to read content from file abc.txt and store it in xyz.txt. */ import java.io.* ; class DataTransfer { public static void main ( String [] args ) { try { FileReader filereader = new FileReader ( \"abc.txt\" ); FileWriter filewriter = new FileWriter ( \"xyz.txt\" ); int i = filereader . read (); while ( i != - 1 ) { System . out . print (( char ) i ); filewriter . write ( i ); // Appends every time i = filereader . read (); } filereader . close (); filewriter . flush (); filewriter . close (); } catch ( IOException err ){ err . printStackTrace (); } } } Write a program to write \u201c Hello World \u201d in a file abc.txt .","title":"Programming"},{"location":"exams/examQuestions/ProgrammingQuestions/#chapter-1","text":"Write a program to sort any five names in alphabetical order. Write a program to print \u201cHello Nepal\u201d in console. \u2705 class Two { public static void main ( String [] args ) { System . out . println ( \"Hello Nepal\" ); } } Write a program to show usage of various data types in Java. Write a function that takes an array of integers as an argument and returns sum of even numbers in that array. class Four { public static void main ( String [] args ) { int [] array = { 1 , 2 , 3 , 4 , 5 }; int sum = sumArray ( array ); System . out . println ( \"Sum : \" + sum ); } public static int sumArray ( int [] array ){ int sum = 0 ; for ( int num : array ){ sum += num ; } return sum ; } } Write a program to generate the following triangle using for loop. 1 0 1 1 0 1 0 1 0 1 class Five { public static void main ( String [] args ){ for ( int i = 1 ; i <= 4 ; i ++ ){ // First we are running loop from 1 to 4. for ( int j = 0 ; j < i ; j ++ ){ // Then we are running loop from 0 until i. System . out . print (( j + i ) % 2 + \" \" ); // Sum of i and j modulus of 2 equals the alternate of 1 and 0. } System . out . println (); } } } // Practiced Algorithms // System.out.print((int)(temp+Math.pow(-1,j))+\" \"); // (int)(+Math.pow(-1,)) // System.out.print((j+1)%2+\" \");","title":"Chapter 1"},{"location":"exams/examQuestions/ProgrammingQuestions/#chapter-2","text":"Write a program which has two classes A and B, where A should act as Parent class and B should inherit from A. class A { void display (){ System . out . println ( \"This is from class A\" ); } } class B extends A { void display (){ System . out . println ( \"This is from class B\" ); } } class Demo { public static void main ( String [] args ){ A aObject = new A (); B bObject = new B (); aObject . display (); bObject . display (); // bObject.super.display(); } } Create a class Employee with id, name, post and salary . Create parameterized constructor to initialize the instance variables. Override the toString( ) method to display the employee details. class Employee { private int id ; private String name ; private String post ; private double salary ; Employee ( int id , String name , String post , double salary ) { this . id = id ; this . name = name ; this . post = post ; this . salary = salary ; } // This overrides the toString() method. // Returns a string representation of the object. In general, the toString // method returns a string that \"textually represents\" this object. The result // should be a concise but informative representation that is easy for a person // to read. It is recommended that all subclasses override this method. public String toString () { return \"ID : \" + this . id + \"\\nName : \" + this . name + \"\\nPost : \" + this . post + \"\\nSalary : \" + this . salary ; } } class Two { public static void main ( String [] args ) { Employee employeeOne = new Employee ( 12 , \"Arjun\" , \"Manager\" , 12345.90 ); String employee = employeeOne . toString (); System . out . println ( employee ); } } // System.out.println(\"ID : \"+id); // System.out.println(\"Name : \"+name); // System.out.println(\"Post : \"+post); // System.out.println(\"Salary : \"+salary); Create a class Parts with instance variable sno, name, model, price , constructors to initialize the object, a method to calculate commission which calculates 10% of the price of each item and a method to display the details. Derive a new class PartsVAT with a method to calculate 13% VAT of the item. Write necessary constructors to that use the super constructors. Test the classes using a main method in third classes. class Parts { private int sno ; private String name ; private String model ; private double price ; Parts ( int sno , String name , String model , double price ) { this . sno = sno ; this . name = name ; this . model = model ; this . price = price ; } public int getSno () { return sno ; } public String getName () { return name ; } public double getPrice () { return price ; } public String getModel () { return model ; } public double tax () { return 0.1 * this . price ; } public void display () { System . out . println ( \"\\nS.N. : \" + this . getSno () + \"\\nName : \" + this . getName () + \"\\nModel : \" + this . getModel () + \"\\nPirce : \" + this . getPrice () + \"\\nTax : \" + this . tax ()); } } class PartsVAT extends Parts { PartsVAT ( int sno , String name , String model , double price ) { super ( sno , name , model , price ); } public double tax () { return 0.13 * getPrice (); } public void display () { System . out . println ( \"\\nS.N. : \" + this . getSno () + \"\\nName : \" + this . getName () + \"\\nModel : \" + this . getModel () + \"\\nPirce : \" + this . getPrice () + \"\\nTax : \" + this . tax ()); } } class Three { public static void main ( String [] args ){ PartsVAT obj = new PartsVAT ( 12 , \"Tesla\" , \"Y\" , 400000.00d ); obj . display (); Parts objOne = new Parts ( 11 , \"Audi\" , \"R8\" , 650000.00d ); objOne . display (); } } Write an interface Exam with a method pass (int pass) that returns a Boolean. Write another interface Classify with a method division (int average) which returns a string. Write class Result which implements both Exams and Classify. The pass method should return true if score is greater than 50 otherwise false. The division method must return \u201cFirst\u201d when average is more than 80, \u201cSecond when average is more than 50 otherwise \u201dNo Divison\u201d. interface Exam { public boolean pass ( int average ); } interface Classify { public String division ( int average ); } public class Result implements Exam , Classify { public boolean pass ( int average ) { // Interface implement garda method ko agadi jahile pani public rakhne natra \"attempting to assign weaker access privileges; was public\" error message aaucha. if ( average > 50 ) { return true ; } else { return false ; } } public String division ( int average ) { if ( average > 80 ) { return \"First Division\" ; } else if ( average > 50 ) { return \"Second Division\" ; } else { return \"No Division\" ; } } } class ResultDemo { public static void main ( String [] args ) { Result resultObj = new Result (); int average = 45 ; boolean pass = resultObj . pass ( average ); String div = resultObj . division ( average ); System . out . println ( \"Pass : \" + pass + \"\\nDivision : \" + div ); } } Write a Java program to demonstrate runtime polymorphism via method overriding. Write the following classes: Animal as a base class, Cat (derived class of Animal) and Cow (derived class of Animal). Write a method eat( ) in Animal class and override that method in the derived classes. abstract class Animal { // Define a abstract class. abstract void eat (); // Define a abstract method. } class Cat extends Animal { void eat (){ // Override it. System . out . println ( \"Cat is eating.\" ); } } class Cow extends Animal { void eat (){ // Override it. System . out . println ( \"Animal is eating.\" ); } } class Five { public static void main ( String [] args ){ Animal referrer = new Cat (); // Create referrer object of Parent abstract class. referrer . eat (); referrer = new Cow (); referrer . eat (); } } Implement an abstract class named Person and two subclasses named Student and Employee in Java. A person has a name, address, phone number and e-mail address . A student has a class status (freshman, sophomore, junior or senior) . Define the status as a constant. An employee has an office, salary and date-hired . Implement the above classes in Java. Provide Constructors for classes to initialize private variables. Override the toString( ) methods in each class to display class name and the person\u2019s name. Write an application to create objects of type Student and Employee and print the person\u2019s name and the class name of the objects. abstract class Person { String name , address , phoneNumber , email ; Person ( String name , String address , String phoneNumber , String email ) { this . name = name ; this . address = address ; this . phoneNumber = phoneNumber ; this . email = email ; } abstract public String toString (); } class Student extends Person { final String status ; // Provide status as (freshman, sophomore, junior or senior.) Student ( String name , String address , String phoneNumber , String email , String status ) { super ( name , address , phoneNumber , email ); this . status = status ; } @Override public String toString () { return \"Class Name: \" + this . getClass (). getName () + \"\\nName: \" + this . name ; } } class Employee extends Person { String office , salary , dateHired ; Employee ( String name , String address , String phoneNumber , String email , String office , String salary , String dateHired ) { super ( name , address , phoneNumber , email ); this . office = office ; this . salary = salary ; this . dateHired = dateHired ; } @Override public String toString () { return \"Class Name: \" + this . getClass (). getName () + \"\\nName: \" + this . name ; } } public class Six { public static void main ( String [] args ) { Student studentOne = new Student ( \"Arjun Adhikari\" , \"Pokhara\" , \"9800011111\" , \"mailarjunadhikari@gmail.com\" , \"Senior\" ); Employee employeeOne = new Employee ( \"Anil Adhikari\" , \"Pokhara\" , \"982211111\" , \"mailaniladhikari@gmail.com\" , \"Human Resources\" , \"234454.90\" , \"1 January 2019\" ); String display = studentOne . toString (); System . out . println ( display ); display = employeeOne . toString (); System . out . println ( display ); } } Implement an abstract class named Book and two other subclasses named Novel and Magazine. A Book has a name, author, total page and publisher . Book has an abstract method called getBookType( ) . Novel and Magazine have field to determine their type. Implement the above classes in Java. Provide constructors for classes to private variables. abstract class Book { private String name ; private String author ; private int totalPage ; private String publisher ; Book ( String name , String author , int totalPage , String publisher ) { this . name = name ; this . author = author ; this . totalPage = totalPage ; this . publisher = publisher ; } public String getName () { return name ; } public String getAuthor () { return author ; } public int getTotalPage () { return totalPage ; } public String getPublisher () { return publisher ; } abstract void getBookType (); // Abstract Method } class Novel extends Book { Novel ( String name , String author , int totalPage , String publisher ) { super ( name , author , totalPage , publisher ); } void getBookType () { System . out . println ( \"Book Type : \" + this . getClass ()); System . out . println ( \"Name : \" + getName ()); System . out . println ( \"Author : \" + getAuthor ()); System . out . println ( \"Total Page : \" + getTotalPage ()); System . out . println ( \"Publisher: \" + getPublisher ()); } } class Magazine extends Book { Magazine ( String name , String author , int totalPage , String publisher ) { super ( name , author , totalPage , publisher ); } void getBookType () { System . out . println ( \"Book Type : \" + this . getClass (). getName ()); // This returns the class type System . out . println ( \"Name : \" + getName ()); System . out . println ( \"Author : \" + getAuthor ()); System . out . println ( \"Total Page : \" + getTotalPage ()); System . out . println ( \"Publisher: \" + getPublisher ()); } } class Seven { public static void main ( String [] args ){ Magazine magazineOne = new Magazine ( \"TIME\" , \"Time Editorial\" , 61 , \"Time Publishers\" ); magazineOne . getBookType (); } } Make a class Human with a name and age . Make a class Employee inherit from Human . Add instance variable salary of double. Supply a method showData( ) that prints the Employee\u2019s name, age , and salary . Make a class Manager inherit from Employee. Supply appropriate showData( ) methods for all classes. Provide a test program that tests these classes and methods. class Human { private String name ; private int age ; Human ( String name , int age ) { this . name = name ; this . age = age ; } public void display () { System . out . println ( \"Name : \" + name ); System . out . println ( \"Age : \" + age ); } } class Employee extends Human { private double salary ; Employee ( String name , int age , double salary ){ super ( name , age ); this . salary = salary ; } public void display () { super . display (); System . out . println ( \"Salary : \" + salary ); } } class Manager extends Employee { Manager ( String name , int age , double salary ){ super ( name , age , salary ); } public void display () { super . display (); } } class Eight { public static void main ( String [] args ) { Human humanOne = new Human ( \"Arjun\" , 19 ); humanOne . display (); Employee employeeOne = new Employee ( \"Hari\" , 45 , 21312.90 ); employeeOne . display (); Manager managerOne = new Manager ( \"Hari Nath\" , 45 , 21312.90 ); managerOne . display (); } } Create a class MyClass in a package MyPack . Import newly created class MyClass form IpmClass .","title":"Chapter 2"},{"location":"exams/examQuestions/ProgrammingQuestions/#chapter-3","text":"Write a program to input an integer from keyboard and print it on the console. Fire an exception if the input is other than integer using try and catch. Write a program to create your own Arithmetic Exception.","title":"Chapter 3"},{"location":"exams/examQuestions/ProgrammingQuestions/#chapter-4","text":"Write a program in Java to read a line of string in console mode and display same line as output. \u2705 \u2705 \u2705 \u2705 Write a Java program to access an existing file in to your current directory. Write a program which stores and appends any String value given from keyword into the C:\\store.txt . Write a program to read a text file and display the content on screen. Write a program to read two integer numbers from the console using the Input Stream. Calculate their sum display in console. Write a program to store objects of a class Student into a file \u201cstudent.dat\u201d also reads the objects from same file and display the file state of objects on the screen. Handle possible exceptions. Write a program using any stream class for writing text to a file. Write a program to read content from file \u201c abc.txt \u201d and store it in \u201c xyz.txt \u201d. /* Write a program to read content from file abc.txt and store it in xyz.txt. */ import java.io.* ; class DataTransfer { public static void main ( String [] args ) { try { FileReader filereader = new FileReader ( \"abc.txt\" ); FileWriter filewriter = new FileWriter ( \"xyz.txt\" ); int i = filereader . read (); while ( i != - 1 ) { System . out . print (( char ) i ); filewriter . write ( i ); // Appends every time i = filereader . read (); } filereader . close (); filewriter . flush (); filewriter . close (); } catch ( IOException err ){ err . printStackTrace (); } } } Write a program to write \u201c Hello World \u201d in a file abc.txt .","title":"Chapter 4"},{"location":"exception/","text":"Exception Handling Exception is an abnormal condition that arises in a code sequence at run time. When an exceptional condition arises, an object representing that exception is created and thrown in the method that caused the error. Exceptions can be generated by : Java run-time system Exceptions thrown by Java relate to fundamental errors that violate the rules of Java language or the constraints of Java execution environment. Can be manually generated by your code. Java exception handling is managed via five keywords: 1. try 2. throw 3. catch 4. throws 5. finally Exception is recoverable. Error is non-recoverable. Eg: lack of resources \u27a1 Our of memory. Under Runtime Exception 1. Arithmetic Exception 2. Null Pointer Exception Uncaught Exceptions: class Exception{ public static void main(String[] args){ int d = 0; int a = 42 / d; } } Array Out of Bound Exception Here, java runtime system detects the attemps to divide by zero, it constructs a new exception object and then throws this exception. This causes the execution of Exception class to stop because once an exception has been thrown , it must be caught by an exception handler and dealed with immediately. Here we haven't supplied any exception handlers of our own, so the exception is caught by the default handler provided by Java Runtime System.","title":"Exception Handling"},{"location":"exception/#exception-handling","text":"Exception is an abnormal condition that arises in a code sequence at run time. When an exceptional condition arises, an object representing that exception is created and thrown in the method that caused the error. Exceptions can be generated by : Java run-time system Exceptions thrown by Java relate to fundamental errors that violate the rules of Java language or the constraints of Java execution environment. Can be manually generated by your code. Java exception handling is managed via five keywords: 1. try 2. throw 3. catch 4. throws 5. finally Exception is recoverable. Error is non-recoverable. Eg: lack of resources \u27a1 Our of memory. Under Runtime Exception 1. Arithmetic Exception 2. Null Pointer Exception","title":"Exception Handling"},{"location":"exception/#uncaught-exceptions","text":"class Exception{ public static void main(String[] args){ int d = 0; int a = 42 / d; } }","title":"Uncaught Exceptions:"},{"location":"exception/#array-out-of-bound-exception","text":"Here, java runtime system detects the attemps to divide by zero, it constructs a new exception object and then throws this exception. This causes the execution of Exception class to stop because once an exception has been thrown , it must be caught by an exception handler and dealed with immediately. Here we haven't supplied any exception handlers of our own, so the exception is caught by the default handler provided by Java Runtime System.","title":"Array Out of Bound Exception"},{"location":"exception/ChainedException/","text":"Chained Exceptions allow to associate another exception with an exception. To allow chained Exceptions, two constructors and two methods are added to Throwable. Throwable (Throwable cause Exception) Throwable (String message, Throwable cause Exception) Two methods used are: Throwable getCause() Throwable initCause (Throwable causeException)","title":"Chained Exceptions"},{"location":"exception/ChainedException/#chained-exceptions","text":"allow to associate another exception with an exception. To allow chained Exceptions, two constructors and two methods are added to Throwable. Throwable (Throwable cause Exception) Throwable (String message, Throwable cause Exception) Two methods used are: Throwable getCause() Throwable initCause (Throwable causeException)","title":"Chained Exceptions"},{"location":"exception/NestedTry/","text":"Nested Try Statement The try statement can be nested i.e , a try can be inside the block of another try. Each time a try statement is entered, the contact of that exception is pushed in the track. If an inner try statement doesn't have a catch handler for particular exception, the stack is unwound and the next try statement catch handler are inspected for a match. This continues until one of the catch statement succeeds or until all of the nested try statments are exhausted. If no catch statements matches then the Java Runtime System will handle the exception.","title":"Nested Try Statement"},{"location":"exception/NestedTry/#nested-try-statement","text":"The try statement can be nested i.e , a try can be inside the block of another try. Each time a try statement is entered, the contact of that exception is pushed in the track. If an inner try statement doesn't have a catch handler for particular exception, the stack is unwound and the next try statement catch handler are inspected for a match. This continues until one of the catch statement succeeds or until all of the nested try statments are exhausted. If no catch statements matches then the Java Runtime System will handle the exception.","title":"Nested Try Statement"},{"location":"exception/builtIn/","text":"Java's Built-in Exceptions java.lang Most general of these exceptions are subclasses of the standard type RuntimeException. Checked Exception That must be included in a method's throw list if that method can generate one of these Exception and does not handle itself. eg: ClassNotFOundException, IllegalAccessException Unchecked Exception These exceptio need not be included in any method's throw list. Compiler doesn't check to see if a method handles or throw these exception. eg: ArithmeticException, ArrayIndexOutofBoundsException","title":"Index"},{"location":"exception/builtIn/#javas-built-in-exceptions","text":"java.lang Most general of these exceptions are subclasses of the standard type RuntimeException. Checked Exception That must be included in a method's throw list if that method can generate one of these Exception and does not handle itself. eg: ClassNotFOundException, IllegalAccessException Unchecked Exception These exceptio need not be included in any method's throw list. Compiler doesn't check to see if a method handles or throw these exception. eg: ArithmeticException, ArrayIndexOutofBoundsException","title":"Java's Built-in Exceptions"},{"location":"exception/finally/","text":"Finally When exceptions are thrown, execution in a method takes a rather abrupt, nonlinear path that alters the normal flow through the method. Depending upon how the method is coded, it is even possible for an exception to cause the method to return prematurely. This could be a problem in some methods. The finally keyword is designed to address this kind of problems. finally creates a block of code that will be executed after a try catch block has completed and before the code following the try catch block. The finally block will be executed whether or not an exception is thrown. If an exception is thrown the finally block will execute even if no catch statement matches the exception. This can be useful for closing file handles and freeing up any other resources. finally block is optional. Note Each try statments requires at least one catch or finally clause.","title":"Finally"},{"location":"exception/finally/#finally","text":"When exceptions are thrown, execution in a method takes a rather abrupt, nonlinear path that alters the normal flow through the method. Depending upon how the method is coded, it is even possible for an exception to cause the method to return prematurely. This could be a problem in some methods. The finally keyword is designed to address this kind of problems. finally creates a block of code that will be executed after a try catch block has completed and before the code following the try catch block. The finally block will be executed whether or not an exception is thrown. If an exception is thrown the finally block will execute even if no catch statement matches the exception. This can be useful for closing file handles and freeing up any other resources. finally block is optional. Note Each try statments requires at least one catch or finally clause.","title":"Finally"},{"location":"exception/throw/","text":"Throw So far, you have only been catching exceptions that are thrown by the Java run-time system. However, it is possible to throw an exception explicitly, using throw statement. General Form : throw throwableInstance; Here, ThrowableInstance must be an object of type Throwable or a subclass of Throwable. There are two ways you can obtain a Throwable Object. Using a parameter in catch clause Creating one with the new operator. The flow of execution stops immediately after the throw statement; any subsequent statements are not executed. The nearest enclosing try block is inspected to see if it has a catch statement that matches the type of exception. It if does find a match, control is transferred to that statement. If not, then the next enclosing try statement is inspected and so on. If no matching catch is found, then the default exception handler halts the program and prints the stack trace. // Error aauni wala","title":"Throw"},{"location":"exception/throw/#throw","text":"So far, you have only been catching exceptions that are thrown by the Java run-time system. However, it is possible to throw an exception explicitly, using throw statement.","title":"Throw"},{"location":"exception/throw/#general-form","text":"throw throwableInstance; Here, ThrowableInstance must be an object of type Throwable or a subclass of Throwable. There are two ways you can obtain a Throwable Object. Using a parameter in catch clause Creating one with the new operator. The flow of execution stops immediately after the throw statement; any subsequent statements are not executed. The nearest enclosing try block is inspected to see if it has a catch statement that matches the type of exception. It if does find a match, control is transferred to that statement. If not, then the next enclosing try statement is inspected and so on. If no matching catch is found, then the default exception handler halts the program and prints the stack trace. // Error aauni wala","title":"General Form :"},{"location":"exception/throws/","text":"Throws If a method is capable of causing an exception that it doesn't handle, it must specify this behaviour so that colors of the method can guard themself against that exception you do this by including a throws clause in the method declaration. A throw clause lists the type of exception that a method might throw. This is necessary for all exception, except those of type Error and or runtime Exception or any of their subclasses. All other exception that a method can throw must be declared in throw clause. If they are not, a compile time error will occur. General Form : type methodName (parameter list) throws exceptionList{ / Exception 1, Exception 2 ... etc. // code goes here }","title":"Throws"},{"location":"exception/throws/#throws","text":"If a method is capable of causing an exception that it doesn't handle, it must specify this behaviour so that colors of the method can guard themself against that exception you do this by including a throws clause in the method declaration. A throw clause lists the type of exception that a method might throw. This is necessary for all exception, except those of type Error and or runtime Exception or any of their subclasses. All other exception that a method can throw must be declared in throw clause. If they are not, a compile time error will occur.","title":"Throws"},{"location":"exception/throws/#general-form","text":"type methodName (parameter list) throws exceptionList{ / Exception 1, Exception 2 ... etc. // code goes here }","title":"General Form :"},{"location":"general/","text":"General Java Questions Write a program that accepts a number and checks if it equal to the sum of any two numbers in array divided by two. If it doesn't contains such numbers, it should print message to user \" No such numbers found in array \". Link to the answer : Click here","title":"General Java Questions"},{"location":"general/#general-java-questions","text":"Write a program that accepts a number and checks if it equal to the sum of any two numbers in array divided by two. If it doesn't contains such numbers, it should print message to user \" No such numbers found in array \". Link to the answer : Click here","title":"General Java Questions"},{"location":"graphics/","text":"Graphics Context and Graphics Object A graphics context enables drawing on the screen. A Graphics object manages a graphics context and draws pixels pn the screen that represent text and other graphical objects (lines, ellipses, rectangles and polygons.) Graphics object contain methods for drawing, font manipulation, color manipulation. Methods that takes Graphics object as an argument public void paint(Graphics g) The paint() method of the Component class takes a Graphics object as a argument. This object is passed to the paint method by the system when a paint() method by the system when a paint operation is required for a component. The paint() method defined in class Component does nothing by default, it must be overridden by the programmer. The paint() method is rarely called directly by the programmer. When an applet executes, the paint() method is automatically caused. Similarly, when any component is displayed, that component's paint method is called automatically. A. public void repaint() - If the progammer needs to call paint() , a call is made to the Component class repaint() method. - The paint method request a call to the Component 's update method. public void update() In AWT GUI Components, the update() clears the background of GUI components. public void paintComponent(Graphics g) Swing components the inherit from the class JComponent contain method paintComponent() that helps them to draw properly in the context of a swing GUI.","title":"Graphics Context and Graphics Object"},{"location":"graphics/#graphics-context-and-graphics-object","text":"A graphics context enables drawing on the screen. A Graphics object manages a graphics context and draws pixels pn the screen that represent text and other graphical objects (lines, ellipses, rectangles and polygons.) Graphics object contain methods for drawing, font manipulation, color manipulation.","title":"Graphics Context and Graphics Object"},{"location":"graphics/#methods-that-takes-graphics-object-as-an-argument","text":"public void paint(Graphics g) The paint() method of the Component class takes a Graphics object as a argument. This object is passed to the paint method by the system when a paint() method by the system when a paint operation is required for a component. The paint() method defined in class Component does nothing by default, it must be overridden by the programmer. The paint() method is rarely called directly by the programmer. When an applet executes, the paint() method is automatically caused. Similarly, when any component is displayed, that component's paint method is called automatically. A. public void repaint() - If the progammer needs to call paint() , a call is made to the Component class repaint() method. - The paint method request a call to the Component 's update method. public void update() In AWT GUI Components, the update() clears the background of GUI components. public void paintComponent(Graphics g) Swing components the inherit from the class JComponent contain method paintComponent() that helps them to draw properly in the context of a swing GUI.","title":"Methods that takes Graphics object as an argument"},{"location":"graphics/color/","text":"Color Control Color constants and their RGB values Constant RGB Value public static final Color RED 255,0,0 public static final Color GREEN 0,255,0 public static final Color BLUE 0,0,255 public static final Color ORANGE 255,200,0 public static final Color PINK 255,75,175 public static final Color CYAN 0,255,255 public static final Color MAGNETA 255,0,255 public static final Color YELLOW 255,255,0 public static final Color BLACK 0,0,0 public static final Color WHITE 255,255,255 public static final Color GRAY 128,128,128 public static final Color LIGHT_GRAY 192,192,192 public static final Color DARK_GRAY 64,64,64","title":"Color Control"},{"location":"graphics/color/#color-control","text":"Color constants and their RGB values Constant RGB Value public static final Color RED 255,0,0 public static final Color GREEN 0,255,0 public static final Color BLUE 0,0,255 public static final Color ORANGE 255,200,0 public static final Color PINK 255,75,175 public static final Color CYAN 0,255,255 public static final Color MAGNETA 255,0,255 public static final Color YELLOW 255,255,0 public static final Color BLACK 0,0,0 public static final Color WHITE 255,255,255 public static final Color GRAY 128,128,128 public static final Color LIGHT_GRAY 192,192,192 public static final Color DARK_GRAY 64,64,64","title":"Color Control"},{"location":"graphics/control/","text":"Color Control Color constants and their RGB values Constant RGB Value public static final Color RED 255,0,0 public static final Color GREEN 0,255,0 public static final Color BLUE 0,0,255 public static final Color ORANGE 255,200,0 public static final Color PINK 255,75,175 public static final Color CYAN 0,255,255 public static final Color MAGNETA 255,0,255 public static final Color YELLOW 255,255,0 public static final Color BLACK 0,0,0 public static final Color WHITE 255,255,255 public static final Color GRAY 128,128,128 public static final Color LIGHT_GRAY 192,192,192 public static final Color DARK_GRAY 64,64,64 Constructors public Color(int r, int g, int b) based on RGB values 0-255 public color(float r, float g, float b) based on 0.0 to 1.0 Methods public int getRed() public int getGreen() public int getBlue() Graphics method for manipulating Colors public int getColor() returns object representing current color for the graphics context. public int setColor(Color c) Sets current color for drawing with the graphics context.","title":"Color Control"},{"location":"graphics/control/#color-control","text":"Color constants and their RGB values Constant RGB Value public static final Color RED 255,0,0 public static final Color GREEN 0,255,0 public static final Color BLUE 0,0,255 public static final Color ORANGE 255,200,0 public static final Color PINK 255,75,175 public static final Color CYAN 0,255,255 public static final Color MAGNETA 255,0,255 public static final Color YELLOW 255,255,0 public static final Color BLACK 0,0,0 public static final Color WHITE 255,255,255 public static final Color GRAY 128,128,128 public static final Color LIGHT_GRAY 192,192,192 public static final Color DARK_GRAY 64,64,64","title":"Color Control"},{"location":"graphics/control/#constructors","text":"public Color(int r, int g, int b) based on RGB values 0-255 public color(float r, float g, float b) based on 0.0 to 1.0","title":"Constructors"},{"location":"graphics/control/#methods","text":"public int getRed() public int getGreen() public int getBlue()","title":"Methods"},{"location":"graphics/control/#graphics-method-for-manipulating-colors","text":"public int getColor() returns object representing current color for the graphics context. public int setColor(Color c) Sets current color for drawing with the graphics context.","title":"Graphics method for manipulating Colors"},{"location":"graphics/font/","text":"Manipulating Fonts Constants public static final int PLAIN public static final int BOLD public static final int ITALIC Graphics methods for manipulating fonts public Font getText() public void setFont(Font f) Constructors public Font(String name, int style, int size) Methods public int getStyle() public int getSize() public String getName() public String getFamily() public boolean isPlain() public boolean isBold() public boolean isItalic()","title":"Manipulating Fonts"},{"location":"graphics/font/#manipulating-fonts","text":"","title":"Manipulating Fonts"},{"location":"graphics/font/#constants","text":"public static final int PLAIN public static final int BOLD public static final int ITALIC","title":"Constants"},{"location":"graphics/font/#graphics-methods-for-manipulating-fonts","text":"public Font getText() public void setFont(Font f)","title":"Graphics methods for manipulating fonts"},{"location":"graphics/font/#constructors","text":"public Font(String name, int style, int size)","title":"Constructors"},{"location":"graphics/font/#methods","text":"public int getStyle() public int getSize() public String getName() public String getFamily() public boolean isPlain() public boolean isBold() public boolean isItalic()","title":"Methods"},{"location":"graphics/font/fontMetrics/","text":"Font Metrics Important for Exam Methods public int getAscent() public int getDescent() public int getLeading() public int getHeight() Graphics Methods for getting a Font's Font Metrics public FontMetrics getFontMetrics() public FontMetrics getFontMetrics(Font f)","title":"Font Metrics"},{"location":"graphics/font/fontMetrics/#font-metrics","text":"Important for Exam","title":"Font Metrics"},{"location":"graphics/font/fontMetrics/#methods","text":"public int getAscent() public int getDescent() public int getLeading() public int getHeight()","title":"Methods"},{"location":"graphics/font/fontMetrics/#graphics-methods-for-getting-a-fonts-font-metrics","text":"public FontMetrics getFontMetrics() public FontMetrics getFontMetrics(Font f)","title":"Graphics Methods for getting a Font's Font Metrics"},{"location":"graphics/geometry/","text":"Geometrical Elements Line public void drawLine(int x1, int y1, int x2, int y2); Rectangle public void drawRect(int x, int y, int width, int height); public void fillRect(int x, int y, int width, int height); public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight); public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight); Oval public void drawOval(int x, int y, int width, int height); public void fillOval(int x, int y, int width, int height); Arc public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle); public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle); Negative angle means rotating clockwise, positive means anti-clockwise. Drawing Polygons and Polylines Polygons are closed multisided shapes composed of straight line segments. Polylines are sequences of connected points. Polygon Constructors public Polygon() public Polygon(int[] xValues, int[] yValues , int numberOfPoint) Methods public void addPoint(int x, int y) To add one point to the existing polygon, we use this method. In Polygon, if the last point is different from the first, the polygon is closed by a line that connects the last point to the first. public Polygon() In Polygon, if the last point is different from the first, the polyline is not closed. Graphics methods for drawing Polygons public void drawPolygon(int []xPoints, int []yPoints, int points); public void drawPolyLine(int []xPoints, int []yPoints, int points); public void drawPolygon(Polygon p); public void fillPolygon(Polygon p); public void fillPolygon(Polygon p);","title":"Geometrical Elements"},{"location":"graphics/geometry/#geometrical-elements","text":"","title":"Geometrical Elements"},{"location":"graphics/geometry/#line","text":"public void drawLine(int x1, int y1, int x2, int y2);","title":"Line"},{"location":"graphics/geometry/#rectangle","text":"public void drawRect(int x, int y, int width, int height); public void fillRect(int x, int y, int width, int height); public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight); public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight);","title":"Rectangle"},{"location":"graphics/geometry/#oval","text":"public void drawOval(int x, int y, int width, int height); public void fillOval(int x, int y, int width, int height);","title":"Oval"},{"location":"graphics/geometry/#arc","text":"public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle); public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle); Negative angle means rotating clockwise, positive means anti-clockwise.","title":"Arc"},{"location":"graphics/geometry/#drawing-polygons-and-polylines","text":"Polygons are closed multisided shapes composed of straight line segments. Polylines are sequences of connected points.","title":"Drawing Polygons and Polylines"},{"location":"graphics/geometry/#polygon-constructors","text":"public Polygon() public Polygon(int[] xValues, int[] yValues , int numberOfPoint)","title":"Polygon Constructors"},{"location":"graphics/geometry/#methods","text":"public void addPoint(int x, int y) To add one point to the existing polygon, we use this method. In Polygon, if the last point is different from the first, the polygon is closed by a line that connects the last point to the first. public Polygon() In Polygon, if the last point is different from the first, the polyline is not closed.","title":"Methods"},{"location":"graphics/geometry/#graphics-methods-for-drawing-polygons","text":"public void drawPolygon(int []xPoints, int []yPoints, int points); public void drawPolyLine(int []xPoints, int []yPoints, int points); public void drawPolygon(Polygon p); public void fillPolygon(Polygon p); public void fillPolygon(Polygon p);","title":"Graphics methods for drawing Polygons"},{"location":"introduction/","text":"Introduction Let's dive alpha : testing in own organization beta : testing in public nightly build : daily build or nightly build is the practice of completing software build of the latest version of program on a daily basis. JEE - Java Enterprise Edition (for enterprise level applications) JSE - Java Standard Edition (for stand alone) JME - Java Micro Edition (for mobiles) History of Java Benefits of Java and its features Simple and easy to learn. Java is almost fully OOP. Java is robust and secure. Architecture neutral and portable. Multithreading Provides High Performance How is Java platform independent? The meaning of platform independent is that, the java source code can run on all operating systems. A program is written in a language which is a human readable language. It may contain words, phrases etc which the machine does not understand. For the source code to be understood by the machine, it needs to be in a language understood by machines, typically a machine-level language. So, here comes the role of a compiler. The compiler converts the high-level language (human language) into a format understood by the machines. Therefore, a compiler is a program that translates the source code for another program from a programming language into executable code. This executable code may be a sequence of machine instructions that can be executed by the CPU directly, or it may be an intermediate representation that is interpreted by a virtual machine. This intermediate representation in Java is the Java Byte Code. Step by step Execution of Java Program Whenever, a program is written in JAVA, the javac compiles it. The result of the JAVA compiler is the .class file or the bytecode and not the machine native code (unlike C compiler). The bytecode generated is a non-executable code and needs an interpreter to execute on a machine. This interpreter is the JVM and thus the Bytecode is executed by the JVM. And finally program runs to give the desired output. Write once, run everytime.","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#lets-dive","text":"alpha : testing in own organization beta : testing in public nightly build : daily build or nightly build is the practice of completing software build of the latest version of program on a daily basis. JEE - Java Enterprise Edition (for enterprise level applications) JSE - Java Standard Edition (for stand alone) JME - Java Micro Edition (for mobiles)","title":"Let's dive"},{"location":"introduction/#history-of-java","text":"","title":"History of Java"},{"location":"introduction/#benefits-of-java-and-its-features","text":"Simple and easy to learn. Java is almost fully OOP. Java is robust and secure. Architecture neutral and portable. Multithreading Provides High Performance How is Java platform independent? The meaning of platform independent is that, the java source code can run on all operating systems. A program is written in a language which is a human readable language. It may contain words, phrases etc which the machine does not understand. For the source code to be understood by the machine, it needs to be in a language understood by machines, typically a machine-level language. So, here comes the role of a compiler. The compiler converts the high-level language (human language) into a format understood by the machines. Therefore, a compiler is a program that translates the source code for another program from a programming language into executable code. This executable code may be a sequence of machine instructions that can be executed by the CPU directly, or it may be an intermediate representation that is interpreted by a virtual machine. This intermediate representation in Java is the Java Byte Code. Step by step Execution of Java Program Whenever, a program is written in JAVA, the javac compiles it. The result of the JAVA compiler is the .class file or the bytecode and not the machine native code (unlike C compiler). The bytecode generated is a non-executable code and needs an interpreter to execute on a machine. This interpreter is the JVM and thus the Bytecode is executed by the JVM. And finally program runs to give the desired output. Write once, run everytime.","title":"Benefits of Java and its features"},{"location":"introduction/DataTypes/","text":"Data Types Java is strongly-typed language. int x = 10.5 ; \u274c boolean b = 0 ; \u274c Java doesn't support 1/0 as boolean data like C/C++ . Every variable and expression has a type. Every type is strictly defined. Every assignment should be checked by compile type compatibility. Note : if ( 1 ){ // Needs true / false. //doesn't run } No operator overloading, multiple inheritance are supported in Java. Syntax: data_type identifier = literal ; ADT - derived from Primitive Data Type and performs action.","title":"Data Types"},{"location":"introduction/DataTypes/#data-types","text":"Java is strongly-typed language. int x = 10.5 ; \u274c boolean b = 0 ; \u274c Java doesn't support 1/0 as boolean data like C/C++ . Every variable and expression has a type. Every type is strictly defined. Every assignment should be checked by compile type compatibility.","title":"Data Types"},{"location":"introduction/DataTypes/#note","text":"if ( 1 ){ // Needs true / false. //doesn't run } No operator overloading, multiple inheritance are supported in Java.","title":"Note :"},{"location":"introduction/DataTypes/#syntax","text":"data_type identifier = literal ; ADT - derived from Primitive Data Type and performs action.","title":"Syntax:"},{"location":"introduction/IDENTIFIER/","text":"Identifier name for program for identification purpose. Can be classname, method name, variable name or label name also. is case sensitive. is any sequence of letters, digits, \" _ \" , \" $ \" characters that doesn't begin with a digit. How many identifier here ? class Hello { public static void main ( String [] args ){ int numOne = 20 ; int numTwo = 10 ; } } String -> Wrapper Class main -> Name of function/identifier args -> arguments (variable, used for passing Command Line Arguments) numOne, numTwo -> Variable Hello -> Class Name username \u2705 #username \u274c num1 \u2705 1num \u274c class Test { int num = 10 ; int NUM = 20 ; int Num = 30 ; } Java is case-sensitive and all three declaration of variables are valid. Notes Identifier length is not limit. Max character - no length limit int while = 20; \u274c int String = 9; \u2705 String is class name, now reserved word.","title":"Identifiers"},{"location":"introduction/IDENTIFIER/#identifier","text":"name for program for identification purpose. Can be classname, method name, variable name or label name also. is case sensitive. is any sequence of letters, digits, \" _ \" , \" $ \" characters that doesn't begin with a digit. How many identifier here ? class Hello { public static void main ( String [] args ){ int numOne = 20 ; int numTwo = 10 ; } } String -> Wrapper Class main -> Name of function/identifier args -> arguments (variable, used for passing Command Line Arguments) numOne, numTwo -> Variable Hello -> Class Name username \u2705 #username \u274c num1 \u2705 1num \u274c class Test { int num = 10 ; int NUM = 20 ; int Num = 30 ; } Java is case-sensitive and all three declaration of variables are valid.","title":"Identifier"},{"location":"introduction/IDENTIFIER/#notes","text":"Identifier length is not limit. Max character - no length limit int while = 20; \u274c int String = 9; \u2705 String is class name, now reserved word.","title":"Notes"},{"location":"introduction/ReservedWord/","text":"Reserved Word Keywords Java reserved words are the words that are reserved by Java functions or other uses that cannot be used as identifiers (e.g., variable names, function names, class names) Keywords are the reserved words that keep special meaning in Java. (e.g. for, int, class ,etc.) They are 53 in number till now. They are 50 in number. All reserved words cannot be keywords. All keywords are reserved words. Used Keywords : Exception Handling (6) Class Related (6) Object Related (4) For Data Type (8) Control Flow (11) Modifier (11) Return Type (1) -> void Enum(1) -> enum Exception Handling (6) 1. try 2. catch 3. finally 4. throw 5. throws 6. assert Class Related (6) 1. class 2. interface 3. extends 4. implements 5. package 6. import For Data Type (8) 1. byte 2. short 3. int 4. long 5. float 6. double 7. boolean 8. char Control Flow (11) 1. if 2. else 3. switch 4. case 5. default 6. while 7. do 8. for 9. break 10. continue 11. return Modifier (11) 1. public 2. private 3. protected 4. static 5. final 6. abstract 7. synchronized 8. native 9. strictfp 10. transient 11. volatile","title":"Reserved Words"},{"location":"introduction/ReservedWord/#used-keywords","text":"Exception Handling (6) Class Related (6) Object Related (4) For Data Type (8) Control Flow (11) Modifier (11) Return Type (1) -> void Enum(1) -> enum","title":"Used Keywords :"},{"location":"introduction/ReservedWord/#exception-handling-6","text":"1. try 2. catch 3. finally 4. throw 5. throws 6. assert","title":"Exception Handling (6)"},{"location":"introduction/ReservedWord/#class-related-6","text":"1. class 2. interface 3. extends 4. implements 5. package 6. import","title":"Class Related (6)"},{"location":"introduction/ReservedWord/#for-data-type-8","text":"1. byte 2. short 3. int 4. long 5. float 6. double 7. boolean 8. char","title":"For Data Type (8)"},{"location":"introduction/ReservedWord/#control-flow-11","text":"1. if 2. else 3. switch 4. case 5. default 6. while 7. do 8. for 9. break 10. continue 11. return","title":"Control Flow (11)"},{"location":"introduction/ReservedWord/#modifier-11","text":"1. public 2. private 3. protected 4. static 5. final 6. abstract 7. synchronized 8. native 9. strictfp 10. transient 11. volatile","title":"Modifier (11)"},{"location":"io/","text":"Java io Package io refers to input / output. Provides for system input and output through data streams, serialization and the file system. Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown. Classes : File FileWriter FileReader BufferedWriter BufferedReader PrintWriter","title":"Introduction"},{"location":"io/#java-io-package","text":"io refers to input / output. Provides for system input and output through data streams, serialization and the file system. Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown.","title":"Java io Package"},{"location":"io/#classes","text":"File FileWriter FileReader BufferedWriter BufferedReader PrintWriter","title":"Classes :"},{"location":"io/BufferedReader/","text":"Read line by line or char by char Constructors BufferedReader br = new BufferedReader(\"abc.txt\"); \u274c // cannot directly communicate with data. BufferedReader br = new BufferedReader(Reader r); BufferedReader br = new BufferedReader(Reader r, int BufferSize); Methods int read() int read(char[] ch) void close() // 1, 2 3 are same as FileReader String readline() To insert line separator. Examples Text File A sample text file named \"gces.txt\". gces 2019 Happy New Year Read File Read from \"gces.txt\" with BufferedReader. import java.io.FileReader ; import java.io.IOException ; import java.io.BufferedReader ; class GCES { public static void main ( String [] args ) { try { BufferedReader br = new BufferedReader ( new FileReader ( \"gces.txt\" )); int i = br . read (); // Reads the character and stores in integer value - Unicode while ( i != - 1 ) { // Denotes no character System . out . print (( char ) i ); // Type hinting i = br . read (); // Iteratively reads the character one by one until loop terminates. } br . close (); } catch ( IOException error ) { error . printStackTrace (); } } } Read File With ReadLine Read from \"gces.txt\" with BufferedReader using readLine() method.. import java.io.FileReader ; import java.io.IOException ; import java.io.BufferedReader ; class GCES { public static void main ( String [] args ) { try { BufferedReader br = new BufferedReader ( new FileReader ( \"gces.txt\" )); int i = br . read (); // Reads the character and stores in integer value - Unicode while ( i != - 1 ) { // Denotes no character System . out . print (( char ) i ); // Type hinting i = br . read (); // Iteratively reads the character one by one until loop terminates. } br . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"BufferedReader"},{"location":"io/BufferedReader/#constructors","text":"BufferedReader br = new BufferedReader(\"abc.txt\"); \u274c // cannot directly communicate with data. BufferedReader br = new BufferedReader(Reader r); BufferedReader br = new BufferedReader(Reader r, int BufferSize);","title":"Constructors"},{"location":"io/BufferedReader/#methods","text":"int read() int read(char[] ch) void close() // 1, 2 3 are same as FileReader String readline() To insert line separator.","title":"Methods"},{"location":"io/BufferedReader/#examples","text":"","title":"Examples"},{"location":"io/BufferedReader/#text-file","text":"A sample text file named \"gces.txt\". gces 2019 Happy New Year","title":"Text File"},{"location":"io/BufferedReader/#read-file","text":"Read from \"gces.txt\" with BufferedReader. import java.io.FileReader ; import java.io.IOException ; import java.io.BufferedReader ; class GCES { public static void main ( String [] args ) { try { BufferedReader br = new BufferedReader ( new FileReader ( \"gces.txt\" )); int i = br . read (); // Reads the character and stores in integer value - Unicode while ( i != - 1 ) { // Denotes no character System . out . print (( char ) i ); // Type hinting i = br . read (); // Iteratively reads the character one by one until loop terminates. } br . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"Read File"},{"location":"io/BufferedReader/#read-file-with-readline","text":"Read from \"gces.txt\" with BufferedReader using readLine() method.. import java.io.FileReader ; import java.io.IOException ; import java.io.BufferedReader ; class GCES { public static void main ( String [] args ) { try { BufferedReader br = new BufferedReader ( new FileReader ( \"gces.txt\" )); int i = br . read (); // Reads the character and stores in integer value - Unicode while ( i != - 1 ) { // Denotes no character System . out . print (( char ) i ); // Type hinting i = br . read (); // Iteratively reads the character one by one until loop terminates. } br . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"Read File With ReadLine"},{"location":"io/BufferedWriter/","text":"Constructors : BufferedWriter bw = new BufferedWriter(\"abc.txt\"); \u274c // cannot directly communicate with data. BufferedWriter bw = new BufferedWriter(Writer w); BufferedWriter bw = new BufferedWriter(Writer w, int buffer size); Which one of these are true ? BufferedWriter bw = new BufferedWriter(\"abc.txt\") \u274c BufferedWriter bw = new BufferedWriter(new File(\"abc.txt\")) \u274c BufferedWriter bw = new BufferedWriter(new FileWriter(\"abc.txt\")) \u2705 BufferedWriter bw = new BufferedWriter(new FileWriter(new FileWriter(\"abc.txt\"))) \u274c Methods write (int ch) write(char[] ch) write(String s) flush() close() newLine() To insert line separator. BufferedWriter is almost similar to FileWriter but it uses internal buffer to write data into file. So, if the number of write operation are more, the actual IO operations are less and performance is better. You should use BufferedWriter when no. of write operations are more. Examples Write On File Write some text on file named \"gces.txt\". import java.io.* ; class GCES { public static void main ( String [] args ) { try { BufferedWriter bw = new BufferedWriter ( new FileWriter ( \"gces.txt\" )); bw . write ( \"gces\" ); bw . newLine (); bw . write ( \"2019\" ); bw . newLine (); bw . write ( \"Happy New Year\" ); bw . flush (); bw . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"BufferedWriter"},{"location":"io/BufferedWriter/#constructors","text":"BufferedWriter bw = new BufferedWriter(\"abc.txt\"); \u274c // cannot directly communicate with data. BufferedWriter bw = new BufferedWriter(Writer w); BufferedWriter bw = new BufferedWriter(Writer w, int buffer size);","title":"Constructors :"},{"location":"io/BufferedWriter/#which-one-of-these-are-true","text":"BufferedWriter bw = new BufferedWriter(\"abc.txt\") \u274c BufferedWriter bw = new BufferedWriter(new File(\"abc.txt\")) \u274c BufferedWriter bw = new BufferedWriter(new FileWriter(\"abc.txt\")) \u2705 BufferedWriter bw = new BufferedWriter(new FileWriter(new FileWriter(\"abc.txt\"))) \u274c","title":"Which one of these are true ?"},{"location":"io/BufferedWriter/#methods","text":"write (int ch) write(char[] ch) write(String s) flush() close() newLine() To insert line separator. BufferedWriter is almost similar to FileWriter but it uses internal buffer to write data into file. So, if the number of write operation are more, the actual IO operations are less and performance is better. You should use BufferedWriter when no. of write operations are more.","title":"Methods"},{"location":"io/BufferedWriter/#examples","text":"","title":"Examples"},{"location":"io/BufferedWriter/#write-on-file","text":"Write some text on file named \"gces.txt\". import java.io.* ; class GCES { public static void main ( String [] args ) { try { BufferedWriter bw = new BufferedWriter ( new FileWriter ( \"gces.txt\" )); bw . write ( \"gces\" ); bw . newLine (); bw . write ( \"2019\" ); bw . newLine (); bw . write ( \"Happy New Year\" ); bw . flush (); bw . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"Write On File"},{"location":"io/File/","text":"File f = new File (\"myTextFile.txt\") - Won't create physical file but this is java ile object. Check Existence System.out.println(f.exists()); // It returns false. Create File f.createNewFile(); f.exists(); // Now, it returns true. Java io is used on UNIX system. It can be used to represent directory also. Create Directory File f = new File (\"GCES\") ; f.mkdir() ; Constructors File f = new File(String name); To represent resources in current working directory. File f = new File(\"directory = name\",\"file name\"); File f = new File(File subdirectory, String name); File subdirectory refers to another object of File type. Methods boolean exists(); boolean createNewFile(); boolean mkdir(); boolean isFile(); boolean isDirectory(); String[] list(); long length(); boolean delete(); Examples Counts File inside Directory Counts file inside a directory path.. import java.io.File ; class CountsFile { private static int count ; // Count variable to count the no of files. public static void count (){ count ++ ; // Every time the method is envoked, count increases by 1. } public static int getCount (){ return count ; // Getter for count. } public static void main ( String [] args ){ try { File fileObjectOne = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\\\\workspace\\\\Java\\\\packages\\\\io\\\\File\" ); // My directory structure. System . out . println ( \"Is this directory : \" + fileObjectOne . isDirectory ()); // Checks the given path is folder or not and returns boolean value. File [] thisDirectory = fileObjectOne . listFiles (); // Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. for ( File thisDir : thisDirectory ){ if ( thisDir . isFile ()){ // Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. Any non-directory file created by a Java application is guaranteed to be a normal file. System . out . println ( \">> \" + thisDir . getName ()); // Returns the name of the file or directory denoted by this abstract pathname. This is just the last name in the pathname's name sequence. If the pathname's name sequence is empty, then the empty string is returned. count (); } } } catch ( Exception error ){ error . printStackTrace (); } finally { System . out . println ( \"Total no of files : \" + getCount ()); } } } Display File and Directories Display a list of files and directories inside a directory path. import java.io.File ; class DisplayAll { public static void main ( String [] args ){ try { File fileObjectOne = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\\\\\" ); File [] thisDirectory = fileObjectOne . listFiles (); System . out . println ( \"\\nYou're in : \" + fileObjectOne . getAbsolutePath () + \"\\n\" ); for ( File thisDir : thisDirectory ){ if ( thisDir . isFile () || thisDir . isDirectory ()){ System . out . println ( \">> \" + thisDir . getName ()); } } } catch ( Exception error ){ error . printStackTrace (); } } }","title":"Introduction"},{"location":"io/File/#check-existence","text":"System.out.println(f.exists()); // It returns false.","title":"Check Existence"},{"location":"io/File/#create-file","text":"f.createNewFile(); f.exists(); // Now, it returns true. Java io is used on UNIX system. It can be used to represent directory also.","title":"Create File"},{"location":"io/File/#create-directory","text":"File f = new File (\"GCES\") ; f.mkdir() ;","title":"Create Directory"},{"location":"io/File/#constructors","text":"File f = new File(String name); To represent resources in current working directory. File f = new File(\"directory = name\",\"file name\"); File f = new File(File subdirectory, String name); File subdirectory refers to another object of File type.","title":"Constructors"},{"location":"io/File/#methods","text":"boolean exists(); boolean createNewFile(); boolean mkdir(); boolean isFile(); boolean isDirectory(); String[] list(); long length(); boolean delete();","title":"Methods"},{"location":"io/File/#examples","text":"","title":"Examples"},{"location":"io/File/#counts-file-inside-directory","text":"Counts file inside a directory path.. import java.io.File ; class CountsFile { private static int count ; // Count variable to count the no of files. public static void count (){ count ++ ; // Every time the method is envoked, count increases by 1. } public static int getCount (){ return count ; // Getter for count. } public static void main ( String [] args ){ try { File fileObjectOne = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\\\\workspace\\\\Java\\\\packages\\\\io\\\\File\" ); // My directory structure. System . out . println ( \"Is this directory : \" + fileObjectOne . isDirectory ()); // Checks the given path is folder or not and returns boolean value. File [] thisDirectory = fileObjectOne . listFiles (); // Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. for ( File thisDir : thisDirectory ){ if ( thisDir . isFile ()){ // Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. Any non-directory file created by a Java application is guaranteed to be a normal file. System . out . println ( \">> \" + thisDir . getName ()); // Returns the name of the file or directory denoted by this abstract pathname. This is just the last name in the pathname's name sequence. If the pathname's name sequence is empty, then the empty string is returned. count (); } } } catch ( Exception error ){ error . printStackTrace (); } finally { System . out . println ( \"Total no of files : \" + getCount ()); } } }","title":"Counts File inside Directory"},{"location":"io/File/#display-file-and-directories","text":"Display a list of files and directories inside a directory path. import java.io.File ; class DisplayAll { public static void main ( String [] args ){ try { File fileObjectOne = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\\\\\" ); File [] thisDirectory = fileObjectOne . listFiles (); System . out . println ( \"\\nYou're in : \" + fileObjectOne . getAbsolutePath () + \"\\n\" ); for ( File thisDir : thisDirectory ){ if ( thisDir . isFile () || thisDir . isDirectory ()){ System . out . println ( \">> \" + thisDir . getName ()); } } } catch ( Exception error ){ error . printStackTrace (); } } }","title":"Display File and Directories"},{"location":"io/File/CLA/","text":"Program that displays files and directories based on Command Line Arguments passed. First path, then filter :) Cases No CLA provided : - It displays all files and directories from the default path. javac DisplayWithCLA.java && java Display -f or -d provided : - It displays either files or directories from the default path. javac DisplayWithCLA.java && java Display -f // Displays files from default path. javac DisplayWithCLA.java && java Display -d // Displays directories from default path. Path provided : - It displays all files and directories from the given path. javac DisplayWithCLA.java && java Display C:\\users Path with -f or -d provided : - It displays either files or directories from the given path. javac DisplayWithCLA.java && java Display C:\\Users -f // Displays files from given path. javac DisplayWithCLA.java && java Display C:\\users -d // Displays directories from given path. Source Code // Importing File class from Java io package. // CLA in documentation refers to Command Line Argument. import java.io.File ; // Creating a class named Display. class Display { public static void main ( String [] args ){ // To prevent any of the exception that may arise, I put the codes under try block. try { // File type object is created. This is used when no path is passed as Command Line Argument. File defaultPath = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\" ); // File type array is created for the every file present on default path. File [] filesInDefaultDirectory = defaultPath . listFiles (); // If the Command Line Argument is provided. if ( args . length != 0 ){ // If only one Command Line Argument is passed. if ( args . length == 1 ){ // Creating a file type object from the Given Command Line Argument. File fileFromPath = new File ( args [ 0 ] ); // If CLA is either -f or -d. if ( args [ 0 ] . equals ( \"-f\" ) || args [ 0 ] . equals ( \"-d\" )){ // If CLA is -f. if ( args [ 0 ] . equals ( \"-f\" )){ // Assigns each file object of array to another file type object; for-each loop. System . out . println ( \"\\nFiles listing on default path : \" ); for ( File filesInDefaultDir : filesInDefaultDirectory ){ // Returns true if the file type object is file. if ( filesInDefaultDir . isFile ()){ System . out . println ( \">> \" + filesInDefaultDir . getName ()); } } System . out . println ( \"Provided Command Line Argument : \" + args [ 0 ] ); // If CLA is -d. } else if ( args [ 0 ] . equals ( \"-d\" )){ System . out . println ( \"\\nDirectory listing on default path : \" ); // Assigns each file object of array to another file type object; for-each loop. for ( File foldersInDefaultDir : filesInDefaultDirectory ){ // Returns true if the file type object is directory. if ( foldersInDefaultDir . isDirectory ()){ System . out . println ( \">> \" + foldersInDefaultDir . getName ()); } } System . out . println ( \"Provided Command Line Argument : \" + args [ 0 ] ); } // If CLA is path of any directory. } else if ( fileFromPath . isDirectory ()){ // Assigning CLA to string variable. String path = args [ 0 ] ; // Creating the file type object array of the files and directories present in the given path. File [] thisDirectoryFromPath = fileFromPath . listFiles (); System . out . println ( \"\\nYou're in : \" + fileFromPath . getAbsolutePath () + \"\\n\" ); // Assigns each file object of array to another file type object; for-each loop. for ( File thisDirFromPath : thisDirectoryFromPath ){ // Prints if the file type object is either file or directory. if ( thisDirFromPath . isFile () || thisDirFromPath . isDirectory ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } System . out . println ( \"Provided Path : \" + path ); } // Checks if CLA equals to two. } else if ( args . length == 2 ){ // Creates file type object from the CLA number one. File fileFromPath = new File ( args [ 0 ] ); // File type array is created for the every file present on default path. File [] thisDirectoryFromPath = fileFromPath . listFiles (); System . out . println ( \"\\nYou're in : \" + fileFromPath . getAbsolutePath () + \"\\n\" ); for ( File thisDirFromPath : thisDirectoryFromPath ){ // Prints if the file type object is either file or directory. if ( thisDirFromPath . isFile () || thisDirFromPath . isDirectory ()){ // Checks if CLA number two is either -f or -d. if ( args [ 1 ] . equals ( \"-f\" )){ if ( thisDirFromPath . isFile ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } else if ( args [ 1 ] . equals ( \"-d\" )){ if ( thisDirFromPath . isDirectory ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } } } } } else { // This runs if none of CLA is passed; it displays all files and directories from default path provided. File [] thisDirectoryDefault = defaultPath . listFiles (); System . out . println ( \"\\nYou're in : \" + defaultPath . getAbsolutePath () + \"\\n\" ); for ( File thisDirDefault : thisDirectoryDefault ){ if ( thisDirDefault . isFile () || thisDirDefault . isDirectory ()){ System . out . println ( \">> \" + thisDirDefault . getName ()); } } System . out . println ( \"Default Path : \" + defaultPath ); } } catch ( Exception error ){ // Prints the error if arised. error . printStackTrace (); } } }","title":"File CLI App"},{"location":"io/File/CLA/#cases","text":"No CLA provided : - It displays all files and directories from the default path. javac DisplayWithCLA.java && java Display -f or -d provided : - It displays either files or directories from the default path. javac DisplayWithCLA.java && java Display -f // Displays files from default path. javac DisplayWithCLA.java && java Display -d // Displays directories from default path. Path provided : - It displays all files and directories from the given path. javac DisplayWithCLA.java && java Display C:\\users Path with -f or -d provided : - It displays either files or directories from the given path. javac DisplayWithCLA.java && java Display C:\\Users -f // Displays files from given path. javac DisplayWithCLA.java && java Display C:\\users -d // Displays directories from given path.","title":"Cases"},{"location":"io/File/CLA/#source-code","text":"// Importing File class from Java io package. // CLA in documentation refers to Command Line Argument. import java.io.File ; // Creating a class named Display. class Display { public static void main ( String [] args ){ // To prevent any of the exception that may arise, I put the codes under try block. try { // File type object is created. This is used when no path is passed as Command Line Argument. File defaultPath = new File ( \"C:\\\\users\\\\arjun\\\\Desktop\" ); // File type array is created for the every file present on default path. File [] filesInDefaultDirectory = defaultPath . listFiles (); // If the Command Line Argument is provided. if ( args . length != 0 ){ // If only one Command Line Argument is passed. if ( args . length == 1 ){ // Creating a file type object from the Given Command Line Argument. File fileFromPath = new File ( args [ 0 ] ); // If CLA is either -f or -d. if ( args [ 0 ] . equals ( \"-f\" ) || args [ 0 ] . equals ( \"-d\" )){ // If CLA is -f. if ( args [ 0 ] . equals ( \"-f\" )){ // Assigns each file object of array to another file type object; for-each loop. System . out . println ( \"\\nFiles listing on default path : \" ); for ( File filesInDefaultDir : filesInDefaultDirectory ){ // Returns true if the file type object is file. if ( filesInDefaultDir . isFile ()){ System . out . println ( \">> \" + filesInDefaultDir . getName ()); } } System . out . println ( \"Provided Command Line Argument : \" + args [ 0 ] ); // If CLA is -d. } else if ( args [ 0 ] . equals ( \"-d\" )){ System . out . println ( \"\\nDirectory listing on default path : \" ); // Assigns each file object of array to another file type object; for-each loop. for ( File foldersInDefaultDir : filesInDefaultDirectory ){ // Returns true if the file type object is directory. if ( foldersInDefaultDir . isDirectory ()){ System . out . println ( \">> \" + foldersInDefaultDir . getName ()); } } System . out . println ( \"Provided Command Line Argument : \" + args [ 0 ] ); } // If CLA is path of any directory. } else if ( fileFromPath . isDirectory ()){ // Assigning CLA to string variable. String path = args [ 0 ] ; // Creating the file type object array of the files and directories present in the given path. File [] thisDirectoryFromPath = fileFromPath . listFiles (); System . out . println ( \"\\nYou're in : \" + fileFromPath . getAbsolutePath () + \"\\n\" ); // Assigns each file object of array to another file type object; for-each loop. for ( File thisDirFromPath : thisDirectoryFromPath ){ // Prints if the file type object is either file or directory. if ( thisDirFromPath . isFile () || thisDirFromPath . isDirectory ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } System . out . println ( \"Provided Path : \" + path ); } // Checks if CLA equals to two. } else if ( args . length == 2 ){ // Creates file type object from the CLA number one. File fileFromPath = new File ( args [ 0 ] ); // File type array is created for the every file present on default path. File [] thisDirectoryFromPath = fileFromPath . listFiles (); System . out . println ( \"\\nYou're in : \" + fileFromPath . getAbsolutePath () + \"\\n\" ); for ( File thisDirFromPath : thisDirectoryFromPath ){ // Prints if the file type object is either file or directory. if ( thisDirFromPath . isFile () || thisDirFromPath . isDirectory ()){ // Checks if CLA number two is either -f or -d. if ( args [ 1 ] . equals ( \"-f\" )){ if ( thisDirFromPath . isFile ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } else if ( args [ 1 ] . equals ( \"-d\" )){ if ( thisDirFromPath . isDirectory ()){ System . out . println ( \">> \" + thisDirFromPath . getName ()); } } } } } } else { // This runs if none of CLA is passed; it displays all files and directories from default path provided. File [] thisDirectoryDefault = defaultPath . listFiles (); System . out . println ( \"\\nYou're in : \" + defaultPath . getAbsolutePath () + \"\\n\" ); for ( File thisDirDefault : thisDirectoryDefault ){ if ( thisDirDefault . isFile () || thisDirDefault . isDirectory ()){ System . out . println ( \">> \" + thisDirDefault . getName ()); } } System . out . println ( \"Default Path : \" + defaultPath ); } } catch ( Exception error ){ // Prints the error if arised. error . printStackTrace (); } } }","title":"Source Code"},{"location":"io/FileReader/","text":"to read characters data or text data. Here, we can read character by character by character; not line by line. Constructors FileReader fr = new FileReader(String fileName); FileReader fr = new FileReader(File f); If no file is available, this will throw exception. Methods int read () Unicode value of character. int read (char[] ch) no of characters copied from file into array. void close() Examples Text File Hello my name is Arjun. Read File By Looping Demo of a FileReader class. import java.io.FileReader ; import java.io.IOException ; class FileReaderDemo { // Method : int read() public static void main ( String [] args ){ try { FileReader fr = new FileReader ( \"myText.txt\" ); int i = fr . read (); while ( i != - 1 ){ // Denotes no character System . out . print (( char ) i ); // Type-hinting i = fr . read (); } fr . close (); } catch ( IOException error ){ error . printStackTrace (); } } } Read File With Character Array Demo of a FileReader class using a array. import java.io.* ; class FileReaderDemo { public static void main ( String [] args ){ try { // Method : int read(char[] ch) File f = new File ( \"myText.txt\" ); // Dynamically allocating the size of the array according to the text length inside file. char [] ch = new char [ ( int ) f . length () ] ; FileReader fr = new FileReader ( f ); fr . read ( ch ); // Assigns each character into another character variable. for ( char ch1 : ch ){ System . out . print ( ch1 ); } fr . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"FileReader"},{"location":"io/FileReader/#constructors","text":"FileReader fr = new FileReader(String fileName); FileReader fr = new FileReader(File f); If no file is available, this will throw exception.","title":"Constructors"},{"location":"io/FileReader/#methods","text":"int read () Unicode value of character. int read (char[] ch) no of characters copied from file into array. void close()","title":"Methods"},{"location":"io/FileReader/#examples","text":"","title":"Examples"},{"location":"io/FileReader/#text-file","text":"Hello my name is Arjun.","title":"Text File"},{"location":"io/FileReader/#read-file-by-looping","text":"Demo of a FileReader class. import java.io.FileReader ; import java.io.IOException ; class FileReaderDemo { // Method : int read() public static void main ( String [] args ){ try { FileReader fr = new FileReader ( \"myText.txt\" ); int i = fr . read (); while ( i != - 1 ){ // Denotes no character System . out . print (( char ) i ); // Type-hinting i = fr . read (); } fr . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"Read File By Looping"},{"location":"io/FileReader/#read-file-with-character-array","text":"Demo of a FileReader class using a array. import java.io.* ; class FileReaderDemo { public static void main ( String [] args ){ try { // Method : int read(char[] ch) File f = new File ( \"myText.txt\" ); // Dynamically allocating the size of the array according to the text length inside file. char [] ch = new char [ ( int ) f . length () ] ; FileReader fr = new FileReader ( f ); fr . read ( ch ); // Assigns each character into another character variable. for ( char ch1 : ch ){ System . out . print ( ch1 ); } fr . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"Read File With Character Array"},{"location":"io/FileWriter/","text":"Constructors FileWriter fw = new FileWriter(String name); FileWriter fw = new FileWriter(File f); FileWriter fw = new FileWriter(String name, boolean append); FileWriter fw = new FileWriter(File f, boolean append); Constructors listed 1 and 2 overrides the existing data, but Constructors listed 3 and 4 appends to existing data. If no file is available, this will create that file. Methods write (int ch) to write a single character to the file. fw.write(100); // Unicode value for d is 100 fw.write('d'); // Both writes d. write(char[] ch) write(String s) flush() To guarantee our data including last char also on written property. close() Examples FileWriter Demo import java.io.* ; class FileWriterDemo { public static void main ( String [] args ) { try { FileWriter fw = new FileWriter ( \"abc.txt\" ); fw . write ( 100 ); fw . write ( \"abc \\n Software\" ); // Paragraph Break fw . write ( '\\n' ); // Character Array char [] ch = { 'a' , 'b' , 'c' }; // Writing character array fw . write ( ch ); fw . write ( '\\n' ); fw . flush (); fw . close (); } catch ( IOException error ) { error . printStackTrace (); } } } FileWriter Append Demo import java.io.* ; class FileWriterAppendDemo { public static void main ( String [] args ){ try { // Appends FileWriter fw = new FileWriter ( \"abc.txt\" , true ); fw . write ( \"\\n Arjun\" ); fw . flush (); fw . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"FileWriter"},{"location":"io/FileWriter/#constructors","text":"FileWriter fw = new FileWriter(String name); FileWriter fw = new FileWriter(File f); FileWriter fw = new FileWriter(String name, boolean append); FileWriter fw = new FileWriter(File f, boolean append); Constructors listed 1 and 2 overrides the existing data, but Constructors listed 3 and 4 appends to existing data. If no file is available, this will create that file.","title":"Constructors"},{"location":"io/FileWriter/#methods","text":"write (int ch) to write a single character to the file. fw.write(100); // Unicode value for d is 100 fw.write('d'); // Both writes d. write(char[] ch) write(String s) flush() To guarantee our data including last char also on written property. close()","title":"Methods"},{"location":"io/FileWriter/#examples","text":"","title":"Examples"},{"location":"io/FileWriter/#filewriter-demo","text":"import java.io.* ; class FileWriterDemo { public static void main ( String [] args ) { try { FileWriter fw = new FileWriter ( \"abc.txt\" ); fw . write ( 100 ); fw . write ( \"abc \\n Software\" ); // Paragraph Break fw . write ( '\\n' ); // Character Array char [] ch = { 'a' , 'b' , 'c' }; // Writing character array fw . write ( ch ); fw . write ( '\\n' ); fw . flush (); fw . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"FileWriter Demo"},{"location":"io/FileWriter/#filewriter-append-demo","text":"import java.io.* ; class FileWriterAppendDemo { public static void main ( String [] args ){ try { // Appends FileWriter fw = new FileWriter ( \"abc.txt\" , true ); fw . write ( \"\\n Arjun\" ); fw . flush (); fw . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"FileWriter Append Demo"},{"location":"io/PrintWriter/","text":"Solves problems of FileWriter and BufferedWriter Constructors : PrintWriter bw = new PrintWriter(String fname); PrintWriter bw = new PrintWriter(File f); PrintWriter bw = new PrintWriter(Writer w); Methods write (int ch) write(char[] ch) write(String s) flush() close() print(char ch)...print(int i)...print(boolean b)...print(String s) println(char ch)...println(int i)...println(boolean b)...println(String s) Examples Write On File Write some text on file named \"abc.txt\". import java.io.* ; class Sample { public static void main ( String [] args ) { try { PrintWriter pw = new PrintWriter ( \"abc.txt\" ); pw . print ( 'd' ); // Writes character pw . print ( 100 + \"\\n\" ); // Writes integer pw . print ( true + \"\\n\" ); // Writes boolean pw . print ( 'c' + \"\\n\" ); // Writes Character pw . print ( \"gces\" + \"\\n\" ); // Writes string pw . flush (); pw . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"PrintWriter"},{"location":"io/PrintWriter/#constructors","text":"PrintWriter bw = new PrintWriter(String fname); PrintWriter bw = new PrintWriter(File f); PrintWriter bw = new PrintWriter(Writer w);","title":"Constructors :"},{"location":"io/PrintWriter/#methods","text":"write (int ch) write(char[] ch) write(String s) flush() close() print(char ch)...print(int i)...print(boolean b)...print(String s) println(char ch)...println(int i)...println(boolean b)...println(String s)","title":"Methods"},{"location":"io/PrintWriter/#examples","text":"","title":"Examples"},{"location":"io/PrintWriter/#write-on-file","text":"Write some text on file named \"abc.txt\". import java.io.* ; class Sample { public static void main ( String [] args ) { try { PrintWriter pw = new PrintWriter ( \"abc.txt\" ); pw . print ( 'd' ); // Writes character pw . print ( 100 + \"\\n\" ); // Writes integer pw . print ( true + \"\\n\" ); // Writes boolean pw . print ( 'c' + \"\\n\" ); // Writes Character pw . print ( \"gces\" + \"\\n\" ); // Writes string pw . flush (); pw . close (); } catch ( IOException error ) { error . printStackTrace (); } } }","title":"Write On File"},{"location":"io/more-examples/","text":"Text File A sample text file named \"abc.txt\". First line from File one Second Line from File one A sample text file named \"xyz.txt\". First line from File two Second Line from File Two Display Text Files Display all text files inside a given directory path.. import java.io.* ; class DisplayTextFiles { public static void main ( String [] args ) throws IOException { String path = \"C:/users/arjun/Desktop\" ; File [] filesFromPath = ( new File ( path )). listFiles (); for ( File fileFromPath : filesFromPath ) { if ( fileFromPath . getName (). endsWith ( \".txt\" )) { // First getName() will return the file name into string and endsWith() checks the file extension like REGEX. System . out . println ( fileFromPath . getName ()); // Prints all txt files in Desktop. } } } } Merge Text Files Read from \"abc.txt\" and \"xyz.txt\" and merge into \"finalText.txt\" file. import java.io.* ; class MergeFiles { public static void main ( String [] args ) throws IOException { try { PrintWriter pw = new PrintWriter ( new File ( \"finalText.txt\" )); BufferedReader br = new BufferedReader ( new FileReader ( \"abc.txt\" )); String line = br . readLine (); while ( line != null ) { // Denotes no character pw . write ( line + \"\\n\" ); line = br . readLine (); // Iteratively reads the line one by one until loop terminates. } br = new BufferedReader ( new FileReader ( \"xyz.txt\" )); line = br . readLine (); while ( line != null ) { // Denotes no character pw . write ( line + \"\\n\" ); line = br . readLine (); // Iteratively reads the line one by one until loop terminates. } pw . flush (); pw . close (); br . close (); } catch ( IOException error ){ error . printStackTrace (); } } } Merge Text Files Alternatively Read from \"abc.txt\" and \"xyz.txt\" and merge into \"finalText.txt\" file while writing each lines from both files alternatively.. import java.io.* ; class MergeFiles { public static void main ( String [] args ) throws IOException { try { PrintWriter pw = new PrintWriter ( new File ( \"finalText.txt\" )); BufferedReader brOne = new BufferedReader ( new FileReader ( \"abc.txt\" )); BufferedReader brTwo = new BufferedReader ( new FileReader ( \"xyz.txt\" )); String lineOne = brOne . readLine (); String lineTwo = brTwo . readLine (); while ( lineOne != null || lineTwo != null ) { // Denotes no character pw . write ( lineOne + \"\\n\" ); pw . write ( lineTwo + \"\\n\" ); lineOne = brOne . readLine (); // Iteratively reads the line one by one until loop terminates. lineTwo = brTwo . readLine (); } pw . flush (); pw . close (); brOne . close (); brTwo . close (); } catch ( IOException error ){ error . printStackTrace (); } } } Merge Text Files From Given Path Read text files from a given path and merge them. import java.io.* ; class DisplayTextFiles { public static void main ( String [] args ) throws IOException { BufferedReader br ; // Declaring a variable of BufferedReader data type so that it can be used inside loop to read every .txt files listed there. String path = \"C:/users/arjun/Desktop/\" ; // This is pre-specified path, you can change it. PrintWriter pw = new PrintWriter ( path + \"mergedText.txt\" ); String line ; // This will get the lines on text files. String location ; File [] filesFromPath = ( new File ( path )). listFiles (); for ( File fileFromPath : filesFromPath ) { if ( fileFromPath . getName (). endsWith ( \".txt\" ) && ! fileFromPath . getName (). equals ( \"mergedText.txt\" )) { // First getName() will return the file name into string and endsWith() checks the file extension like REGEX. It excludes the mergedText.txt too. System . out . println ( \"Reading from \" + fileFromPath . getName ()); // Prints progress message in console. location = path + fileFromPath . getName (); br = new BufferedReader ( new FileReader ( location )); pw . write ( \"From \" + fileFromPath . getName () + \"\\n\" ); // This will write the text. line = br . readLine (); // Reads a line from specified file and returns string. while ( line != null ) { // Loop executes until the line-read is not null. pw . println ( line + \"\\n\" ); // Writes each lines into the PrintWriter variable. line = br . readLine (); } pw . write ( \"\\n\" ); } } System . out . println ( \"Writing completed.\" ); // br is not initialized at this scope, so need to close() it. pw . flush (); pw . close (); } }","title":"More Examples"},{"location":"io/more-examples/#text-file","text":"A sample text file named \"abc.txt\". First line from File one Second Line from File one A sample text file named \"xyz.txt\". First line from File two Second Line from File Two","title":"Text File"},{"location":"io/more-examples/#display-text-files","text":"Display all text files inside a given directory path.. import java.io.* ; class DisplayTextFiles { public static void main ( String [] args ) throws IOException { String path = \"C:/users/arjun/Desktop\" ; File [] filesFromPath = ( new File ( path )). listFiles (); for ( File fileFromPath : filesFromPath ) { if ( fileFromPath . getName (). endsWith ( \".txt\" )) { // First getName() will return the file name into string and endsWith() checks the file extension like REGEX. System . out . println ( fileFromPath . getName ()); // Prints all txt files in Desktop. } } } }","title":"Display Text Files"},{"location":"io/more-examples/#merge-text-files","text":"Read from \"abc.txt\" and \"xyz.txt\" and merge into \"finalText.txt\" file. import java.io.* ; class MergeFiles { public static void main ( String [] args ) throws IOException { try { PrintWriter pw = new PrintWriter ( new File ( \"finalText.txt\" )); BufferedReader br = new BufferedReader ( new FileReader ( \"abc.txt\" )); String line = br . readLine (); while ( line != null ) { // Denotes no character pw . write ( line + \"\\n\" ); line = br . readLine (); // Iteratively reads the line one by one until loop terminates. } br = new BufferedReader ( new FileReader ( \"xyz.txt\" )); line = br . readLine (); while ( line != null ) { // Denotes no character pw . write ( line + \"\\n\" ); line = br . readLine (); // Iteratively reads the line one by one until loop terminates. } pw . flush (); pw . close (); br . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"Merge Text Files"},{"location":"io/more-examples/#merge-text-files-alternatively","text":"Read from \"abc.txt\" and \"xyz.txt\" and merge into \"finalText.txt\" file while writing each lines from both files alternatively.. import java.io.* ; class MergeFiles { public static void main ( String [] args ) throws IOException { try { PrintWriter pw = new PrintWriter ( new File ( \"finalText.txt\" )); BufferedReader brOne = new BufferedReader ( new FileReader ( \"abc.txt\" )); BufferedReader brTwo = new BufferedReader ( new FileReader ( \"xyz.txt\" )); String lineOne = brOne . readLine (); String lineTwo = brTwo . readLine (); while ( lineOne != null || lineTwo != null ) { // Denotes no character pw . write ( lineOne + \"\\n\" ); pw . write ( lineTwo + \"\\n\" ); lineOne = brOne . readLine (); // Iteratively reads the line one by one until loop terminates. lineTwo = brTwo . readLine (); } pw . flush (); pw . close (); brOne . close (); brTwo . close (); } catch ( IOException error ){ error . printStackTrace (); } } }","title":"Merge Text Files Alternatively"},{"location":"io/more-examples/#merge-text-files-from-given-path","text":"Read text files from a given path and merge them. import java.io.* ; class DisplayTextFiles { public static void main ( String [] args ) throws IOException { BufferedReader br ; // Declaring a variable of BufferedReader data type so that it can be used inside loop to read every .txt files listed there. String path = \"C:/users/arjun/Desktop/\" ; // This is pre-specified path, you can change it. PrintWriter pw = new PrintWriter ( path + \"mergedText.txt\" ); String line ; // This will get the lines on text files. String location ; File [] filesFromPath = ( new File ( path )). listFiles (); for ( File fileFromPath : filesFromPath ) { if ( fileFromPath . getName (). endsWith ( \".txt\" ) && ! fileFromPath . getName (). equals ( \"mergedText.txt\" )) { // First getName() will return the file name into string and endsWith() checks the file extension like REGEX. It excludes the mergedText.txt too. System . out . println ( \"Reading from \" + fileFromPath . getName ()); // Prints progress message in console. location = path + fileFromPath . getName (); br = new BufferedReader ( new FileReader ( location )); pw . write ( \"From \" + fileFromPath . getName () + \"\\n\" ); // This will write the text. line = br . readLine (); // Reads a line from specified file and returns string. while ( line != null ) { // Loop executes until the line-read is not null. pw . println ( line + \"\\n\" ); // Writes each lines into the PrintWriter variable. line = br . readLine (); } pw . write ( \"\\n\" ); } } System . out . println ( \"Writing completed.\" ); // br is not initialized at this scope, so need to close() it. pw . flush (); pw . close (); } }","title":"Merge Text Files From Given Path"},{"location":"literals/","text":"Macro Rendering Error TemplateNotFound : literals/testForLiterals/DoubleWithD.java Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 473, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 30, in top-level template code File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/loaders.py\", line 214, in get_source raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: literals/testForLiterals/DoubleWithD.java","title":"Literals"},{"location":"literals/#macro-rendering-error","text":"TemplateNotFound : literals/testForLiterals/DoubleWithD.java Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 473, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 30, in top-level template code File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/loaders.py\", line 214, in get_source raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: literals/testForLiterals/DoubleWithD.java","title":"Macro Rendering Error"},{"location":"networking/","text":"Network Programming 1. Socket Programming 2. URL Processing A Network is a collection of devices that share a common communication protocol and connected with some communication medium. A protocol defines a set of rules to which all the communicating parties adhere to (agree). The java.net package was designed with a group of classes and interfaces which not only provide low level but also hight level communication details. java.net package provides support for the two common network protocols. TCP (Transmission Control Protocol) UDP(User Datagram Protocol) The term network programming refers to writing programs, then execute across multiple devices, in which the devices are all connected to each other using a network. Differences between TCP and UDP TRANSMISSION CONTROL PROTOCOL (TCP) USER DATAGRAM PROTOCOL (UDP) 1. TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and should close the connection after transmitting the data. 1. UDP is the Datagram oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection. UDP is efficient for broadcast and multicast type of network transmission. 2. TCP is reliable as it guarantees delivery of data to the destination router. 2. The delivery of data to the destination cannot be guaranteed in UDP. 3.TCP provides extensive error checking mechanisms. It is because it provides flow control and acknowledgment of data. 3. UDP has only the basic error checking mechanism using checksums. 4. Sequencing of data is a feature of Transmission Control Protocol (TCP). this means that packets arrive in-order at the receiver. 4. There is no sequencing of data in UDP. If ordering is required, it has to be managed by the application layer. 5. TCP is comparatively slower than UDP. 5. UDP is faster, simpler and more efficient than TCP. 6.Retransmission of lost packets is possible in TCP, but not in UDP. 6.There is no retransmission of lost packets in User Datagram Protocol (UDP). 7.TCP has a (20-80) bytes variable length header. 7. UDP has a 8 bytes fixed length header. 8.TCP is heavy-weight. 8. UDP is lightweight. 9.TCP doesn\u2019t supports Broadcasting. 9. UDP supports Broadcasting. Some Terminologies IP Address It is a logical address that can be changed. IP Address are 32-bit number (IPv4 format) often represented as a quad of four 8-bit numbers separated by periods. Eg : 192.168.0.1 Protocol It is a set of rules basically that is followed for communication. Eg: TCP, UDP, FTP, POP, SMTP, HTTP, HTTPS Port Number The port number is used to uniquely identify different applications. It acts as a communication end point between applications. The valid port number range from 1 - 65535. The ports upto 1023 are reserved for well known services and hence are well-known ports. Eg: 80 for HTTP , 21 for FTP , 22 for SSH Socket A socket is a end point between two way communication. It defines a network connection as a Stream from which bytes can be read and similarly bytes can be sent. Java socket can be used to provide both connection-oriented ( TCP ) as well as connectionless ( UDP ).","title":"Introduction"},{"location":"networking/#network-programming","text":"1. Socket Programming 2. URL Processing A Network is a collection of devices that share a common communication protocol and connected with some communication medium. A protocol defines a set of rules to which all the communicating parties adhere to (agree). The java.net package was designed with a group of classes and interfaces which not only provide low level but also hight level communication details. java.net package provides support for the two common network protocols. TCP (Transmission Control Protocol) UDP(User Datagram Protocol) The term network programming refers to writing programs, then execute across multiple devices, in which the devices are all connected to each other using a network.","title":"Network Programming"},{"location":"networking/#differences-between-tcp-and-udp","text":"TRANSMISSION CONTROL PROTOCOL (TCP) USER DATAGRAM PROTOCOL (UDP) 1. TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and should close the connection after transmitting the data. 1. UDP is the Datagram oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection. UDP is efficient for broadcast and multicast type of network transmission. 2. TCP is reliable as it guarantees delivery of data to the destination router. 2. The delivery of data to the destination cannot be guaranteed in UDP. 3.TCP provides extensive error checking mechanisms. It is because it provides flow control and acknowledgment of data. 3. UDP has only the basic error checking mechanism using checksums. 4. Sequencing of data is a feature of Transmission Control Protocol (TCP). this means that packets arrive in-order at the receiver. 4. There is no sequencing of data in UDP. If ordering is required, it has to be managed by the application layer. 5. TCP is comparatively slower than UDP. 5. UDP is faster, simpler and more efficient than TCP. 6.Retransmission of lost packets is possible in TCP, but not in UDP. 6.There is no retransmission of lost packets in User Datagram Protocol (UDP). 7.TCP has a (20-80) bytes variable length header. 7. UDP has a 8 bytes fixed length header. 8.TCP is heavy-weight. 8. UDP is lightweight. 9.TCP doesn\u2019t supports Broadcasting. 9. UDP supports Broadcasting.","title":"Differences between TCP and UDP"},{"location":"networking/#some-terminologies","text":"IP Address It is a logical address that can be changed. IP Address are 32-bit number (IPv4 format) often represented as a quad of four 8-bit numbers separated by periods. Eg : 192.168.0.1 Protocol It is a set of rules basically that is followed for communication. Eg: TCP, UDP, FTP, POP, SMTP, HTTP, HTTPS Port Number The port number is used to uniquely identify different applications. It acts as a communication end point between applications. The valid port number range from 1 - 65535. The ports upto 1023 are reserved for well known services and hence are well-known ports. Eg: 80 for HTTP , 21 for FTP , 22 for SSH Socket A socket is a end point between two way communication. It defines a network connection as a Stream from which bytes can be read and similarly bytes can be sent. Java socket can be used to provide both connection-oriented ( TCP ) as well as connectionless ( UDP ).","title":"Some Terminologies"},{"location":"networking/ConnectionLess/","text":"Connection Less 1. Datagram Socket Class 2. Datagram Packet Class DatagramSocket Class This class represents a connection-less socket for sending and receiving datagram packets. A datagram is basically an information but there is no guarantee of its content, arrival or arrival time. Constructor DatagramSocket() throws SocketException ; It creates a datagram socket and binds it with the available Port number on Local Machine. DatagramSocket(int port) throws SocketException ; It creates a datagram socket and binds it with the given port number. Datagram(int port, InetAddress address) throws SocketException ; It binds with the specified port and host address. DatagramPacket Class DatagramPacket is a message that can be sent or received. If you send multiple packet, it may arrive in any order. Additionally, packet delivery is not guaranteed. Constructor DatagramPacket(byte[] byteArray, int length) It creates a datagram packet to recieve the packets. DatagramPacket(byte[] byteArray, InetAddress address int length) It is used to send the packets. Sender Implementation import java.io.* ; import java.net.* ; public class Sender { public static void main ( String [] args ) throws Exception { DatagramSocket ds = new DatagramSocket ( 6666 ); String str = \"Welcome Java\" ; InetAddress ip = InetAddress . getByName ( \"127.0.0.1\" ); DatagramPacket dp = new DatagramPacket ( str . getBytes (), str . length (), ip , 3000 ); ds . send ( dp ); ds . close (); } } Receiver Implementation import java.io.IOException ; import java.net.* ; public class Receiver { public static void main ( String [] args ) throws IOException { DatagramSocket ds = new DatagramSocket ( 6666 ); byte [] buf = new byte [ 1024 ] ; DatagramPacket dp = new DatagramPacket ( buf , 1024 ); ds . receive ( dp ); String str = new String ( dp . getData (), 0 , dp . getLength ()); System . out . println ( str ); ds . close (); } }","title":"Connection Less"},{"location":"networking/ConnectionLess/#connection-less","text":"1. Datagram Socket Class 2. Datagram Packet Class","title":"Connection Less"},{"location":"networking/ConnectionLess/#datagramsocket-class","text":"This class represents a connection-less socket for sending and receiving datagram packets. A datagram is basically an information but there is no guarantee of its content, arrival or arrival time.","title":"DatagramSocket Class"},{"location":"networking/ConnectionLess/#constructor","text":"DatagramSocket() throws SocketException ; It creates a datagram socket and binds it with the available Port number on Local Machine. DatagramSocket(int port) throws SocketException ; It creates a datagram socket and binds it with the given port number. Datagram(int port, InetAddress address) throws SocketException ; It binds with the specified port and host address.","title":"Constructor"},{"location":"networking/ConnectionLess/#datagrampacket-class","text":"DatagramPacket is a message that can be sent or received. If you send multiple packet, it may arrive in any order. Additionally, packet delivery is not guaranteed.","title":"DatagramPacket Class"},{"location":"networking/ConnectionLess/#constructor_1","text":"DatagramPacket(byte[] byteArray, int length) It creates a datagram packet to recieve the packets. DatagramPacket(byte[] byteArray, InetAddress address int length) It is used to send the packets.","title":"Constructor"},{"location":"networking/ConnectionLess/#sender-implementation","text":"import java.io.* ; import java.net.* ; public class Sender { public static void main ( String [] args ) throws Exception { DatagramSocket ds = new DatagramSocket ( 6666 ); String str = \"Welcome Java\" ; InetAddress ip = InetAddress . getByName ( \"127.0.0.1\" ); DatagramPacket dp = new DatagramPacket ( str . getBytes (), str . length (), ip , 3000 ); ds . send ( dp ); ds . close (); } }","title":"Sender Implementation"},{"location":"networking/ConnectionLess/#receiver-implementation","text":"import java.io.IOException ; import java.net.* ; public class Receiver { public static void main ( String [] args ) throws IOException { DatagramSocket ds = new DatagramSocket ( 6666 ); byte [] buf = new byte [ 1024 ] ; DatagramPacket dp = new DatagramPacket ( buf , 1024 ); ds . receive ( dp ); String str = new String ( dp . getData (), 0 , dp . getLength ()); System . out . println ( str ); ds . close (); } }","title":"Receiver Implementation"},{"location":"networking/HTTPURLConnection/","text":"HTTP URL Connection Implementation // Demonstrate HttpURLConnection. import java.net.* ; import java.io.* ; import java.util.* ; class HttpURLConnectionDemo { public static void main ( String args [] ) throws Exception { URL hp = new URL ( \"http://www.google.com\" ); HttpURLConnection hpCon = ( HttpURLConnection ) hp . openConnection (); // Display request method. System . out . println ( \"Request method is \" + hpCon . getRequestMethod ()); // Display response code. System . out . println ( \"Response code is \" + hpCon . getResponseCode ()); // Display response message. System . out . println ( \"Response Message is \" + hpCon . getResponseMessage ()); // Get a list of the header fields and a set // of the header keys. Map < String , List < String >> hdrMap = hpCon . getHeaderFields (); Set < String > hdrField = hdrMap . keySet (); System . out . println ( \"\\nHere is the header:\" ); // Display all header keys and values. for ( String k : hdrField ) { System . out . println ( \"Key: \" + k + \" Value: \" + hdrMap . get ( k )); } } }","title":"HTTP URL Connection"},{"location":"networking/HTTPURLConnection/#http-url-connection","text":"","title":"HTTP URL Connection"},{"location":"networking/HTTPURLConnection/#implementation","text":"// Demonstrate HttpURLConnection. import java.net.* ; import java.io.* ; import java.util.* ; class HttpURLConnectionDemo { public static void main ( String args [] ) throws Exception { URL hp = new URL ( \"http://www.google.com\" ); HttpURLConnection hpCon = ( HttpURLConnection ) hp . openConnection (); // Display request method. System . out . println ( \"Request method is \" + hpCon . getRequestMethod ()); // Display response code. System . out . println ( \"Response code is \" + hpCon . getResponseCode ()); // Display response message. System . out . println ( \"Response Message is \" + hpCon . getResponseMessage ()); // Get a list of the header fields and a set // of the header keys. Map < String , List < String >> hdrMap = hpCon . getHeaderFields (); Set < String > hdrField = hdrMap . keySet (); System . out . println ( \"\\nHere is the header:\" ); // Display all header keys and values. for ( String k : hdrField ) { System . out . println ( \"Key: \" + k + \" Value: \" + hdrMap . get ( k )); } } }","title":"Implementation"},{"location":"networking/InetAddress/","text":"InetAddress Class InetAddress represents an IP address. java.net.InetAddress class provides methods to get the IP of any hostname(eg : facebook.com); Methods public static InetAddress getByName(String host) throws UnknownHostException public static InetAddress getLocalHost() throws UnknownHostException public static InetAddress getHostName() throws UnknownHostException Rturns hostname of IP Address. public static InetAddress getHostAddress() throws UnknownHostException String toString() Converts IP Address to a String Implementation import java.net.* ; class InetAddressDemo { public static void main ( String [] args ) throws UnknownHostException { InetAddress address = InetAddress . getLocalHost (); System . out . println ( \"Address : \" + address ); address = InetAddress . getByName ( \"www.thearjun.tech\" ); System . out . println ( \"Address : \" + address ); /* * On the Internet, it is common for a single name to be used to represent * several machines. In the world of web servers, this is one way to provide * some degree of scaling. The getAllByName( ) factory method returns an array * of InetAddresses that represent all of the addresses that a particular name * resolves to. It will also throw an UnknownHostException if it can\u2019t resolve * the name to at least one address. */ InetAddress [] addresses = InetAddress . getAllByName ( \"www.thearjun.tech\" ); for ( int i = 0 ; i < addresses . length ; i ++ ) { System . out . println ( \"Address \" + ( i + 1 ) + \" : \" + addresses [ i ] ); } /* Instance Methods */ System . out . println ( \"Host Name : \" + address . getHostName ()); System . out . println ( \"Host Address : \" + address . getHostAddress ()); } }","title":"InetAddress"},{"location":"networking/InetAddress/#inetaddress-class","text":"InetAddress represents an IP address. java.net.InetAddress class provides methods to get the IP of any hostname(eg : facebook.com);","title":"InetAddress Class"},{"location":"networking/InetAddress/#methods","text":"public static InetAddress getByName(String host) throws UnknownHostException public static InetAddress getLocalHost() throws UnknownHostException public static InetAddress getHostName() throws UnknownHostException Rturns hostname of IP Address. public static InetAddress getHostAddress() throws UnknownHostException String toString() Converts IP Address to a String","title":"Methods"},{"location":"networking/InetAddress/#implementation","text":"import java.net.* ; class InetAddressDemo { public static void main ( String [] args ) throws UnknownHostException { InetAddress address = InetAddress . getLocalHost (); System . out . println ( \"Address : \" + address ); address = InetAddress . getByName ( \"www.thearjun.tech\" ); System . out . println ( \"Address : \" + address ); /* * On the Internet, it is common for a single name to be used to represent * several machines. In the world of web servers, this is one way to provide * some degree of scaling. The getAllByName( ) factory method returns an array * of InetAddresses that represent all of the addresses that a particular name * resolves to. It will also throw an UnknownHostException if it can\u2019t resolve * the name to at least one address. */ InetAddress [] addresses = InetAddress . getAllByName ( \"www.thearjun.tech\" ); for ( int i = 0 ; i < addresses . length ; i ++ ) { System . out . println ( \"Address \" + ( i + 1 ) + \" : \" + addresses [ i ] ); } /* Instance Methods */ System . out . println ( \"Host Name : \" + address . getHostName ()); System . out . println ( \"Host Address : \" + address . getHostAddress ()); } }","title":"Implementation"},{"location":"networking/ServerToClient/","text":"Server to Client Connection This example demonstrates the messaging from server to the client. Client Side Implementation import java.io.* ; import java.net.* ; class Client { public static void main ( String [] args ) throws IOException { Socket s = new Socket ( \"localhost\" , 6666 ); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); System . out . println ( \"Message from Server : \" + message ); s . close (); } } Server Side Implementation import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"Hello Client !\" ); dout . flush (); dout . close (); ss . close (); } }","title":"Server to Client Mesaging"},{"location":"networking/ServerToClient/#server-to-client-connection","text":"This example demonstrates the messaging from server to the client.","title":"Server to Client Connection"},{"location":"networking/ServerToClient/#client-side-implementation","text":"import java.io.* ; import java.net.* ; class Client { public static void main ( String [] args ) throws IOException { Socket s = new Socket ( \"localhost\" , 6666 ); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); System . out . println ( \"Message from Server : \" + message ); s . close (); } }","title":"Client Side Implementation"},{"location":"networking/ServerToClient/#server-side-implementation","text":"import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"Hello Client !\" ); dout . flush (); dout . close (); ss . close (); } }","title":"Server Side Implementation"},{"location":"networking/SocketProgramming/","text":"Socket Programming Java Socket Programming is used for communication between the application running on different machine. Java Socket Programming support : Connection Oriented Connection-Less Classes Used : Classes Used : 1. Socket 1. DatagramSocket 2. ServerSocket 2. DatagramPacket Client in socket programming must know : - IP Adress Socket Class ServerSocket Class This method is used to create a socket. This class is used to create a ServerSocket. Methods Methods - public InputStream getInputStream() - public Socket accept() - public OutputStream getOutputStream() - public synchronized void close() - public synchronized void close() Implementation import java.net.* ; import java.io.* ; class TryWithResources { // Use try-with-resources to close a socket. public static void main ( String args [] ) throws Exception { int c ; // Create a socket connected to internic.net, port 43. Manage this // socket with a try-with-resources block. try ( Socket s = new Socket ( \"whois.internic.net\" , 43 )) { // Obtain input and output streams. InputStream in = s . getInputStream (); OutputStream out = s . getOutputStream (); // Construct a request string. String str = ( args . length == 0 ? \"MHProfessional.com\" : args [ 0 ] ) + \"\\n\" ; // Convert to bytes. byte buf [] = str . getBytes (); // Send request. out . write ( buf ); // Read and display response. while (( c = in . read ()) != - 1 ) { System . out . print (( char ) c ); } } // The socket is now closed. } }","title":"Introduction"},{"location":"networking/SocketProgramming/#socket-programming","text":"Java Socket Programming is used for communication between the application running on different machine. Java Socket Programming support : Connection Oriented Connection-Less Classes Used : Classes Used : 1. Socket 1. DatagramSocket 2. ServerSocket 2. DatagramPacket Client in socket programming must know : - IP Adress Socket Class ServerSocket Class This method is used to create a socket. This class is used to create a ServerSocket. Methods Methods - public InputStream getInputStream() - public Socket accept() - public OutputStream getOutputStream() - public synchronized void close() - public synchronized void close()","title":"Socket Programming"},{"location":"networking/SocketProgramming/#implementation","text":"import java.net.* ; import java.io.* ; class TryWithResources { // Use try-with-resources to close a socket. public static void main ( String args [] ) throws Exception { int c ; // Create a socket connected to internic.net, port 43. Manage this // socket with a try-with-resources block. try ( Socket s = new Socket ( \"whois.internic.net\" , 43 )) { // Obtain input and output streams. InputStream in = s . getInputStream (); OutputStream out = s . getOutputStream (); // Construct a request string. String str = ( args . length == 0 ? \"MHProfessional.com\" : args [ 0 ] ) + \"\\n\" ; // Convert to bytes. byte buf [] = str . getBytes (); // Send request. out . write ( buf ); // Read and display response. while (( c = in . read ()) != - 1 ) { System . out . print (( char ) c ); } } // The socket is now closed. } }","title":"Implementation"},{"location":"networking/UDPMessaging/","text":"UDP Messaging Client Side Implementation import java.net.* ; public class UDPClient { private static final int port = 9999 ; public static void main ( String [] args ) throws Exception { // In client, port number isn't necessary in DatagramSocket. DatagramSocket ds = new DatagramSocket (); String msg = \"Hello Server !\" ; // String is needed to be converted to bytes array. byte [] msgByteArray = msg . getBytes (); // As I'm testing on my own system, I am referring to localhost. InetAddress address = InetAddress . getLocalHost (); // At sender side, DatagramPacket accepts four parameters while sending : // i. byte array of message // ii. length of byte array // iii. IP address // iv. Port number DatagramPacket dp = new DatagramPacket ( msgByteArray , msgByteArray . length , address , port ); ds . send ( dp ); ds . close (); } } Server Side Implementation import java.net.* ; public class UDPServer { private static final int port = 9999 ; public static void main ( String [] args ) throws Exception { // In server, port number is essential. DatagramSocket ds = new DatagramSocket ( port ); // We are assigning the message into the empty byte array. byte [] emptybyteArray = new byte [ 1024 ] ; // At receiving side, DatagramPacket accepts two parameters only. // i. Empty byte array // ii. Length of empty byte array DatagramPacket dp = new DatagramPacket ( emptybyteArray , emptybyteArray . length ); ds . receive ( dp ); // As the received message is in bytes, we need to convert into String. // Second and third parameter in String constructor limit the message upto the // given length only. String msg = new String ( dp . getData (), 0 , dp . getLength ()); System . out . println ( \"Message : \" + msg ); ds . close (); } }","title":"UDP Messaging"},{"location":"networking/UDPMessaging/#udp-messaging","text":"","title":"UDP Messaging"},{"location":"networking/UDPMessaging/#client-side-implementation","text":"import java.net.* ; public class UDPClient { private static final int port = 9999 ; public static void main ( String [] args ) throws Exception { // In client, port number isn't necessary in DatagramSocket. DatagramSocket ds = new DatagramSocket (); String msg = \"Hello Server !\" ; // String is needed to be converted to bytes array. byte [] msgByteArray = msg . getBytes (); // As I'm testing on my own system, I am referring to localhost. InetAddress address = InetAddress . getLocalHost (); // At sender side, DatagramPacket accepts four parameters while sending : // i. byte array of message // ii. length of byte array // iii. IP address // iv. Port number DatagramPacket dp = new DatagramPacket ( msgByteArray , msgByteArray . length , address , port ); ds . send ( dp ); ds . close (); } }","title":"Client Side Implementation"},{"location":"networking/UDPMessaging/#server-side-implementation","text":"import java.net.* ; public class UDPServer { private static final int port = 9999 ; public static void main ( String [] args ) throws Exception { // In server, port number is essential. DatagramSocket ds = new DatagramSocket ( port ); // We are assigning the message into the empty byte array. byte [] emptybyteArray = new byte [ 1024 ] ; // At receiving side, DatagramPacket accepts two parameters only. // i. Empty byte array // ii. Length of empty byte array DatagramPacket dp = new DatagramPacket ( emptybyteArray , emptybyteArray . length ); ds . receive ( dp ); // As the received message is in bytes, we need to convert into String. // Second and third parameter in String constructor limit the message upto the // given length only. String msg = new String ( dp . getData (), 0 , dp . getLength ()); System . out . println ( \"Message : \" + msg ); ds . close (); } }","title":"Server Side Implementation"},{"location":"networking/URL/","text":"URL Class http://abc.com:8080/test.php Constructors public URl (String protocol, String host, int port, String file) public URl (String protocol, String host, String file) public URl (URL Contex String url) public URl (String url) Methods public String getProtocol() public String getHost() public String getPort() public String getFile() public String getQuery() // ?name = \"GCES\" Implementation import java.net.* ; class URLDemo { public static void main ( String [] args ) throws MalformedURLException { URL obj = new URL ( \"http://www.thearjun.tech:80/index.htm\" ); System . out . println ( \"Protocol : \" + obj . getProtocol ()); System . out . println ( \"Hostname : \" + obj . getHost ()); System . out . println ( \"Port : \" + obj . getPort ()); System . out . println ( \"File Hosted : \" + obj . getFile ()); System . out . println ( \"External Form : \" + obj . toExternalForm ()); } }","title":"URL"},{"location":"networking/URL/#url-class","text":"http://abc.com:8080/test.php","title":"URL Class"},{"location":"networking/URL/#constructors","text":"public URl (String protocol, String host, int port, String file) public URl (String protocol, String host, String file) public URl (URL Contex String url) public URl (String url)","title":"Constructors"},{"location":"networking/URL/#methods","text":"public String getProtocol() public String getHost() public String getPort() public String getFile() public String getQuery() // ?name = \"GCES\"","title":"Methods"},{"location":"networking/URL/#implementation","text":"import java.net.* ; class URLDemo { public static void main ( String [] args ) throws MalformedURLException { URL obj = new URL ( \"http://www.thearjun.tech:80/index.htm\" ); System . out . println ( \"Protocol : \" + obj . getProtocol ()); System . out . println ( \"Hostname : \" + obj . getHost ()); System . out . println ( \"Port : \" + obj . getPort ()); System . out . println ( \"File Hosted : \" + obj . getFile ()); System . out . println ( \"External Form : \" + obj . toExternalForm ()); } }","title":"Implementation"},{"location":"networking/URLConnection/","text":"URL Connection Implementation import java.io.* ; import java.net.* ; import java.util.Date ; class URLConnectionDemo { public static void main ( String [] args ) throws MalformedURLException { try { URL url = new URL ( \"http://www.internic.net\" ); URLConnection urlconn = url . openConnection (); System . out . println ( \"Content Length : \" + urlconn . getContentLength ()); // Returns -1 if unavailable. long d = urlconn . getDate (); // Returns 0 if unavailable System . out . println ( \"Date : \" + d ); System . out . println ( \"Content Type : \" + urlconn . getContentType ()); // get expiration date d = urlconn . getExpiration (); if ( d == 0 ) System . out . println ( \"No expiration information.\" ); else System . out . println ( \"Expires: \" + new Date ( d )); // get last-modified date d = urlconn . getLastModified (); if ( d == 0 ) System . out . println ( \"No last-modified information.\" ); else System . out . println ( \"Last-Modified: \" + new Date ( d )); // get content length long len = urlconn . getContentLengthLong (); if ( len == - 1 ) System . out . println ( \"Content length unavailable.\" ); else System . out . println ( \"Content-Length: \" + len ); InputStream is = urlconn . getInputStream (); // Returns an InputStream that is linked to the resource. This // stream can be used to obtain the content of the resource. It // throws IOException. int inputChar ; while (( inputChar = is . read ()) != - 1 ) { System . out . print (( char ) inputChar ); } is . close (); } catch ( IOException exc ) { exc . printStackTrace (); } } }","title":"URLConnection"},{"location":"networking/URLConnection/#url-connection","text":"","title":"URL Connection"},{"location":"networking/URLConnection/#implementation","text":"import java.io.* ; import java.net.* ; import java.util.Date ; class URLConnectionDemo { public static void main ( String [] args ) throws MalformedURLException { try { URL url = new URL ( \"http://www.internic.net\" ); URLConnection urlconn = url . openConnection (); System . out . println ( \"Content Length : \" + urlconn . getContentLength ()); // Returns -1 if unavailable. long d = urlconn . getDate (); // Returns 0 if unavailable System . out . println ( \"Date : \" + d ); System . out . println ( \"Content Type : \" + urlconn . getContentType ()); // get expiration date d = urlconn . getExpiration (); if ( d == 0 ) System . out . println ( \"No expiration information.\" ); else System . out . println ( \"Expires: \" + new Date ( d )); // get last-modified date d = urlconn . getLastModified (); if ( d == 0 ) System . out . println ( \"No last-modified information.\" ); else System . out . println ( \"Last-Modified: \" + new Date ( d )); // get content length long len = urlconn . getContentLengthLong (); if ( len == - 1 ) System . out . println ( \"Content length unavailable.\" ); else System . out . println ( \"Content-Length: \" + len ); InputStream is = urlconn . getInputStream (); // Returns an InputStream that is linked to the resource. This // stream can be used to obtain the content of the resource. It // throws IOException. int inputChar ; while (( inputChar = is . read ()) != - 1 ) { System . out . print (( char ) inputChar ); } is . close (); } catch ( IOException exc ) { exc . printStackTrace (); } } }","title":"Implementation"},{"location":"networking/chatApplication/","text":"Client to Server Messaging This example demonstrates the messaging from client to the server. Client Side Implmentation import java.net.* ; import java.io.* ; class Arjun { public static void main ( String [] args ) throws IOException { /* Let's use port 6666 for example. */ Socket s = new Socket ( \"192.168.0.122\" , 6666 ); DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); // Writes the message in UTF Format. dout . writeUTF ( \"Hello, my Name is Arjun. Can I know information about my attendance status ?\" ); dout . flush (); dout . close (); s . close (); } } Server Side Implementation import java.io.* ; import java.net.* ; class GCESServer { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. // This waits for client until client creates Socket object. Socket s = ss . accept (); // This gets the message sent by the client. DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); System . out . println ( \"Message from client : \" + message ); ss . close (); } }","title":"Client to Server Mesaging"},{"location":"networking/chatApplication/#client-to-server-messaging","text":"This example demonstrates the messaging from client to the server.","title":"Client to Server Messaging"},{"location":"networking/chatApplication/#client-side-implmentation","text":"import java.net.* ; import java.io.* ; class Arjun { public static void main ( String [] args ) throws IOException { /* Let's use port 6666 for example. */ Socket s = new Socket ( \"192.168.0.122\" , 6666 ); DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); // Writes the message in UTF Format. dout . writeUTF ( \"Hello, my Name is Arjun. Can I know information about my attendance status ?\" ); dout . flush (); dout . close (); s . close (); } }","title":"Client Side Implmentation"},{"location":"networking/chatApplication/#server-side-implementation","text":"import java.io.* ; import java.net.* ; class GCESServer { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. // This waits for client until client creates Socket object. Socket s = ss . accept (); // This gets the message sent by the client. DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); System . out . println ( \"Message from client : \" + message ); ss . close (); } }","title":"Server Side Implementation"},{"location":"networking/checkInternetConnection/","text":"Check Internet Connection Implementation /* This program checks whether your device is connected to Internet or not. */ import java.net.InetSocketAddress ; import java.net.Socket ; /** * @author arjun */ public class IsInternetAvailable { public static void main ( String [] args ) { Socket sock = new Socket () ; InetSocketAddress address = new InetSocketAddress ( \"www.thearjun.tech\" , 80 ); try { sock . connect ( address , 3000 ); System . out . println ( \"Active Internet Connection\" ); sock . close (); } catch ( Exception exc ) { System . out . println ( \"No Internet Connection\" ); } } }","title":"Check Internet Conneciton"},{"location":"networking/checkInternetConnection/#check-internet-connection","text":"","title":"Check Internet Connection"},{"location":"networking/checkInternetConnection/#implementation","text":"/* This program checks whether your device is connected to Internet or not. */ import java.net.InetSocketAddress ; import java.net.Socket ; /** * @author arjun */ public class IsInternetAvailable { public static void main ( String [] args ) { Socket sock = new Socket () ; InetSocketAddress address = new InetSocketAddress ( \"www.thearjun.tech\" , 80 ); try { sock . connect ( address , 3000 ); System . out . println ( \"Active Internet Connection\" ); sock . close (); } catch ( Exception exc ) { System . out . println ( \"No Internet Connection\" ); } } }","title":"Implementation"},{"location":"networking/dualConnection/","text":"Dual Connection This example demonstrates the dual connection between the client and the server. The client sends a number as a payload to the server and server returns the square of that number. Client Side Implementation import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); int num = Integer . valueOf ( message ); int snum = num * num ; // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"\" + snum ); dout . flush (); dout . close (); ss . close (); } } Server Side Implementation import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); int num = Integer . valueOf ( message ); int snum = num * num ; // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"\" + snum ); dout . flush (); dout . close (); ss . close (); } }","title":"Dual Connection"},{"location":"networking/dualConnection/#dual-connection","text":"This example demonstrates the dual connection between the client and the server. The client sends a number as a payload to the server and server returns the square of that number.","title":"Dual Connection"},{"location":"networking/dualConnection/#client-side-implementation","text":"import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); int num = Integer . valueOf ( message ); int snum = num * num ; // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"\" + snum ); dout . flush (); dout . close (); ss . close (); } }","title":"Client Side Implementation"},{"location":"networking/dualConnection/#server-side-implementation","text":"import java.io.* ; import java.net.* ; class Server { public static void main ( String [] args ) throws IOException { // Step 1: First, server should instatiate ServerSocket object. ServerSocket ss = new ServerSocket ( 6666 ); // Step 2 : Then, Server object envokes accept() method of ServerSocket class. This waits for client until client creates Socket object. Socket s = ss . accept (); DataInputStream dis = new DataInputStream ( s . getInputStream ()); // Typehinting the UTF message into string. String message = ( String ) dis . readUTF (); int num = Integer . valueOf ( message ); int snum = num * num ; // This gets the message sent by the client. DataOutputStream dout = new DataOutputStream ( s . getOutputStream ()); dout . writeUTF ( \"\" + snum ); dout . flush (); dout . close (); ss . close (); } }","title":"Server Side Implementation"},{"location":"networking/whoisImplementation/","text":"WHOIS Implementation Implementation import java.net.* ; import java.io.* ; class Whois { public static void main ( String args [] ) throws Exception { int c ; // Create a socket connected to internic.net, port 43. Socket s = new Socket ( \"whois.internic.net\" , 43 ); // Obtain input and output streams. InputStream in = s . getInputStream (); OutputStream out = s . getOutputStream (); // Construct a request string. String str = ( args . length == 0 ? \"MHProfessional.com\" : args [ 0 ] ) + \"\\n\" ; // Convert to bytes. byte buf [] = str . getBytes (); // Send request. out . write ( buf ); // Read and display response. while (( c = in . read ()) != - 1 ) { System . out . print (( char ) c ); } s . close (); } }","title":"WHOIS Implementation"},{"location":"networking/whoisImplementation/#whois-implementation","text":"","title":"WHOIS Implementation"},{"location":"networking/whoisImplementation/#implementation","text":"import java.net.* ; import java.io.* ; class Whois { public static void main ( String args [] ) throws Exception { int c ; // Create a socket connected to internic.net, port 43. Socket s = new Socket ( \"whois.internic.net\" , 43 ); // Obtain input and output streams. InputStream in = s . getInputStream (); OutputStream out = s . getOutputStream (); // Construct a request string. String str = ( args . length == 0 ? \"MHProfessional.com\" : args [ 0 ] ) + \"\\n\" ; // Convert to bytes. byte buf [] = str . getBytes (); // Send request. out . write ( buf ); // Read and display response. while (( c = in . read ()) != - 1 ) { System . out . print (( char ) c ); } s . close (); } }","title":"Implementation"},{"location":"oop/classesObjects/accessModifiers/","text":"Access Modifiers/ Control Encapsulation provides anoter important attribute: access Control Following tables summarizes what Java constructs each Java access control can be applied. The given table can be visualized as :","title":"Access Modifiers/ Control"},{"location":"oop/classesObjects/accessModifiers/#access-modifiers-control","text":"Encapsulation provides anoter important attribute: access Control Following tables summarizes what Java constructs each Java access control can be applied. The given table can be visualized as :","title":"Access Modifiers/ Control"},{"location":"oop/classesObjects/constructor/","text":"Constructor A constructor initializes an object immediately upon creation. Constuctor has same name as the class it resides and it syntactically similar to a method. No return type no void. This is because the implicit return type of a class constructor is the class type itself. If not constructor provided, java itself create default constructor and assin default value to the variable.","title":"Constructor"},{"location":"oop/classesObjects/constructor/#constructor","text":"A constructor initializes an object immediately upon creation. Constuctor has same name as the class it resides and it syntactically similar to a method. No return type no void. This is because the implicit return type of a class constructor is the class type itself. If not constructor provided, java itself create default constructor and assin default value to the variable.","title":"Constructor"},{"location":"oop/classesObjects/final/","text":"Final A field can be declared as final. Doing so prevents its contents from being modified making it essentially a constant. Must initialize a final field when it is declared. You ca do this in one of two ways : You can give it a value whn it is declared. public class Sample{ final int h = 8; } You can assign it a value within a constructor. public class Sample{ final int h; Sample(){ h = 8; } } You can't do like this : final int a; a = 8;","title":"Final"},{"location":"oop/classesObjects/final/#final","text":"A field can be declared as final. Doing so prevents its contents from being modified making it essentially a constant. Must initialize a final field when it is declared. You ca do this in one of two ways : You can give it a value whn it is declared. public class Sample{ final int h = 8; } You can assign it a value within a constructor. public class Sample{ final int h; Sample(){ h = 8; } } You can't do like this : final int a; a = 8;","title":"Final"},{"location":"oop/classesObjects/nestedInnerClass/","text":"Nested and Inner Class It is possible to define a class within another class, such classes are knoen as nested classes. The scope of a nested class is bounded by the scopoe of its enclosing class. class A{ // Enclosing class class B{ // Inner Class // Can Access All } } It is important to realize that an instance of inner class can be created only in the context of outer class.","title":"Nested and Inner Class"},{"location":"oop/classesObjects/nestedInnerClass/#nested-and-inner-class","text":"It is possible to define a class within another class, such classes are knoen as nested classes. The scope of a nested class is bounded by the scopoe of its enclosing class. class A{ // Enclosing class class B{ // Inner Class // Can Access All } } It is important to realize that an instance of inner class can be created only in the context of outer class.","title":"Nested and Inner Class"},{"location":"oop/classesObjects/simpleClass/AssigningObjectReferenceVariables/","text":"Assigning Object Reference Objects We might think that myBoxReferrer is being assigned a reference to a copy of the object referred to by myBox. That is, we might think that myBox and myBoxReferrer to a separate and distinct objects, However this would be wrong. Instead after this fragment executes myBox and myBoxReferrer will both refer to the same object. The assignment of myBox and myBoxReferrer did not allocate any memory or copy any part of the original object. It simply makes myBoxReferrer refer to the same object as does myBox, Thus, any changes made to the object through myBoxReferrer will affect the object to which myBox is referring, since they are the same object.","title":"Assigning Object Reference Objects"},{"location":"oop/classesObjects/simpleClass/AssigningObjectReferenceVariables/#assigning-object-reference-objects","text":"We might think that myBoxReferrer is being assigned a reference to a copy of the object referred to by myBox. That is, we might think that myBox and myBoxReferrer to a separate and distinct objects, However this would be wrong. Instead after this fragment executes myBox and myBoxReferrer will both refer to the same object. The assignment of myBox and myBoxReferrer did not allocate any memory or copy any part of the original object. It simply makes myBoxReferrer refer to the same object as does myBox, Thus, any changes made to the object through myBoxReferrer will affect the object to which myBox is referring, since they are the same object.","title":"Assigning Object Reference Objects"},{"location":"oop/classesObjects/static/","text":"Static When a member is declared static, it ca be accessed before any objects of its class are created and without reference to any object. Can declare on both methods and variables to be static. Instance variable declared as static are essentially global variable. When objects of its class are declaredm no copy of static vaiable is made. All instances of the class share the class static variable. Syntax to retrieve class variable and method : ClassName.variable; ClassName.method(); Methods declared as static have several restrictions: Thery can onlny directly call other static methods. They can only directly access static data. They cannot refer to this or super in anyway.","title":"Static"},{"location":"oop/classesObjects/static/#static","text":"When a member is declared static, it ca be accessed before any objects of its class are created and without reference to any object. Can declare on both methods and variables to be static. Instance variable declared as static are essentially global variable. When objects of its class are declaredm no copy of static vaiable is made. All instances of the class share the class static variable. Syntax to retrieve class variable and method : ClassName.variable; ClassName.method(); Methods declared as static have several restrictions: Thery can onlny directly call other static methods. They can only directly access static data. They cannot refer to this or super in anyway.","title":"Static"},{"location":"oop/inheritance/","text":"Inheritance Super Class --> Sub Class --> Includes all of the member of its superclass. uses 'extends' keyword. Being a superclass for a subclass doesnot mean that the superclass cannot be send by itself. Further, a class can be a super class for another subclass. General Form : class SubClassName extends SuperClassName{ // codes goes here } Java doesn't support multiple inheritance. Subclass cannot access private members of the superclass.","title":"Inheritance"},{"location":"oop/inheritance/#inheritance","text":"Super Class --> Sub Class --> Includes all of the member of its superclass. uses 'extends' keyword. Being a superclass for a subclass doesnot mean that the superclass cannot be send by itself. Further, a class can be a super class for another subclass. General Form : class SubClassName extends SuperClassName{ // codes goes here } Java doesn't support multiple inheritance. Subclass cannot access private members of the superclass.","title":"Inheritance"},{"location":"oop/inheritance/AbstractClass/","text":"Abstract Class - There are situations in which you will want to define a superclass that declares the structure of a given abstration without providing a complete implement ation of every method. - That is, sometimes you will want to create a superclass that only defines a generalized form that will be shared by all of its subclasses, leaving it to each subclass to fill in the detail. - One way this situation can occur is when a superclass is unable to create a meaningful implementation for a method. - When you want some way to ensure that a subclass does, indeed, override all necessary methods. Java's solution is the abstract method. Syntax of abstract method : abstract typeName (parameter List); // No body Example: abstract void sum(int a, int b); // No body These abstract methods are sometimes referred to as sub classes responsibility because they have no implementation specified in the superclass. Thus subclass must override them. Any class that contains one or more abstract methods must also be declared abstract. Example: abstract class A{ // code goes here. } Abstract class cannot e directly instantiated with new operator i.e. no object. Cannot declare abstract constructor or abstract static method. Any subclass of an abstract class must either implement all of the abstract methods or be declared abstract itself.","title":"Abstract Class"},{"location":"oop/inheritance/AbstractClass/#abstract-class","text":"- There are situations in which you will want to define a superclass that declares the structure of a given abstration without providing a complete implement ation of every method. - That is, sometimes you will want to create a superclass that only defines a generalized form that will be shared by all of its subclasses, leaving it to each subclass to fill in the detail. - One way this situation can occur is when a superclass is unable to create a meaningful implementation for a method. - When you want some way to ensure that a subclass does, indeed, override all necessary methods. Java's solution is the abstract method. Syntax of abstract method : abstract typeName (parameter List); // No body Example: abstract void sum(int a, int b); // No body These abstract methods are sometimes referred to as sub classes responsibility because they have no implementation specified in the superclass. Thus subclass must override them. Any class that contains one or more abstract methods must also be declared abstract. Example: abstract class A{ // code goes here. } Abstract class cannot e directly instantiated with new operator i.e. no object. Cannot declare abstract constructor or abstract static method. Any subclass of an abstract class must either implement all of the abstract methods or be declared abstract itself.","title":"Abstract Class"},{"location":"oop/inheritance/finalWithInheritance/","text":"Final with Inheritance as constant Final to prevent overriding inheritance class A{ final void mOne(){ //code goes here. } } class B extends A{ void m1(){ // Illegal ; overriding is prohibited. } } To prevent inheritance final class A{ // code goes here } class B extends A{ // Error // code goes here }","title":"Final with Inheritance"},{"location":"oop/inheritance/finalWithInheritance/#final-with-inheritance","text":"as constant Final to prevent overriding inheritance class A{ final void mOne(){ //code goes here. } } class B extends A{ void m1(){ // Illegal ; overriding is prohibited. } } To prevent inheritance final class A{ // code goes here } class B extends A{ // Error // code goes here }","title":"Final with Inheritance"},{"location":"oop/inheritance/interface/","text":"Interface 28 th December 2018, Arjun Adhikari Using the keyword 'interface', you can fully abstract a class interface from its implementation. That is, using interface, you can specify what a class must do, but not how it does it. They are syntactically similar to classes, but they lack instance variables ad then methods are declared without any body. Interfaces are designed to support dynamic method resolution at run time. Defining an Interface accessModifier interface name{ returnType methodName(parameterList); // public/abstract method; before JDK 8 type final varNameOne = value; // final/static } But beginning with JDK 8, it is possible to add a default implementation to an interface method. Thus it is now possible for interface to specify some behaviour. default void mOne(){ // code goes here } Implementing Interface class className [extends superClass] [interface interfaceOne, interfaceTwo]{ //code goes here } When you implement an interface method, it must be declared as public. Method should be public in interface. Class member variable should either be PUBLIC or STATIC. The method inside interface can contain the body, if it is DEFAULT. Why do we use interface ? It is used to achieve total abstraction. Since java does not support multiple inheritance in case of class, but by using interface it can achieve multiple inheritance . It is also used to achieve loose coupling. Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes? The reason is, abstract classes may contain non-final variables, whereas variables in interface are final, public and static. Interface can be extended. If we want to extend the interface or class, following keywords are used. Interface -> Interface (extends) Class -> Class (extends) Class -> Interface (implements) Class -> Abstract Class (extends)","title":"Interface"},{"location":"oop/inheritance/interface/#interface","text":"28 th December 2018, Arjun Adhikari Using the keyword 'interface', you can fully abstract a class interface from its implementation. That is, using interface, you can specify what a class must do, but not how it does it. They are syntactically similar to classes, but they lack instance variables ad then methods are declared without any body. Interfaces are designed to support dynamic method resolution at run time.","title":"Interface"},{"location":"oop/inheritance/interface/#defining-an-interface","text":"accessModifier interface name{ returnType methodName(parameterList); // public/abstract method; before JDK 8 type final varNameOne = value; // final/static } But beginning with JDK 8, it is possible to add a default implementation to an interface method. Thus it is now possible for interface to specify some behaviour. default void mOne(){ // code goes here }","title":"Defining an Interface"},{"location":"oop/inheritance/interface/#implementing-interface","text":"class className [extends superClass] [interface interfaceOne, interfaceTwo]{ //code goes here } When you implement an interface method, it must be declared as public. Method should be public in interface. Class member variable should either be PUBLIC or STATIC. The method inside interface can contain the body, if it is DEFAULT. Why do we use interface ? It is used to achieve total abstraction. Since java does not support multiple inheritance in case of class, but by using interface it can achieve multiple inheritance . It is also used to achieve loose coupling. Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes? The reason is, abstract classes may contain non-final variables, whereas variables in interface are final, public and static.","title":"Implementing Interface"},{"location":"oop/inheritance/interface/#interface-can-be-extended","text":"If we want to extend the interface or class, following keywords are used. Interface -> Interface (extends) Class -> Class (extends) Class -> Interface (implements) Class -> Abstract Class (extends)","title":"Interface can be extended."},{"location":"oop/inheritance/interface/Extended/","text":"Extending Interfaces An interface can extend another interface in the same way that a class can extend another class. The extends keyword is used to extend an interface, and the child interface inherits the methods of the parent interface. The following Sports interface is extended by Hockey and Football interfaces. Example // Filename: Sports.java public interface Sports { public void setHomeTeam(String name); public void setVisitingTeam(String name); } // Filename: Football.java public interface Football extends Sports { public void homeTeamScored(int points); public void visitingTeamScored(int points); public void endOfQuarter(int quarter); } // Filename: Hockey.java public interface Hockey extends Sports { public void homeGoalScored(); public void visitingGoalScored(); public void endOfPeriod(int period); public void overtimePeriod(int ot); } The Hockey interface has four methods, but it inherits two from Sports; thus, a class that implements Hockey needs to implement all six methods. Similarly, a class that implements Football needs to define the three methods from Football and the two methods from Sports.","title":"Extending Interfaces"},{"location":"oop/inheritance/interface/Extended/#extending-interfaces","text":"An interface can extend another interface in the same way that a class can extend another class. The extends keyword is used to extend an interface, and the child interface inherits the methods of the parent interface. The following Sports interface is extended by Hockey and Football interfaces. Example // Filename: Sports.java public interface Sports { public void setHomeTeam(String name); public void setVisitingTeam(String name); } // Filename: Football.java public interface Football extends Sports { public void homeTeamScored(int points); public void visitingTeamScored(int points); public void endOfQuarter(int quarter); } // Filename: Hockey.java public interface Hockey extends Sports { public void homeGoalScored(); public void visitingGoalScored(); public void endOfPeriod(int period); public void overtimePeriod(int ot); } The Hockey interface has four methods, but it inherits two from Sports; thus, a class that implements Hockey needs to implement all six methods. Similarly, a class that implements Football needs to define the three methods from Football and the two methods from Sports.","title":"Extending Interfaces"},{"location":"oop/inheritance/interface/NestedInterface/","text":"Nested Interface We can declare an interface in another interface or class. Such an interface is termed as a nested interface. Following are the rules governing a nested interface. A nested interface declared within an interface must be public. A nested interface declared within a class can have any access modifier. A nested interface is by default static. Such interface can be declared a member of class or another interface such as interface is called a member interface. It can be declared as public, protected or private. interface OuterInterface{ interface InnerInterface{ // code goes here. } }","title":"Nested Interface"},{"location":"oop/inheritance/interface/NestedInterface/#nested-interface","text":"We can declare an interface in another interface or class. Such an interface is termed as a nested interface. Following are the rules governing a nested interface. A nested interface declared within an interface must be public. A nested interface declared within a class can have any access modifier. A nested interface is by default static. Such interface can be declared a member of class or another interface such as interface is called a member interface. It can be declared as public, protected or private. interface OuterInterface{ interface InnerInterface{ // code goes here. } }","title":"Nested Interface"},{"location":"oop/inheritance/methodOverRiding/","text":"Method Overriding In a class hierarchy, when a method in a subclass has the same name and the type signature as a method in its superclass, then the method in the subclass is said to override the method in the superclass. When an overridden method is called from within its subclass, it will always reger to the version of that method defined by the subclass. The version of the method defined by the superclass will be hidden. If we need to invoke version of superclass, we must use super inside the subclass.","title":"Method Overriding"},{"location":"oop/inheritance/methodOverRiding/#method-overriding","text":"In a class hierarchy, when a method in a subclass has the same name and the type signature as a method in its superclass, then the method in the subclass is said to override the method in the superclass. When an overridden method is called from within its subclass, it will always reger to the version of that method defined by the subclass. The version of the method defined by the superclass will be hidden. If we need to invoke version of superclass, we must use super inside the subclass.","title":"Method Overriding"},{"location":"oop/inheritance/methodOverRiding/DynamicMethodDispatch/","text":"Dynamic Method Dispatch How Java implements run-time polymorphism ? Overiding method allow Java to support run-time polymorphism. Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at run time, rather than compile time. The type of the ovject being referred to that determine which version of an overridden method will be executed.","title":"Dynamic Method Dispatch"},{"location":"oop/inheritance/methodOverRiding/DynamicMethodDispatch/#dynamic-method-dispatch","text":"","title":"Dynamic Method Dispatch"},{"location":"oop/inheritance/methodOverRiding/DynamicMethodDispatch/#how-java-implements-run-time-polymorphism","text":"Overiding method allow Java to support run-time polymorphism. Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at run time, rather than compile time. The type of the ovject being referred to that determine which version of an overridden method will be executed.","title":"How Java implements run-time polymorphism ?"},{"location":"oop/inheritance/super/","text":"Super Using super() : Whenever a sub class needs to refer to its immediate superclass, it can do so by use of the keyword super . super() has two general forms : The first calls the super class constructor. It is used to access a member of the super class that has been hidden by member of a subclass. super() must always be the first statement executed inside a subclass constructor. When constructor are executed in inheritance? - Order of Derivation","title":"Super"},{"location":"oop/inheritance/super/#super","text":"Using super() : Whenever a sub class needs to refer to its immediate superclass, it can do so by use of the keyword super . super() has two general forms : The first calls the super class constructor. It is used to access a member of the super class that has been hidden by member of a subclass. super() must always be the first statement executed inside a subclass constructor. When constructor are executed in inheritance? - Order of Derivation","title":"Super"},{"location":"oop/usingPackage/","text":"Packages They are containers for classes. Package allows you to create a class named ABC, which you can store in your own package without concern that it will collide with some other class named ABC stored elsewhere. Java provides a mechanism for partitioning the class name space more manageable chunks. This mechanism is referred as package. Package is both a naming and a visibility \u23e9 \"default\" control mechanism. Defining a Package To create: - include a package command as the first statement in a Java source file. - Any classes declared within that file will belong to the specified package. - If you omit the package statement, the class names are put into the default package, which has no name. In C and C++, header file Syntax : package package_name; Java uses file system directories to store packages. For example, the .class files for any classes you declare to be part of myPackage must be stored in directory called MyPackage. Directory name must match the package name exactly. Can create a hierarchy of package package com.nepal.java com \\ nepal \\ java Finding Packages and CLASSPATH How does the Java runtime system know where to look for package that you create ? First, by default, the Java runtime system uses the current working directory as its starting point. Thus, if your package is in a sub directory of the current directory, it will be found. Second, you can specify a directory path or paths by setting CLASSPATH environment variable. Third, can use - CLASSPATH option with Java and javac to specify the path to your classes. Importing Packages Case I // We can only use Date class in program. import java.util.Date; class MyDate extends Date{ } Case II // We can use every classes of util packages in program. import java.util.*; class MyDate extends Date{ } Case III // We can use any class we want; FQPM = Fully Qualified Package Name class MyDate extends java.util.Date{ } Types of packages User defined packages Defined by the developers as poer their applicaion requirements. Package abc; Package bac; Package cba; class Test{ } Pre Defined Packages are defined by java programming language and provide along with java software. i. exampleOne : java.lang - This is default packagem no need to import in JAVA. It is able to include all basic classes and interfaces which are required to prepare basic program system, object, String Buffer, String Builder Thread, Runnable, All Wrapper Classes (Byte, Short), Exception and its sub class come under java.lang . ii. exampleTwo : java.io - To perform input and output operation. - InputStream, ByteArrayInputStream, FileInputStream, OutputStream, Reader, Writer etc. iii. exampleThree : java.util - Representing all data structures. - List, Array List, Vector, Stack, LinkedList, Set, HasSet, Queue, SortedSet, Map, HashMap etc. iv. exampleFour : java.awt - To prepare GUI application - Frame, Button, Label, List, TextField, TextArea etc. v. exampleFive : javax.swing - To prepare GUI application - To overcome drawbacks of awt vi. exampleSix : java.net - To prepare distributed application on the basis of Socket Programming - Socket, URL, URLConnection vii. exampleSeven : java.sql - To prepare JDBC applications - Driver, Connection, Statement","title":"Packages"},{"location":"oop/usingPackage/#packages","text":"They are containers for classes. Package allows you to create a class named ABC, which you can store in your own package without concern that it will collide with some other class named ABC stored elsewhere. Java provides a mechanism for partitioning the class name space more manageable chunks. This mechanism is referred as package. Package is both a naming and a visibility \u23e9 \"default\" control mechanism.","title":"Packages"},{"location":"oop/usingPackage/#defining-a-package","text":"To create: - include a package command as the first statement in a Java source file. - Any classes declared within that file will belong to the specified package. - If you omit the package statement, the class names are put into the default package, which has no name. In C and C++, header file Syntax : package package_name; Java uses file system directories to store packages. For example, the .class files for any classes you declare to be part of myPackage must be stored in directory called MyPackage. Directory name must match the package name exactly. Can create a hierarchy of package package com.nepal.java com \\ nepal \\ java","title":"Defining a Package"},{"location":"oop/usingPackage/#finding-packages-and-classpath","text":"How does the Java runtime system know where to look for package that you create ? First, by default, the Java runtime system uses the current working directory as its starting point. Thus, if your package is in a sub directory of the current directory, it will be found. Second, you can specify a directory path or paths by setting CLASSPATH environment variable. Third, can use - CLASSPATH option with Java and javac to specify the path to your classes.","title":"Finding Packages and CLASSPATH"},{"location":"oop/usingPackage/#importing-packages","text":"Case I // We can only use Date class in program. import java.util.Date; class MyDate extends Date{ } Case II // We can use every classes of util packages in program. import java.util.*; class MyDate extends Date{ } Case III // We can use any class we want; FQPM = Fully Qualified Package Name class MyDate extends java.util.Date{ }","title":"Importing Packages"},{"location":"oop/usingPackage/#types-of-packages","text":"User defined packages Defined by the developers as poer their applicaion requirements. Package abc; Package bac; Package cba; class Test{ } Pre Defined Packages are defined by java programming language and provide along with java software. i. exampleOne : java.lang - This is default packagem no need to import in JAVA. It is able to include all basic classes and interfaces which are required to prepare basic program system, object, String Buffer, String Builder Thread, Runnable, All Wrapper Classes (Byte, Short), Exception and its sub class come under java.lang . ii. exampleTwo : java.io - To perform input and output operation. - InputStream, ByteArrayInputStream, FileInputStream, OutputStream, Reader, Writer etc. iii. exampleThree : java.util - Representing all data structures. - List, Array List, Vector, Stack, LinkedList, Set, HasSet, Queue, SortedSet, Map, HashMap etc. iv. exampleFour : java.awt - To prepare GUI application - Frame, Button, Label, List, TextField, TextArea etc. v. exampleFive : javax.swing - To prepare GUI application - To overcome drawbacks of awt vi. exampleSix : java.net - To prepare distributed application on the basis of Socket Programming - Socket, URL, URLConnection vii. exampleSeven : java.sql - To prepare JDBC applications - Driver, Connection, Statement","title":"Types of packages"},{"location":"oop/usingPackage/tuts/","text":"How to set CLASSPATH ? For Windows: Follow the picture below : For MacOS/Linux : export CLASSPATH = /home/arjun/Desktop/workspace/Java/oop/packages Checking the CLASSPATH variable For Windows: echo %CLASSPATH% For LINUX / MacOS: echo $CLASSPATH","title":"How to set CLASSPATH ?"},{"location":"oop/usingPackage/tuts/#how-to-set-classpath","text":"For Windows: Follow the picture below : For MacOS/Linux : export CLASSPATH = /home/arjun/Desktop/workspace/Java/oop/packages","title":"How to set CLASSPATH ?"},{"location":"oop/usingPackage/tuts/#checking-the-classpath-variable","text":"For Windows: echo %CLASSPATH% For LINUX / MacOS: echo $CLASSPATH","title":"Checking the CLASSPATH variable"},{"location":"swing/COMPONENTS/","text":"Class Name For Swing Components JApplet JColorChooser JDialog JFrame JLayeredPane JButton JComboBox JEditorPane JInternalFrame JList JCheckBox JFileChooser JLable JMenu JCheckBoxMenuItem JDesktopPanel JFormattedTextField Jlayer JMenuBar","title":"Class Name For Swing Components"},{"location":"swing/COMPONENTS/#class-name-for-swing-components","text":"JApplet JColorChooser JDialog JFrame JLayeredPane JButton JComboBox JEditorPane JInternalFrame JList JCheckBox JFileChooser JLable JMenu JCheckBoxMenuItem JDesktopPanel JFormattedTextField Jlayer JMenuBar","title":"Class Name For Swing Components"},{"location":"swing/DIFFERENCES/","text":"Differences Between AWT & Swing SN AWT Swing 1. Stands for Abstract Window Toolkit Also known as JFC (Java Foundation Class) 2. AWT components are called heavyweight components. Swings are called light weight component because swing components sits on the top of AWT components and do the work. 3. Require java.awt package require javax.swing package 4. AWT components are platform dependent. Swing components are made in purely java and they are platform independent. 5. Less Component More component and rich functionality. 6. Pseudo Code here Pseudo Code here","title":"Differences Between AWT & Swing"},{"location":"swing/DIFFERENCES/#differences-between-awt-swing","text":"SN AWT Swing 1. Stands for Abstract Window Toolkit Also known as JFC (Java Foundation Class) 2. AWT components are called heavyweight components. Swings are called light weight component because swing components sits on the top of AWT components and do the work. 3. Require java.awt package require javax.swing package 4. AWT components are platform dependent. Swing components are made in purely java and they are platform independent. 5. Less Component More component and rich functionality. 6. Pseudo Code here Pseudo Code here","title":"Differences Between AWT &amp; Swing"},{"location":"swing/HIERARCHY/","text":"Hierarchy of Swing Components","title":"Hierarchy of Swing Components"},{"location":"swing/HIERARCHY/#hierarchy-of-swing-components","text":"","title":"Hierarchy of Swing Components"},{"location":"swing/multiCasting/MULTICASTING/","text":"Multicasting Several event sources can react to the same event listener and vice versa. AWT event sources support a multicast model for listeners. This means that the same event can be sent to more than one listener object.","title":"Multicasting"},{"location":"swing/multiCasting/MULTICASTING/#multicasting","text":"Several event sources can react to the same event listener and vice versa. AWT event sources support a multicast model for listeners. This means that the same event can be sent to more than one listener object.","title":"Multicasting"},{"location":"variables/","text":"Macro Rendering Error TemplateNotFound : variables/typeConversion.java Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 473, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 94, in top-level template code File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/loaders.py\", line 214, in get_source raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: variables/typeConversion.java","title":"Variables"},{"location":"variables/#macro-rendering-error","text":"TemplateNotFound : variables/typeConversion.java Traceback (most recent call last): File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/mkdocs_macros/plugin.py\", line 473, in render return md_template.render(**page_variables) File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 1291, in render self.environment.handle_exception() File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/environment.py\", line 925, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 94, in top-level template code File \"/opt/hostedtoolcache/Python/3.10.2/x64/lib/python3.10/site-packages/jinja2/loaders.py\", line 214, in get_source raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: variables/typeConversion.java","title":"Macro Rendering Error"}]}